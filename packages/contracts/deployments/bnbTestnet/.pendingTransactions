{
  "0x9000459590d4ce0e90ac6331cc217945abae07e2b3a07aa169dc14af132cf2c8": {
    "name": "Permit2",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Permit2",
      "sourceName": "contracts/permit2/Permit2.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "name": "AllowanceExpired",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ExcessiveInvalidation",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "InsufficientAllowance",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            }
          ],
          "name": "InvalidAmount",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidContractSignature",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidNonce",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSignature",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSignatureLength",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSigner",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LengthMismatch",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "signatureDeadline",
              "type": "uint256"
            }
          ],
          "name": "SignatureExpired",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint160",
              "name": "amount",
              "type": "uint160"
            },
            {
              "indexed": false,
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "Lockdown",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint48",
              "name": "newNonce",
              "type": "uint48"
            },
            {
              "indexed": false,
              "internalType": "uint48",
              "name": "oldNonce",
              "type": "uint48"
            }
          ],
          "name": "NonceInvalidation",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint160",
              "name": "amount",
              "type": "uint160"
            },
            {
              "indexed": false,
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "indexed": false,
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            }
          ],
          "name": "Permit",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "word",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "mask",
              "type": "uint256"
            }
          ],
          "name": "UnorderedNonceInvalidation",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint160",
              "name": "amount",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amount",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "newNonce",
              "type": "uint48"
            }
          ],
          "name": "invalidateNonces",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "wordPos",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mask",
              "type": "uint256"
            }
          ],
          "name": "invalidateUnorderedNonces",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
              "name": "approvals",
              "type": "tuple[]"
            }
          ],
          "name": "lockdown",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "nonceBitmap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint160",
                      "name": "amount",
                      "type": "uint160"
                    },
                    {
                      "internalType": "uint48",
                      "name": "expiration",
                      "type": "uint48"
                    },
                    {
                      "internalType": "uint48",
                      "name": "nonce",
                      "type": "uint48"
                    }
                  ],
                  "internalType": "struct IAllowanceTransfer.PermitDetails[]",
                  "name": "details",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sigDeadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAllowanceTransfer.PermitBatch",
              "name": "permitBatch",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "permit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint160",
                      "name": "amount",
                      "type": "uint160"
                    },
                    {
                      "internalType": "uint48",
                      "name": "expiration",
                      "type": "uint48"
                    },
                    {
                      "internalType": "uint48",
                      "name": "nonce",
                      "type": "uint48"
                    }
                  ],
                  "internalType": "struct IAllowanceTransfer.PermitDetails",
                  "name": "details",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sigDeadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAllowanceTransfer.PermitSingle",
              "name": "permitSingle",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "permit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ISignatureTransfer.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.PermitTransferFrom",
              "name": "permit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "requestedAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.SignatureTransferDetails",
              "name": "transferDetails",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "permitTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ISignatureTransfer.TokenPermissions[]",
                  "name": "permitted",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
              "name": "permit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "requestedAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
              "name": "transferDetails",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "permitTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ISignatureTransfer.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.PermitTransferFrom",
              "name": "permit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "requestedAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.SignatureTransferDetails",
              "name": "transferDetails",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "witness",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "witnessTypeString",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "permitWitnessTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ISignatureTransfer.TokenPermissions[]",
                  "name": "permitted",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
              "name": "permit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "requestedAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
              "name": "transferDetails",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "witness",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "witnessTypeString",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "permitWitnessTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint160",
                  "name": "amount",
                  "type": "uint160"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                }
              ],
              "internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
              "name": "transferDetails",
              "type": "tuple[]"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amount",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a55782604052519020608052611efc90816100c182396080518161161a015260a051816115f40152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db14610f8f578063137c29fe14610dd45780632a2d80d114610b695780632b67b570146109f257806330f28b7a1461092e5780633644e5151461090b57806336c78516146108c15780633ff9dcb11461085f5780634fe02b441461082157806365d9723c146106d257806387517c45146105dc578063927da10514610550578063cc53287f14610466578063edd9444b1461033f5763fe8ec1a7146100c657600080fd5b3461033b5760c036600319011261033b5767ffffffffffffffff928035848111610337576100f79036908301611281565b6024358581116103335761010e9036908401611250565b610116611161565b9160843588811161032f5761012e90369087016111f7565b95909860a43590811161032b5795989561014a913691016111f7565b969095815190610159826110c0565b606b9081835260209b8c917f5065726d697442617463685769746e6573735472616e7366657246726f6d2854838601527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472868601527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608601527f3620646561646c696e652c00000000000000000000000000000000000000000060808601528c8651958694825b87811061030957505050918084926102329694608b8097019081523781018d8482015203908101845201826110f8565b89815191012090855151996102468b6118ea565b9a8a5b8181106102db5750506102d8999a6102cf916102c38451928361026f8482018093611941565b0393610283601f19958681018352826110f8565b5190208a830151868c0151965193840197885260208801919091523360408801526060870152608086019490945260643560a086015292839060c0860190565b039081018352826110f8565b5190209361178b565b80f35b808d6102fe826102f86102f2610304968f5161137b565b516119f7565b9261137b565b5261191c565b610249565b90829495965080935081819301015182828a01015201918e9187959493610202565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b50913461033b57608036600319011261033b5767ffffffffffffffff908035828111610337576103729036908301611281565b602435838111610333576103899036908401611250565b939092610394611161565b91606435908111610462576103ab913691016111f7565b949093835151976103bb896118ea565b98885b8181106104465750506102d8979881516103ee816103e0602082018095611941565b03601f1981018352826110f8565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102cf816110dc565b808b6102fe826102f86102f261045d968d5161137b565b6103be565b8680fd5b50823461054c57602090816003193601126103375780359067ffffffffffffffff82116103335761049991369101611250565b929091845b8481106104a9578580f35b806104bf6104ba60019388886114a1565b6114b1565b6104d4846104ce848a8a6114a1565b016114b1565b338952838552858920916001600160a01b0380911692838b528652868a20911690818a52855285892073ffffffffffffffffffffffffffffffffffffffff1981541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a20161049e565b8280fd5b503461033b57606036600319011261033b576105d88161056e611135565b9361057761114b565b61057f611161565b6001600160a01b03968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b503461033b57608036600319011261033b576105f6611135565b906105ff61114b565b91610608611161565b65ffffffffffff926064358481169081810361032f5765ffffffffffff60a01b947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b20986001600160a01b03809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146106ca57504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b9050926106a9565b50823461054c57606036600319011261054c576106ed611135565b906106f661114b565b9265ffffffffffff604435818116939084810361032f5733885260209160018352848920966001600160a01b0380911697888b528452858a20981697888a5283528489205460d01c93848711156108125761ffff9085840316116107eb5750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b508451633ab3447f60e11b8152fd5b503461033b578060031936011261033b57806020926001600160a01b03610846611135565b1681528084528181206024358252845220549051908152f35b50823461054c578160031936011261054c577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610908576080366003190112610908576108db611135565b6108e361114b565b6108eb611161565b606435916001600160a01b0383168303610333576102d8936113a5565b80fd5b503461033b578160031936011261033b576020906109276115f1565b9051908152f35b5082903461054c5761010036600319011261054c5761094c3661118b565b90806083193601126103375761096061111a565b9160e43567ffffffffffffffff81116109ee576102d894610983913691016111f7565b93909261099083516119f7565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a081526109e5816110dc565b519020916116f8565b8580fd5b50913461033b5761010036600319011261033b57610a0e611135565b366023190160c08112610337576080855191610a29836110a4565b1261033757845190610a3a82611072565b6001600160a01b03916024358381168103610462578152604435838116810361046257602082015265ffffffffffff606435818116810361032f57888301526084359081168103610462576060820152815260a4359382851685036109ee576020820194855260c4359087830182815260e43567ffffffffffffffff811161032b57610ac990369084016111f7565b929093804211610b53575050918591610b436102d8999a610b4995610aee885161196e565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610b3b816110c0565b5190206116ac565b91611a5d565b51925116916114c5565b602492508a519163cd21db4f60e01b8352820152fd5b50913461033b57606060031993818536011261033757610b87611135565b9260249081359267ffffffffffffffff9788851161032f57859085360301126104625780519785890189811082821117610dc25782528483013581811161032b578501903660238301121561032b578382013591610be483611225565b90610bf1855192836110f8565b838252602093878584019160071b83010191368311610dbe578801905b828210610d61575050508a526044610c27868801611177565b96838c01978852013594838b0191868352604435908111610d5d57610c4f90369087016111f7565b959096804211610d4b575050508998995151610c6a816118ea565b908b5b818110610d1e57505092889492610b4392610ceb97958351610c96816103e08682018095611941565b519020906001600160a01b039a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610b3b816110c0565b51169082515192845b848110610cff578580f35b80610d188585610d12600195875161137b565b516114c5565b01610cf4565b80610d39610d338e9f9e93610d43945161137b565b5161196e565b6102fe828661137b565b9b9a9b610c6d565b85519163cd21db4f60e01b8352820152fd5b8a80fd5b608082360312610dbe57856080918851610d7a81611072565b610d8385611177565b8152610d90838601611177565b83820152610d9f8a860161123d565b8a8201528d610daf81870161123d565b90820152815201910190610c0e565b8c80fd5b8489604186634e487b7160e01b835252fd5b503461033b5761014036600319011261033b57610df03661118b565b908060831936011261054c57610e0461111a565b67ffffffffffffffff9290610104358481116109ee57610e2790369088016111f7565b9690946101243590811161046257610e41913691016111f7565b949093805197610e50896110c0565b606490818a526020937f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e50858c01527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848c01527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608c01527f696e652c0000000000000000000000000000000000000000000000000000000060808c015283519a8a5b848110610f7c57505060846109e5938c8c856102d89e9f96610f2b96868501848152378201908482015203908101845201826110f8565b838151910120926103e0610f3f87516119f7565b8783015185890151955193840196875260208701919091523360408701526060860152608085019390935260e43560a085015291829060c0850190565b8181018701518d82018801528601610ef4565b50823461054c5760208060031936011261033757813567ffffffffffffffff928382116109ee57366023830112156109ee57810135928311610333576024906007368386831b8401011161046257865b858110610fea578780f35b80821b8301906080602319833603011261032b5761106c88876001946060835161101381611072565b61104f60846110238d8601611177565b9485845261103360448201611177565b809785015261104460648201611177565b809885015201611177565b91829101526001600160a01b0380808093169516931691166113a5565b01610fdf565b6080810190811067ffffffffffffffff82111761108e57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761108e57604052565b60a0810190811067ffffffffffffffff82111761108e57604052565b60c0810190811067ffffffffffffffff82111761108e57604052565b90601f8019910116810190811067ffffffffffffffff82111761108e57604052565b60c435906001600160a01b038216820361113057565b600080fd5b600435906001600160a01b038216820361113057565b602435906001600160a01b038216820361113057565b604435906001600160a01b038216820361113057565b35906001600160a01b038216820361113057565b6003190190608082126111305760408051906111a6826110a4565b8082941261113057805181810181811067ffffffffffffffff82111761108e5782526004356001600160a01b0381168103611130578152602435602082015282526044356020830152606435910152565b9181601f840112156111305782359167ffffffffffffffff8311611130576020838186019501011161113057565b67ffffffffffffffff811161108e5760051b60200190565b359065ffffffffffff8216820361113057565b9181601f840112156111305782359167ffffffffffffffff8311611130576020808501948460061b01011161113057565b91909160608184031261113057604080519161129c836110a4565b8294813567ffffffffffffffff9081811161113057830182601f820112156111305780356112c981611225565b926112d6875194856110f8565b818452602094858086019360061b85010193818511611130579086899897969594939201925b848410611319575050505050855280820135908501520135910152565b909192939495969784830312611130578851908982019082821085831117611366578a928992845261134a87611177565b81528287013583820152815201930191908897969594936112fc565b60246000634e487b7160e01b81526041600452fd5b805182101561138f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9291926001600160a01b03604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611470575082871696838803611409575b505061140795501692611e03565b565b878484161160001461144657602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b73ffffffffffffffffffffffffffffffffffffffff1984846114079a0316911617905538806113f9565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b919081101561138f5760061b0190565b356001600160a01b03811681036111305790565b9065ffffffffffff90816060840151166001600160a01b03908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c036115e15791856115cb94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec989796945087156000146115d05765ffffffffffff60a01b9042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b161717905551938493849160409194936001600160a01b03606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5065ffffffffffff60a01b8761156a565b60048451633ab3447f60e11b8152fd5b467f00000000000000000000000000000000000000000000000000000000000000000361163c577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a6040820152466060820152306080820152608081526116a6816110c0565b51902090565b6116b46115f1565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526116a681611072565b9192909360a435936040840151804211611773575060208451015180861161175b5750918591610b436117389461173360208801518661189c565b6116ac565b6001600160a01b0380915151169260843591821682036111305761140793611e03565b60249060405190633728b83d60e01b82526004820152fd5b6024906040519063cd21db4f60e01b82526004820152fd5b959093958051519560409283830151804211611885575084880361185c576117c2918691610b4360209b6117338d8801518661189c565b60005b8681106117d6575050505050505050565b6117e181835161137b565b51886117ee83878a6114a1565b01359089810151808311611845575091818888886001968596611818575b505050505050016117c5565b61183a95611834926001600160a01b036104ba935116956114a1565b91611e03565b80388888888361180c565b602490865190633728b83d60e01b82526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b60249085519063cd21db4f60e01b82526004820152fd5b906001600160a01b03600160ff83161b9216600052600060205260406000209060081c60005260205260406000208181541880915516156118d957565b6004604051633ab3447f60e11b8152fd5b906118f482611225565b61190160405191826110f8565b8281528092611912601f1991611225565b0190602036910137565b600019811461192b5760010190565b634e487b7160e01b600052601160045260246000fd5b805160208092019160005b82811061195a575050505090565b83518552938101939281019260010161194c565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b367883526001600160a01b038082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff82111761108e5760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a184526001600160a01b03815116604084015201516060820152606081526116a681611072565b9190826040910312611130576020823592013590565b909290916000823b611ca9575060418403611c2157611a7e84840184611a47565b9190946040101561138f576080600091604060ff96013560f81c935b60409788519283526020978896168684015288830152606082015282805260015afa15611c1657600051835184810181811067ffffffffffffffff82111761108e578552601081527f797979797979797979797979797979790000000000000000000000000000000084820152845190848201927e7150be0000000000000000000000000000000000000000000000000000000084526001600160a01b038091169485602485015216948560448401526060606484015281519182608485015260005b838110611c02575050509181611b9160a4828660008381998299010152601f801991011681010360848101845201826110f8565b51906a636f6e736f6c652e6c6f675afa508015611bd95703611bb05750565b600490517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b600483517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b81810183015185820160a401528201611b5d565b82513d6000823e3d90fd5b91604084929414600014611c7f57611c3b91810190611a47565b929092601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169160ff1c019260ff841161192b57608060009160ff9593611a9a565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b92938092602092956001600160a01b0360646040518097819682957f1626ba7e000000000000000000000000000000000000000000000000000000009c8d85526004850152604060248501528160448501528484013781810183018a9052601f01601f19168101030192165afa908115611df8578291611d7a575b507fffffffff0000000000000000000000000000000000000000000000000000000091501603611d5057565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d8211611df0575b81611d94602093836110f8565b8101031261033b5751907fffffffff000000000000000000000000000000000000000000000000000000008216820361090857507fffffffff000000000000000000000000000000000000000000000000000000009038611d24565b3d9150611d87565b6040513d84823e3d90fd5b9160008093602095606494604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b03809216600487015216602485015260448401525af13d15601f3d1160016000511416171615611e6857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfea2646970667358221220d1f01af73caf72ea274682f34e0e2f5cf5436b1762a3d73d908d8cff1746ff8064736f6c63430008110033",
      "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db14610f8f578063137c29fe14610dd45780632a2d80d114610b695780632b67b570146109f257806330f28b7a1461092e5780633644e5151461090b57806336c78516146108c15780633ff9dcb11461085f5780634fe02b441461082157806365d9723c146106d257806387517c45146105dc578063927da10514610550578063cc53287f14610466578063edd9444b1461033f5763fe8ec1a7146100c657600080fd5b3461033b5760c036600319011261033b5767ffffffffffffffff928035848111610337576100f79036908301611281565b6024358581116103335761010e9036908401611250565b610116611161565b9160843588811161032f5761012e90369087016111f7565b95909860a43590811161032b5795989561014a913691016111f7565b969095815190610159826110c0565b606b9081835260209b8c917f5065726d697442617463685769746e6573735472616e7366657246726f6d2854838601527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472868601527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608601527f3620646561646c696e652c00000000000000000000000000000000000000000060808601528c8651958694825b87811061030957505050918084926102329694608b8097019081523781018d8482015203908101845201826110f8565b89815191012090855151996102468b6118ea565b9a8a5b8181106102db5750506102d8999a6102cf916102c38451928361026f8482018093611941565b0393610283601f19958681018352826110f8565b5190208a830151868c0151965193840197885260208801919091523360408801526060870152608086019490945260643560a086015292839060c0860190565b039081018352826110f8565b5190209361178b565b80f35b808d6102fe826102f86102f2610304968f5161137b565b516119f7565b9261137b565b5261191c565b610249565b90829495965080935081819301015182828a01015201918e9187959493610202565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b50913461033b57608036600319011261033b5767ffffffffffffffff908035828111610337576103729036908301611281565b602435838111610333576103899036908401611250565b939092610394611161565b91606435908111610462576103ab913691016111f7565b949093835151976103bb896118ea565b98885b8181106104465750506102d8979881516103ee816103e0602082018095611941565b03601f1981018352826110f8565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102cf816110dc565b808b6102fe826102f86102f261045d968d5161137b565b6103be565b8680fd5b50823461054c57602090816003193601126103375780359067ffffffffffffffff82116103335761049991369101611250565b929091845b8481106104a9578580f35b806104bf6104ba60019388886114a1565b6114b1565b6104d4846104ce848a8a6114a1565b016114b1565b338952838552858920916001600160a01b0380911692838b528652868a20911690818a52855285892073ffffffffffffffffffffffffffffffffffffffff1981541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a20161049e565b8280fd5b503461033b57606036600319011261033b576105d88161056e611135565b9361057761114b565b61057f611161565b6001600160a01b03968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b503461033b57608036600319011261033b576105f6611135565b906105ff61114b565b91610608611161565b65ffffffffffff926064358481169081810361032f5765ffffffffffff60a01b947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b20986001600160a01b03809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146106ca57504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b9050926106a9565b50823461054c57606036600319011261054c576106ed611135565b906106f661114b565b9265ffffffffffff604435818116939084810361032f5733885260209160018352848920966001600160a01b0380911697888b528452858a20981697888a5283528489205460d01c93848711156108125761ffff9085840316116107eb5750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b508451633ab3447f60e11b8152fd5b503461033b578060031936011261033b57806020926001600160a01b03610846611135565b1681528084528181206024358252845220549051908152f35b50823461054c578160031936011261054c577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610908576080366003190112610908576108db611135565b6108e361114b565b6108eb611161565b606435916001600160a01b0383168303610333576102d8936113a5565b80fd5b503461033b578160031936011261033b576020906109276115f1565b9051908152f35b5082903461054c5761010036600319011261054c5761094c3661118b565b90806083193601126103375761096061111a565b9160e43567ffffffffffffffff81116109ee576102d894610983913691016111f7565b93909261099083516119f7565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a081526109e5816110dc565b519020916116f8565b8580fd5b50913461033b5761010036600319011261033b57610a0e611135565b366023190160c08112610337576080855191610a29836110a4565b1261033757845190610a3a82611072565b6001600160a01b03916024358381168103610462578152604435838116810361046257602082015265ffffffffffff606435818116810361032f57888301526084359081168103610462576060820152815260a4359382851685036109ee576020820194855260c4359087830182815260e43567ffffffffffffffff811161032b57610ac990369084016111f7565b929093804211610b53575050918591610b436102d8999a610b4995610aee885161196e565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610b3b816110c0565b5190206116ac565b91611a5d565b51925116916114c5565b602492508a519163cd21db4f60e01b8352820152fd5b50913461033b57606060031993818536011261033757610b87611135565b9260249081359267ffffffffffffffff9788851161032f57859085360301126104625780519785890189811082821117610dc25782528483013581811161032b578501903660238301121561032b578382013591610be483611225565b90610bf1855192836110f8565b838252602093878584019160071b83010191368311610dbe578801905b828210610d61575050508a526044610c27868801611177565b96838c01978852013594838b0191868352604435908111610d5d57610c4f90369087016111f7565b959096804211610d4b575050508998995151610c6a816118ea565b908b5b818110610d1e57505092889492610b4392610ceb97958351610c96816103e08682018095611941565b519020906001600160a01b039a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610b3b816110c0565b51169082515192845b848110610cff578580f35b80610d188585610d12600195875161137b565b516114c5565b01610cf4565b80610d39610d338e9f9e93610d43945161137b565b5161196e565b6102fe828661137b565b9b9a9b610c6d565b85519163cd21db4f60e01b8352820152fd5b8a80fd5b608082360312610dbe57856080918851610d7a81611072565b610d8385611177565b8152610d90838601611177565b83820152610d9f8a860161123d565b8a8201528d610daf81870161123d565b90820152815201910190610c0e565b8c80fd5b8489604186634e487b7160e01b835252fd5b503461033b5761014036600319011261033b57610df03661118b565b908060831936011261054c57610e0461111a565b67ffffffffffffffff9290610104358481116109ee57610e2790369088016111f7565b9690946101243590811161046257610e41913691016111f7565b949093805197610e50896110c0565b606490818a526020937f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e50858c01527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848c01527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608c01527f696e652c0000000000000000000000000000000000000000000000000000000060808c015283519a8a5b848110610f7c57505060846109e5938c8c856102d89e9f96610f2b96868501848152378201908482015203908101845201826110f8565b838151910120926103e0610f3f87516119f7565b8783015185890151955193840196875260208701919091523360408701526060860152608085019390935260e43560a085015291829060c0850190565b8181018701518d82018801528601610ef4565b50823461054c5760208060031936011261033757813567ffffffffffffffff928382116109ee57366023830112156109ee57810135928311610333576024906007368386831b8401011161046257865b858110610fea578780f35b80821b8301906080602319833603011261032b5761106c88876001946060835161101381611072565b61104f60846110238d8601611177565b9485845261103360448201611177565b809785015261104460648201611177565b809885015201611177565b91829101526001600160a01b0380808093169516931691166113a5565b01610fdf565b6080810190811067ffffffffffffffff82111761108e57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761108e57604052565b60a0810190811067ffffffffffffffff82111761108e57604052565b60c0810190811067ffffffffffffffff82111761108e57604052565b90601f8019910116810190811067ffffffffffffffff82111761108e57604052565b60c435906001600160a01b038216820361113057565b600080fd5b600435906001600160a01b038216820361113057565b602435906001600160a01b038216820361113057565b604435906001600160a01b038216820361113057565b35906001600160a01b038216820361113057565b6003190190608082126111305760408051906111a6826110a4565b8082941261113057805181810181811067ffffffffffffffff82111761108e5782526004356001600160a01b0381168103611130578152602435602082015282526044356020830152606435910152565b9181601f840112156111305782359167ffffffffffffffff8311611130576020838186019501011161113057565b67ffffffffffffffff811161108e5760051b60200190565b359065ffffffffffff8216820361113057565b9181601f840112156111305782359167ffffffffffffffff8311611130576020808501948460061b01011161113057565b91909160608184031261113057604080519161129c836110a4565b8294813567ffffffffffffffff9081811161113057830182601f820112156111305780356112c981611225565b926112d6875194856110f8565b818452602094858086019360061b85010193818511611130579086899897969594939201925b848410611319575050505050855280820135908501520135910152565b909192939495969784830312611130578851908982019082821085831117611366578a928992845261134a87611177565b81528287013583820152815201930191908897969594936112fc565b60246000634e487b7160e01b81526041600452fd5b805182101561138f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9291926001600160a01b03604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611470575082871696838803611409575b505061140795501692611e03565b565b878484161160001461144657602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b73ffffffffffffffffffffffffffffffffffffffff1984846114079a0316911617905538806113f9565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b919081101561138f5760061b0190565b356001600160a01b03811681036111305790565b9065ffffffffffff90816060840151166001600160a01b03908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c036115e15791856115cb94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec989796945087156000146115d05765ffffffffffff60a01b9042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b161717905551938493849160409194936001600160a01b03606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5065ffffffffffff60a01b8761156a565b60048451633ab3447f60e11b8152fd5b467f00000000000000000000000000000000000000000000000000000000000000000361163c577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a6040820152466060820152306080820152608081526116a6816110c0565b51902090565b6116b46115f1565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526116a681611072565b9192909360a435936040840151804211611773575060208451015180861161175b5750918591610b436117389461173360208801518661189c565b6116ac565b6001600160a01b0380915151169260843591821682036111305761140793611e03565b60249060405190633728b83d60e01b82526004820152fd5b6024906040519063cd21db4f60e01b82526004820152fd5b959093958051519560409283830151804211611885575084880361185c576117c2918691610b4360209b6117338d8801518661189c565b60005b8681106117d6575050505050505050565b6117e181835161137b565b51886117ee83878a6114a1565b01359089810151808311611845575091818888886001968596611818575b505050505050016117c5565b61183a95611834926001600160a01b036104ba935116956114a1565b91611e03565b80388888888361180c565b602490865190633728b83d60e01b82526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b60249085519063cd21db4f60e01b82526004820152fd5b906001600160a01b03600160ff83161b9216600052600060205260406000209060081c60005260205260406000208181541880915516156118d957565b6004604051633ab3447f60e11b8152fd5b906118f482611225565b61190160405191826110f8565b8281528092611912601f1991611225565b0190602036910137565b600019811461192b5760010190565b634e487b7160e01b600052601160045260246000fd5b805160208092019160005b82811061195a575050505090565b83518552938101939281019260010161194c565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b367883526001600160a01b038082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff82111761108e5760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a184526001600160a01b03815116604084015201516060820152606081526116a681611072565b9190826040910312611130576020823592013590565b909290916000823b611ca9575060418403611c2157611a7e84840184611a47565b9190946040101561138f576080600091604060ff96013560f81c935b60409788519283526020978896168684015288830152606082015282805260015afa15611c1657600051835184810181811067ffffffffffffffff82111761108e578552601081527f797979797979797979797979797979790000000000000000000000000000000084820152845190848201927e7150be0000000000000000000000000000000000000000000000000000000084526001600160a01b038091169485602485015216948560448401526060606484015281519182608485015260005b838110611c02575050509181611b9160a4828660008381998299010152601f801991011681010360848101845201826110f8565b51906a636f6e736f6c652e6c6f675afa508015611bd95703611bb05750565b600490517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b600483517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b81810183015185820160a401528201611b5d565b82513d6000823e3d90fd5b91604084929414600014611c7f57611c3b91810190611a47565b929092601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169160ff1c019260ff841161192b57608060009160ff9593611a9a565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b92938092602092956001600160a01b0360646040518097819682957f1626ba7e000000000000000000000000000000000000000000000000000000009c8d85526004850152604060248501528160448501528484013781810183018a9052601f01601f19168101030192165afa908115611df8578291611d7a575b507fffffffff0000000000000000000000000000000000000000000000000000000091501603611d5057565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d8211611df0575b81611d94602093836110f8565b8101031261033b5751907fffffffff000000000000000000000000000000000000000000000000000000008216820361090857507fffffffff000000000000000000000000000000000000000000000000000000009038611d24565b3d9150611d87565b6040513d84823e3d90fd5b9160008093602095606494604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b03809216600487015216602485015260448401525af13d15601f3d1160016000511416171615611e6857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfea2646970667358221220d1f01af73caf72ea274682f34e0e2f5cf5436b1762a3d73d908d8cff1746ff8064736f6c63430008110033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "details": "Users must approve Permit2 before calling any of the transfer functions.",
        "errors": {
          "AllowanceExpired(uint256)": [
            {
              "params": {
                "deadline": "The timestamp at which the allowed amount is no longer valid"
              }
            }
          ],
          "InsufficientAllowance(uint256)": [
            {
              "params": {
                "amount": "The maximum amount allowed"
              }
            }
          ],
          "InvalidAmount(uint256)": [
            {
              "params": {
                "maxAmount": "The maximum amount a spender can request to transfer"
              }
            }
          ],
          "LengthMismatch()": [
            {
              "details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
            }
          ],
          "SignatureExpired(uint256)": [
            {
              "params": {
                "signatureDeadline": "The timestamp at which a signature is no longer valid"
              }
            }
          ]
        },
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "Uses cached version if chainid and address are unchanged from construction."
          },
          "approve(address,address,uint160,uint48)": {
            "details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
            "params": {
              "amount": "The approved amount of the token",
              "expiration": "The timestamp at which the approval is no longer valid",
              "spender": "The spender address to approve",
              "token": "The token to approve"
            }
          },
          "invalidateNonces(address,address,uint48)": {
            "details": "Can't invalidate more than 2**16 nonces per transaction.",
            "params": {
              "newNonce": "The new nonce to set. Invalidates all nonces less than it.",
              "spender": "The spender to invalidate nonces for",
              "token": "The token to invalidate nonces for"
            }
          },
          "invalidateUnorderedNonces(uint256,uint256)": {
            "details": "The wordPos is maxed at type(uint248).max",
            "params": {
              "mask": "A bitmap masked against msg.sender's current bitmap at the word position",
              "wordPos": "A number to index the nonceBitmap at"
            }
          },
          "lockdown((address,address)[])": {
            "params": {
              "approvals": "Array of approvals to revoke."
            }
          },
          "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
            "details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
            "params": {
              "owner": "The owner of the tokens being approved",
              "permitSingle": "Data signed over by the owner specifying the terms of approval",
              "signature": "The owner's signature over the permit data"
            }
          },
          "permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
            "details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
            "params": {
              "owner": "The owner of the tokens being approved",
              "permitBatch": "Data signed over by the owner specifying the terms of approval",
              "signature": "The owner's signature over the permit data"
            }
          },
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
            "details": "Reverts if the requested amount is greater than the permitted signed amount",
            "params": {
              "owner": "The owner of the tokens to transfer",
              "permit": "The permit data signed over by the owner",
              "signature": "The signature to verify",
              "transferDetails": "The spender's requested transfer details for the permitted token"
            }
          },
          "permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
            "params": {
              "owner": "The owner of the tokens to transfer",
              "permit": "The permit data signed over by the owner",
              "signature": "The signature to verify",
              "transferDetails": "Specifies the recipient and requested amount for the token transfer"
            }
          },
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
            "details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
            "params": {
              "owner": "The owner of the tokens to transfer",
              "permit": "The permit data signed over by the owner",
              "signature": "The signature to verify",
              "transferDetails": "The spender's requested transfer details for the permitted token",
              "witness": "Extra data to include when checking the user signature",
              "witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
            }
          },
          "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
            "details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
            "params": {
              "owner": "The owner of the tokens to transfer",
              "permit": "The permit data signed over by the owner",
              "signature": "The signature to verify",
              "transferDetails": "Specifies the recipient and requested amount for the token transfer",
              "witness": "Extra data to include when checking the user signature",
              "witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
            }
          },
          "transferFrom((address,address,uint160,address)[])": {
            "details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
            "params": {
              "transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
            }
          },
          "transferFrom(address,address,uint160,address)": {
            "details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
            "params": {
              "amount": "The amount of the token to transfer",
              "from": "The address to transfer from",
              "to": "The address of the recipient",
              "token": "The token address to transfer"
            }
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "60c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a55782604052519020608052611efc90816100c182396080518161161a015260a051816115f40152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db14610f8f578063137c29fe14610dd45780632a2d80d114610b695780632b67b570146109f257806330f28b7a1461092e5780633644e5151461090b57806336c78516146108c15780633ff9dcb11461085f5780634fe02b441461082157806365d9723c146106d257806387517c45146105dc578063927da10514610550578063cc53287f14610466578063edd9444b1461033f5763fe8ec1a7146100c657600080fd5b3461033b5760c036600319011261033b5767ffffffffffffffff928035848111610337576100f79036908301611281565b6024358581116103335761010e9036908401611250565b610116611161565b9160843588811161032f5761012e90369087016111f7565b95909860a43590811161032b5795989561014a913691016111f7565b969095815190610159826110c0565b606b9081835260209b8c917f5065726d697442617463685769746e6573735472616e7366657246726f6d2854838601527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472868601527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608601527f3620646561646c696e652c00000000000000000000000000000000000000000060808601528c8651958694825b87811061030957505050918084926102329694608b8097019081523781018d8482015203908101845201826110f8565b89815191012090855151996102468b6118ea565b9a8a5b8181106102db5750506102d8999a6102cf916102c38451928361026f8482018093611941565b0393610283601f19958681018352826110f8565b5190208a830151868c0151965193840197885260208801919091523360408801526060870152608086019490945260643560a086015292839060c0860190565b039081018352826110f8565b5190209361178b565b80f35b808d6102fe826102f86102f2610304968f5161137b565b516119f7565b9261137b565b5261191c565b610249565b90829495965080935081819301015182828a01015201918e9187959493610202565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b50913461033b57608036600319011261033b5767ffffffffffffffff908035828111610337576103729036908301611281565b602435838111610333576103899036908401611250565b939092610394611161565b91606435908111610462576103ab913691016111f7565b949093835151976103bb896118ea565b98885b8181106104465750506102d8979881516103ee816103e0602082018095611941565b03601f1981018352826110f8565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102cf816110dc565b808b6102fe826102f86102f261045d968d5161137b565b6103be565b8680fd5b50823461054c57602090816003193601126103375780359067ffffffffffffffff82116103335761049991369101611250565b929091845b8481106104a9578580f35b806104bf6104ba60019388886114a1565b6114b1565b6104d4846104ce848a8a6114a1565b016114b1565b338952838552858920916001600160a01b0380911692838b528652868a20911690818a52855285892073ffffffffffffffffffffffffffffffffffffffff1981541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a20161049e565b8280fd5b503461033b57606036600319011261033b576105d88161056e611135565b9361057761114b565b61057f611161565b6001600160a01b03968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b503461033b57608036600319011261033b576105f6611135565b906105ff61114b565b91610608611161565b65ffffffffffff926064358481169081810361032f5765ffffffffffff60a01b947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b20986001600160a01b03809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146106ca57504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b9050926106a9565b50823461054c57606036600319011261054c576106ed611135565b906106f661114b565b9265ffffffffffff604435818116939084810361032f5733885260209160018352848920966001600160a01b0380911697888b528452858a20981697888a5283528489205460d01c93848711156108125761ffff9085840316116107eb5750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b508451633ab3447f60e11b8152fd5b503461033b578060031936011261033b57806020926001600160a01b03610846611135565b1681528084528181206024358252845220549051908152f35b50823461054c578160031936011261054c577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610908576080366003190112610908576108db611135565b6108e361114b565b6108eb611161565b606435916001600160a01b0383168303610333576102d8936113a5565b80fd5b503461033b578160031936011261033b576020906109276115f1565b9051908152f35b5082903461054c5761010036600319011261054c5761094c3661118b565b90806083193601126103375761096061111a565b9160e43567ffffffffffffffff81116109ee576102d894610983913691016111f7565b93909261099083516119f7565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a081526109e5816110dc565b519020916116f8565b8580fd5b50913461033b5761010036600319011261033b57610a0e611135565b366023190160c08112610337576080855191610a29836110a4565b1261033757845190610a3a82611072565b6001600160a01b03916024358381168103610462578152604435838116810361046257602082015265ffffffffffff606435818116810361032f57888301526084359081168103610462576060820152815260a4359382851685036109ee576020820194855260c4359087830182815260e43567ffffffffffffffff811161032b57610ac990369084016111f7565b929093804211610b53575050918591610b436102d8999a610b4995610aee885161196e565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610b3b816110c0565b5190206116ac565b91611a5d565b51925116916114c5565b602492508a519163cd21db4f60e01b8352820152fd5b50913461033b57606060031993818536011261033757610b87611135565b9260249081359267ffffffffffffffff9788851161032f57859085360301126104625780519785890189811082821117610dc25782528483013581811161032b578501903660238301121561032b578382013591610be483611225565b90610bf1855192836110f8565b838252602093878584019160071b83010191368311610dbe578801905b828210610d61575050508a526044610c27868801611177565b96838c01978852013594838b0191868352604435908111610d5d57610c4f90369087016111f7565b959096804211610d4b575050508998995151610c6a816118ea565b908b5b818110610d1e57505092889492610b4392610ceb97958351610c96816103e08682018095611941565b519020906001600160a01b039a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610b3b816110c0565b51169082515192845b848110610cff578580f35b80610d188585610d12600195875161137b565b516114c5565b01610cf4565b80610d39610d338e9f9e93610d43945161137b565b5161196e565b6102fe828661137b565b9b9a9b610c6d565b85519163cd21db4f60e01b8352820152fd5b8a80fd5b608082360312610dbe57856080918851610d7a81611072565b610d8385611177565b8152610d90838601611177565b83820152610d9f8a860161123d565b8a8201528d610daf81870161123d565b90820152815201910190610c0e565b8c80fd5b8489604186634e487b7160e01b835252fd5b503461033b5761014036600319011261033b57610df03661118b565b908060831936011261054c57610e0461111a565b67ffffffffffffffff9290610104358481116109ee57610e2790369088016111f7565b9690946101243590811161046257610e41913691016111f7565b949093805197610e50896110c0565b606490818a526020937f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e50858c01527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848c01527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608c01527f696e652c0000000000000000000000000000000000000000000000000000000060808c015283519a8a5b848110610f7c57505060846109e5938c8c856102d89e9f96610f2b96868501848152378201908482015203908101845201826110f8565b838151910120926103e0610f3f87516119f7565b8783015185890151955193840196875260208701919091523360408701526060860152608085019390935260e43560a085015291829060c0850190565b8181018701518d82018801528601610ef4565b50823461054c5760208060031936011261033757813567ffffffffffffffff928382116109ee57366023830112156109ee57810135928311610333576024906007368386831b8401011161046257865b858110610fea578780f35b80821b8301906080602319833603011261032b5761106c88876001946060835161101381611072565b61104f60846110238d8601611177565b9485845261103360448201611177565b809785015261104460648201611177565b809885015201611177565b91829101526001600160a01b0380808093169516931691166113a5565b01610fdf565b6080810190811067ffffffffffffffff82111761108e57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761108e57604052565b60a0810190811067ffffffffffffffff82111761108e57604052565b60c0810190811067ffffffffffffffff82111761108e57604052565b90601f8019910116810190811067ffffffffffffffff82111761108e57604052565b60c435906001600160a01b038216820361113057565b600080fd5b600435906001600160a01b038216820361113057565b602435906001600160a01b038216820361113057565b604435906001600160a01b038216820361113057565b35906001600160a01b038216820361113057565b6003190190608082126111305760408051906111a6826110a4565b8082941261113057805181810181811067ffffffffffffffff82111761108e5782526004356001600160a01b0381168103611130578152602435602082015282526044356020830152606435910152565b9181601f840112156111305782359167ffffffffffffffff8311611130576020838186019501011161113057565b67ffffffffffffffff811161108e5760051b60200190565b359065ffffffffffff8216820361113057565b9181601f840112156111305782359167ffffffffffffffff8311611130576020808501948460061b01011161113057565b91909160608184031261113057604080519161129c836110a4565b8294813567ffffffffffffffff9081811161113057830182601f820112156111305780356112c981611225565b926112d6875194856110f8565b818452602094858086019360061b85010193818511611130579086899897969594939201925b848410611319575050505050855280820135908501520135910152565b909192939495969784830312611130578851908982019082821085831117611366578a928992845261134a87611177565b81528287013583820152815201930191908897969594936112fc565b60246000634e487b7160e01b81526041600452fd5b805182101561138f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9291926001600160a01b03604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611470575082871696838803611409575b505061140795501692611e03565b565b878484161160001461144657602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b73ffffffffffffffffffffffffffffffffffffffff1984846114079a0316911617905538806113f9565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b919081101561138f5760061b0190565b356001600160a01b03811681036111305790565b9065ffffffffffff90816060840151166001600160a01b03908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c036115e15791856115cb94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec989796945087156000146115d05765ffffffffffff60a01b9042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b161717905551938493849160409194936001600160a01b03606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5065ffffffffffff60a01b8761156a565b60048451633ab3447f60e11b8152fd5b467f00000000000000000000000000000000000000000000000000000000000000000361163c577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a6040820152466060820152306080820152608081526116a6816110c0565b51902090565b6116b46115f1565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526116a681611072565b9192909360a435936040840151804211611773575060208451015180861161175b5750918591610b436117389461173360208801518661189c565b6116ac565b6001600160a01b0380915151169260843591821682036111305761140793611e03565b60249060405190633728b83d60e01b82526004820152fd5b6024906040519063cd21db4f60e01b82526004820152fd5b959093958051519560409283830151804211611885575084880361185c576117c2918691610b4360209b6117338d8801518661189c565b60005b8681106117d6575050505050505050565b6117e181835161137b565b51886117ee83878a6114a1565b01359089810151808311611845575091818888886001968596611818575b505050505050016117c5565b61183a95611834926001600160a01b036104ba935116956114a1565b91611e03565b80388888888361180c565b602490865190633728b83d60e01b82526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b60249085519063cd21db4f60e01b82526004820152fd5b906001600160a01b03600160ff83161b9216600052600060205260406000209060081c60005260205260406000208181541880915516156118d957565b6004604051633ab3447f60e11b8152fd5b906118f482611225565b61190160405191826110f8565b8281528092611912601f1991611225565b0190602036910137565b600019811461192b5760010190565b634e487b7160e01b600052601160045260246000fd5b805160208092019160005b82811061195a575050505090565b83518552938101939281019260010161194c565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b367883526001600160a01b038082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff82111761108e5760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a184526001600160a01b03815116604084015201516060820152606081526116a681611072565b9190826040910312611130576020823592013590565b909290916000823b611ca9575060418403611c2157611a7e84840184611a47565b9190946040101561138f576080600091604060ff96013560f81c935b60409788519283526020978896168684015288830152606082015282805260015afa15611c1657600051835184810181811067ffffffffffffffff82111761108e578552601081527f797979797979797979797979797979790000000000000000000000000000000084820152845190848201927e7150be0000000000000000000000000000000000000000000000000000000084526001600160a01b038091169485602485015216948560448401526060606484015281519182608485015260005b838110611c02575050509181611b9160a4828660008381998299010152601f801991011681010360848101845201826110f8565b51906a636f6e736f6c652e6c6f675afa508015611bd95703611bb05750565b600490517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b600483517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b81810183015185820160a401528201611b5d565b82513d6000823e3d90fd5b91604084929414600014611c7f57611c3b91810190611a47565b929092601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169160ff1c019260ff841161192b57608060009160ff9593611a9a565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b92938092602092956001600160a01b0360646040518097819682957f1626ba7e000000000000000000000000000000000000000000000000000000009c8d85526004850152604060248501528160448501528484013781810183018a9052601f01601f19168101030192165afa908115611df8578291611d7a575b507fffffffff0000000000000000000000000000000000000000000000000000000091501603611d5057565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d8211611df0575b81611d94602093836110f8565b8101031261033b5751907fffffffff000000000000000000000000000000000000000000000000000000008216820361090857507fffffffff000000000000000000000000000000000000000000000000000000009038611d24565b3d9150611d87565b6040513d84823e3d90fd5b9160008093602095606494604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b03809216600487015216602485015260448401525af13d15601f3d1160016000511416171615611e6857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfea2646970667358221220d1f01af73caf72ea274682f34e0e2f5cf5436b1762a3d73d908d8cff1746ff8064736f6c63430008110033",
          "opcodes": "PUSH1 0xC0 CALLVALUE PUSH2 0xBB JUMPI CHAINID PUSH1 0xA0 MSTORE PUSH1 0x20 DUP2 ADD PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 DUP2 MSTORE PUSH32 0x9AC997416E8FF9D2FF6BEBEB7149F65CDAE5E32E2B90440B566BB3044041D36A PUSH1 0x40 DUP4 ADD MSTORE CHAINID PUSH1 0x60 DUP4 ADD MSTORE ADDRESS PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP2 DUP1 DUP4 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP5 GT OR PUSH2 0xA5 JUMPI DUP3 PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x80 MSTORE PUSH2 0x1EFC SWAP1 DUP2 PUSH2 0xC1 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x161A ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0x15F4 ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD58B1DB EQ PUSH2 0xF8F JUMPI DUP1 PUSH4 0x137C29FE EQ PUSH2 0xDD4 JUMPI DUP1 PUSH4 0x2A2D80D1 EQ PUSH2 0xB69 JUMPI DUP1 PUSH4 0x2B67B570 EQ PUSH2 0x9F2 JUMPI DUP1 PUSH4 0x30F28B7A EQ PUSH2 0x92E JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x90B JUMPI DUP1 PUSH4 0x36C78516 EQ PUSH2 0x8C1 JUMPI DUP1 PUSH4 0x3FF9DCB1 EQ PUSH2 0x85F JUMPI DUP1 PUSH4 0x4FE02B44 EQ PUSH2 0x821 JUMPI DUP1 PUSH4 0x65D9723C EQ PUSH2 0x6D2 JUMPI DUP1 PUSH4 0x87517C45 EQ PUSH2 0x5DC JUMPI DUP1 PUSH4 0x927DA105 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0xCC53287F EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0xEDD9444B EQ PUSH2 0x33F JUMPI PUSH4 0xFE8EC1A7 EQ PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x33B JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP1 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x337 JUMPI PUSH2 0xF7 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP6 DUP2 GT PUSH2 0x333 JUMPI PUSH2 0x10E SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x1250 JUMP JUMPDEST PUSH2 0x116 PUSH2 0x1161 JUMP JUMPDEST SWAP2 PUSH1 0x84 CALLDATALOAD DUP9 DUP2 GT PUSH2 0x32F JUMPI PUSH2 0x12E SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP6 SWAP1 SWAP9 PUSH1 0xA4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x32B JUMPI SWAP6 SWAP9 SWAP6 PUSH2 0x14A SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP7 SWAP1 SWAP6 DUP2 MLOAD SWAP1 PUSH2 0x159 DUP3 PUSH2 0x10C0 JUMP JUMPDEST PUSH1 0x6B SWAP1 DUP2 DUP4 MSTORE PUSH1 0x20 SWAP12 DUP13 SWAP2 PUSH32 0x5065726D697442617463685769746E6573735472616E7366657246726F6D2854 DUP4 DUP7 ADD MSTORE PUSH32 0x6F6B656E5065726D697373696F6E735B5D207065726D69747465642C61646472 DUP7 DUP7 ADD MSTORE PUSH32 0x657373207370656E6465722C75696E74323536206E6F6E63652C75696E743235 PUSH1 0x60 DUP7 ADD MSTORE PUSH32 0x3620646561646C696E652C000000000000000000000000000000000000000000 PUSH1 0x80 DUP7 ADD MSTORE DUP13 DUP7 MLOAD SWAP6 DUP7 SWAP5 DUP3 JUMPDEST DUP8 DUP2 LT PUSH2 0x309 JUMPI POP POP POP SWAP2 DUP1 DUP5 SWAP3 PUSH2 0x232 SWAP7 SWAP5 PUSH1 0x8B DUP1 SWAP8 ADD SWAP1 DUP2 MSTORE CALLDATACOPY DUP2 ADD DUP14 DUP5 DUP3 ADD MSTORE SUB SWAP1 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x10F8 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 DUP6 MLOAD MLOAD SWAP10 PUSH2 0x246 DUP12 PUSH2 0x18EA JUMP JUMPDEST SWAP11 DUP11 JUMPDEST DUP2 DUP2 LT PUSH2 0x2DB JUMPI POP POP PUSH2 0x2D8 SWAP10 SWAP11 PUSH2 0x2CF SWAP2 PUSH2 0x2C3 DUP5 MLOAD SWAP3 DUP4 PUSH2 0x26F DUP5 DUP3 ADD DUP1 SWAP4 PUSH2 0x1941 JUMP JUMPDEST SUB SWAP4 PUSH2 0x283 PUSH1 0x1F NOT SWAP6 DUP7 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP11 DUP4 ADD MLOAD DUP7 DUP13 ADD MLOAD SWAP7 MLOAD SWAP4 DUP5 ADD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0xA0 DUP7 ADD MSTORE SWAP3 DUP4 SWAP1 PUSH1 0xC0 DUP7 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP4 PUSH2 0x178B JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP1 DUP14 PUSH2 0x2FE DUP3 PUSH2 0x2F8 PUSH2 0x2F2 PUSH2 0x304 SWAP7 DUP16 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD PUSH2 0x19F7 JUMP JUMPDEST SWAP3 PUSH2 0x137B JUMP JUMPDEST MSTORE PUSH2 0x191C JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST SWAP1 DUP3 SWAP5 SWAP6 SWAP7 POP DUP1 SWAP4 POP DUP2 DUP2 SWAP4 ADD ADD MLOAD DUP3 DUP3 DUP11 ADD ADD MSTORE ADD SWAP2 DUP15 SWAP2 DUP8 SWAP6 SWAP5 SWAP4 PUSH2 0x202 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP1 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x337 JUMPI PUSH2 0x372 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x333 JUMPI PUSH2 0x389 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x1250 JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x394 PUSH2 0x1161 JUMP JUMPDEST SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x462 JUMPI PUSH2 0x3AB SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 DUP4 MLOAD MLOAD SWAP8 PUSH2 0x3BB DUP10 PUSH2 0x18EA JUMP JUMPDEST SWAP9 DUP9 JUMPDEST DUP2 DUP2 LT PUSH2 0x446 JUMPI POP POP PUSH2 0x2D8 SWAP8 SWAP9 DUP2 MLOAD PUSH2 0x3EE DUP2 PUSH2 0x3E0 PUSH1 0x20 DUP3 ADD DUP1 SWAP6 PUSH2 0x1941 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x20 DUP7 ADD MLOAD DUP3 DUP8 ADD MLOAD SWAP1 DUP4 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP5 PUSH32 0xFCF35F5AC6A2C28868DC44C302166470266239195F02B0EE408334829333B766 DUP7 MSTORE DUP5 ADD MSTORE CALLER PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0x2CF DUP2 PUSH2 0x10DC JUMP JUMPDEST DUP1 DUP12 PUSH2 0x2FE DUP3 PUSH2 0x2F8 PUSH2 0x2F2 PUSH2 0x45D SWAP7 DUP14 MLOAD PUSH2 0x137B JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x333 JUMPI PUSH2 0x499 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x1250 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 DUP5 JUMPDEST DUP5 DUP2 LT PUSH2 0x4A9 JUMPI DUP6 DUP1 RETURN JUMPDEST DUP1 PUSH2 0x4BF PUSH2 0x4BA PUSH1 0x1 SWAP4 DUP9 DUP9 PUSH2 0x14A1 JUMP JUMPDEST PUSH2 0x14B1 JUMP JUMPDEST PUSH2 0x4D4 DUP5 PUSH2 0x4CE DUP5 DUP11 DUP11 PUSH2 0x14A1 JUMP JUMPDEST ADD PUSH2 0x14B1 JUMP JUMPDEST CALLER DUP10 MSTORE DUP4 DUP6 MSTORE DUP6 DUP10 KECCAK256 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP3 DUP4 DUP12 MSTORE DUP7 MSTORE DUP7 DUP11 KECCAK256 SWAP2 AND SWAP1 DUP2 DUP11 MSTORE DUP6 MSTORE DUP6 DUP10 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 SLOAD AND SWAP1 SSTORE DUP6 MLOAD SWAP2 DUP3 MSTORE DUP5 DUP3 ADD MSTORE PUSH32 0x89B1ADD15EFF56B3DFE299AD94E01F2B52FBCB80AE1A3BAEA6AE8C04CB2B98A4 DUP6 CALLER SWAP3 LOG2 ADD PUSH2 0x49E JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0x5D8 DUP2 PUSH2 0x56E PUSH2 0x1135 JUMP JUMPDEST SWAP4 PUSH2 0x577 PUSH2 0x114B JUMP JUMPDEST PUSH2 0x57F PUSH2 0x1161 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP5 DUP5 KECCAK256 SWAP3 DUP9 AND DUP5 MSTORE SWAP2 DUP3 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP8 AND DUP4 MSTORE DUP2 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD SWAP3 MLOAD SWAP4 DUP4 AND DUP5 MSTORE PUSH1 0xA0 DUP4 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND SWAP1 DUP5 ADD MSTORE PUSH1 0xD0 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x40 DUP4 ADD MSTORE DUP2 SWAP1 PUSH1 0x60 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0x5F6 PUSH2 0x1135 JUMP JUMPDEST SWAP1 PUSH2 0x5FF PUSH2 0x114B JUMP JUMPDEST SWAP2 PUSH2 0x608 PUSH2 0x1161 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP3 PUSH1 0x64 CALLDATALOAD DUP5 DUP2 AND SWAP1 DUP2 DUP2 SUB PUSH2 0x32F JUMPI PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP5 PUSH32 0xDA9FA7C1B00402C17D0161B249B1AB8BBEC047C5A52207B9C112DEFFD817036B SWAP5 CALLER DUP11 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH32 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000 DUP6 DUP12 KECCAK256 SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP5 AND SWAP10 DUP11 DUP14 MSTORE PUSH1 0x20 MSTORE DUP4 DUP8 DUP14 KECCAK256 SWAP12 AND SWAP11 DUP12 DUP14 MSTORE PUSH1 0x20 MSTORE DUP7 DUP13 KECCAK256 SWAP5 DUP7 ISZERO PUSH1 0x0 EQ PUSH2 0x6CA JUMPI POP TIMESTAMP AND SWAP3 JUMPDEST DUP5 SLOAD SWAP3 AND SWAP8 DUP9 SWAP4 PUSH1 0xA0 SHL AND SWAP2 AND OR OR SWAP1 SSTORE DUP2 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG4 DUP1 RETURN JUMPDEST SWAP1 POP SWAP3 PUSH2 0x6A9 JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x54C JUMPI PUSH2 0x6ED PUSH2 0x1135 JUMP JUMPDEST SWAP1 PUSH2 0x6F6 PUSH2 0x114B JUMP JUMPDEST SWAP3 PUSH6 0xFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP4 SWAP1 DUP5 DUP2 SUB PUSH2 0x32F JUMPI CALLER DUP9 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP5 DUP10 KECCAK256 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP8 DUP9 DUP12 MSTORE DUP5 MSTORE DUP6 DUP11 KECCAK256 SWAP9 AND SWAP8 DUP9 DUP11 MSTORE DUP4 MSTORE DUP5 DUP10 KECCAK256 SLOAD PUSH1 0xD0 SHR SWAP4 DUP5 DUP8 GT ISZERO PUSH2 0x812 JUMPI PUSH2 0xFFFF SWAP1 DUP6 DUP5 SUB AND GT PUSH2 0x7EB JUMPI POP SWAP1 PUSH32 0x55EB90D810E1700B35A8E7E25395FF7F2B2259ABD7415CA2284DFB1C246418F3 SWAP4 SWAP3 SWAP2 CALLER DUP10 MSTORE PUSH1 0x1 DUP3 MSTORE DUP4 DUP10 KECCAK256 DUP8 DUP11 MSTORE DUP3 MSTORE DUP4 DUP10 KECCAK256 DUP9 DUP11 MSTORE DUP3 MSTORE DUP4 DUP10 KECCAK256 SWAP1 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000 DUP4 SLOAD SWAP3 PUSH1 0xD0 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP3 MLOAD SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG4 DUP1 RETURN JUMPDEST DUP5 MLOAD PUSH32 0x24D35A2600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP5 MLOAD PUSH4 0x3AB3447F PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x33B JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x846 PUSH2 0x1135 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x54C JUMPI PUSH32 0x3704902F963766A4E561BBAAB6E6CDC1B1DD12F6E9E99648DA8843B3F46B918D SWAP1 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD CALLER DUP6 MSTORE DUP5 PUSH1 0x20 MSTORE DUP2 DUP6 KECCAK256 DUP5 DUP7 MSTORE PUSH1 0x20 MSTORE DUP2 DUP6 KECCAK256 DUP2 DUP2 SLOAD OR SWAP1 SSTORE DUP2 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x908 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x908 JUMPI PUSH2 0x8DB PUSH2 0x1135 JUMP JUMPDEST PUSH2 0x8E3 PUSH2 0x114B JUMP JUMPDEST PUSH2 0x8EB PUSH2 0x1161 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP4 SUB PUSH2 0x333 JUMPI PUSH2 0x2D8 SWAP4 PUSH2 0x13A5 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x33B JUMPI PUSH1 0x20 SWAP1 PUSH2 0x927 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x54C JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x54C JUMPI PUSH2 0x94C CALLDATASIZE PUSH2 0x118B JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x83 NOT CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI PUSH2 0x960 PUSH2 0x111A JUMP JUMPDEST SWAP2 PUSH1 0xE4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EE JUMPI PUSH2 0x2D8 SWAP5 PUSH2 0x983 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x990 DUP4 MLOAD PUSH2 0x19F7 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD DUP3 DUP6 ADD MLOAD SWAP1 DUP4 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP5 PUSH32 0x939C21A48A8DBE3A9A2404A1D46691E4D39F6583D6EC6B35714604C986D80106 DUP7 MSTORE DUP5 ADD MSTORE CALLER PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0x9E5 DUP2 PUSH2 0x10DC JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP2 PUSH2 0x16F8 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x33B JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0xA0E PUSH2 0x1135 JUMP JUMPDEST CALLDATASIZE PUSH1 0x23 NOT ADD PUSH1 0xC0 DUP2 SLT PUSH2 0x337 JUMPI PUSH1 0x80 DUP6 MLOAD SWAP2 PUSH2 0xA29 DUP4 PUSH2 0x10A4 JUMP JUMPDEST SLT PUSH2 0x337 JUMPI DUP5 MLOAD SWAP1 PUSH2 0xA3A DUP3 PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI DUP2 MSTORE PUSH1 0x44 CALLDATALOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI PUSH1 0x20 DUP3 ADD MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x32F JUMPI DUP9 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0xA4 CALLDATALOAD SWAP4 DUP3 DUP6 AND DUP6 SUB PUSH2 0x9EE JUMPI PUSH1 0x20 DUP3 ADD SWAP5 DUP6 MSTORE PUSH1 0xC4 CALLDATALOAD SWAP1 DUP8 DUP4 ADD DUP3 DUP2 MSTORE PUSH1 0xE4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x32B JUMPI PUSH2 0xAC9 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 DUP1 TIMESTAMP GT PUSH2 0xB53 JUMPI POP POP SWAP2 DUP6 SWAP2 PUSH2 0xB43 PUSH2 0x2D8 SWAP10 SWAP11 PUSH2 0xB49 SWAP6 PUSH2 0xAEE DUP9 MLOAD PUSH2 0x196E JUMP JUMPDEST SWAP1 DUP10 DUP13 MLOAD AND SWAP1 MLOAD SWAP1 DUP4 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP5 PUSH32 0xF3841CD1FF0085026A6327B620B67997CE40F282C88A8E905A7A5626E310F3D0 DUP7 MSTORE DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP2 MSTORE PUSH2 0xB3B DUP2 PUSH2 0x10C0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0x16AC JUMP JUMPDEST SWAP2 PUSH2 0x1A5D JUMP JUMPDEST MLOAD SWAP3 MLOAD AND SWAP2 PUSH2 0x14C5 JUMP JUMPDEST PUSH1 0x24 SWAP3 POP DUP11 MLOAD SWAP2 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x60 PUSH1 0x3 NOT SWAP4 DUP2 DUP6 CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI PUSH2 0xB87 PUSH2 0x1135 JUMP JUMPDEST SWAP3 PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP8 DUP9 DUP6 GT PUSH2 0x32F JUMPI DUP6 SWAP1 DUP6 CALLDATASIZE SUB ADD SLT PUSH2 0x462 JUMPI DUP1 MLOAD SWAP8 DUP6 DUP10 ADD DUP10 DUP2 LT DUP3 DUP3 GT OR PUSH2 0xDC2 JUMPI DUP3 MSTORE DUP5 DUP4 ADD CALLDATALOAD DUP2 DUP2 GT PUSH2 0x32B JUMPI DUP6 ADD SWAP1 CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x32B JUMPI DUP4 DUP3 ADD CALLDATALOAD SWAP2 PUSH2 0xBE4 DUP4 PUSH2 0x1225 JUMP JUMPDEST SWAP1 PUSH2 0xBF1 DUP6 MLOAD SWAP3 DUP4 PUSH2 0x10F8 JUMP JUMPDEST DUP4 DUP3 MSTORE PUSH1 0x20 SWAP4 DUP8 DUP6 DUP5 ADD SWAP2 PUSH1 0x7 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0xDBE JUMPI DUP9 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xD61 JUMPI POP POP POP DUP11 MSTORE PUSH1 0x44 PUSH2 0xC27 DUP7 DUP9 ADD PUSH2 0x1177 JUMP JUMPDEST SWAP7 DUP4 DUP13 ADD SWAP8 DUP9 MSTORE ADD CALLDATALOAD SWAP5 DUP4 DUP12 ADD SWAP2 DUP7 DUP4 MSTORE PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xD5D JUMPI PUSH2 0xC4F SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP6 SWAP1 SWAP7 DUP1 TIMESTAMP GT PUSH2 0xD4B JUMPI POP POP POP DUP10 SWAP9 SWAP10 MLOAD MLOAD PUSH2 0xC6A DUP2 PUSH2 0x18EA JUMP JUMPDEST SWAP1 DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0xD1E JUMPI POP POP SWAP3 DUP9 SWAP5 SWAP3 PUSH2 0xB43 SWAP3 PUSH2 0xCEB SWAP8 SWAP6 DUP4 MLOAD PUSH2 0xC96 DUP2 PUSH2 0x3E0 DUP7 DUP3 ADD DUP1 SWAP6 PUSH2 0x1941 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP11 DUP12 DUP12 MLOAD AND SWAP2 MLOAD SWAP3 DUP6 MLOAD SWAP5 DUP6 ADD SWAP6 PUSH32 0xAF1B0D30D2CAB0380E68F0689007E3254993C596F2FDD0AAA7F4D04F79440863 DUP8 MSTORE DUP6 ADD MSTORE DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP2 MSTORE PUSH2 0xB3B DUP2 PUSH2 0x10C0 JUMP JUMPDEST MLOAD AND SWAP1 DUP3 MLOAD MLOAD SWAP3 DUP5 JUMPDEST DUP5 DUP2 LT PUSH2 0xCFF JUMPI DUP6 DUP1 RETURN JUMPDEST DUP1 PUSH2 0xD18 DUP6 DUP6 PUSH2 0xD12 PUSH1 0x1 SWAP6 DUP8 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD PUSH2 0x14C5 JUMP JUMPDEST ADD PUSH2 0xCF4 JUMP JUMPDEST DUP1 PUSH2 0xD39 PUSH2 0xD33 DUP15 SWAP16 SWAP15 SWAP4 PUSH2 0xD43 SWAP5 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD PUSH2 0x196E JUMP JUMPDEST PUSH2 0x2FE DUP3 DUP7 PUSH2 0x137B JUMP JUMPDEST SWAP12 SWAP11 SWAP12 PUSH2 0xC6D JUMP JUMPDEST DUP6 MLOAD SWAP2 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP11 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP3 CALLDATASIZE SUB SLT PUSH2 0xDBE JUMPI DUP6 PUSH1 0x80 SWAP2 DUP9 MLOAD PUSH2 0xD7A DUP2 PUSH2 0x1072 JUMP JUMPDEST PUSH2 0xD83 DUP6 PUSH2 0x1177 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xD90 DUP4 DUP7 ADD PUSH2 0x1177 JUMP JUMPDEST DUP4 DUP3 ADD MSTORE PUSH2 0xD9F DUP11 DUP7 ADD PUSH2 0x123D JUMP JUMPDEST DUP11 DUP3 ADD MSTORE DUP14 PUSH2 0xDAF DUP2 DUP8 ADD PUSH2 0x123D JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0xC0E JUMP JUMPDEST DUP13 DUP1 REVERT JUMPDEST DUP5 DUP10 PUSH1 0x41 DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI PUSH2 0x140 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0xDF0 CALLDATASIZE PUSH2 0x118B JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x83 NOT CALLDATASIZE ADD SLT PUSH2 0x54C JUMPI PUSH2 0xE04 PUSH2 0x111A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP1 PUSH2 0x104 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x9EE JUMPI PUSH2 0xE27 SWAP1 CALLDATASIZE SWAP1 DUP9 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP7 SWAP1 SWAP5 PUSH2 0x124 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x462 JUMPI PUSH2 0xE41 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 DUP1 MLOAD SWAP8 PUSH2 0xE50 DUP10 PUSH2 0x10C0 JUMP JUMPDEST PUSH1 0x64 SWAP1 DUP2 DUP11 MSTORE PUSH1 0x20 SWAP4 PUSH32 0x5065726D69745769746E6573735472616E7366657246726F6D28546F6B656E50 DUP6 DUP13 ADD MSTORE PUSH32 0x65726D697373696F6E73207065726D69747465642C6164647265737320737065 DUP5 DUP13 ADD MSTORE PUSH32 0x6E6465722C75696E74323536206E6F6E63652C75696E7432353620646561646C PUSH1 0x60 DUP13 ADD MSTORE PUSH32 0x696E652C00000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP13 ADD MSTORE DUP4 MLOAD SWAP11 DUP11 JUMPDEST DUP5 DUP2 LT PUSH2 0xF7C JUMPI POP POP PUSH1 0x84 PUSH2 0x9E5 SWAP4 DUP13 DUP13 DUP6 PUSH2 0x2D8 SWAP15 SWAP16 SWAP7 PUSH2 0xF2B SWAP7 DUP7 DUP6 ADD DUP5 DUP2 MSTORE CALLDATACOPY DUP3 ADD SWAP1 DUP5 DUP3 ADD MSTORE SUB SWAP1 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x10F8 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP3 PUSH2 0x3E0 PUSH2 0xF3F DUP8 MLOAD PUSH2 0x19F7 JUMP JUMPDEST DUP8 DUP4 ADD MLOAD DUP6 DUP10 ADD MLOAD SWAP6 MLOAD SWAP4 DUP5 ADD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xE4 CALLDATALOAD PUSH1 0xA0 DUP6 ADD MSTORE SWAP2 DUP3 SWAP1 PUSH1 0xC0 DUP6 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP8 ADD MLOAD DUP14 DUP3 ADD DUP9 ADD MSTORE DUP7 ADD PUSH2 0xEF4 JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x9EE JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x9EE JUMPI DUP2 ADD CALLDATALOAD SWAP3 DUP4 GT PUSH2 0x333 JUMPI PUSH1 0x24 SWAP1 PUSH1 0x7 CALLDATASIZE DUP4 DUP7 DUP4 SHL DUP5 ADD ADD GT PUSH2 0x462 JUMPI DUP7 JUMPDEST DUP6 DUP2 LT PUSH2 0xFEA JUMPI DUP8 DUP1 RETURN JUMPDEST DUP1 DUP3 SHL DUP4 ADD SWAP1 PUSH1 0x80 PUSH1 0x23 NOT DUP4 CALLDATASIZE SUB ADD SLT PUSH2 0x32B JUMPI PUSH2 0x106C DUP9 DUP8 PUSH1 0x1 SWAP5 PUSH1 0x60 DUP4 MLOAD PUSH2 0x1013 DUP2 PUSH2 0x1072 JUMP JUMPDEST PUSH2 0x104F PUSH1 0x84 PUSH2 0x1023 DUP14 DUP7 ADD PUSH2 0x1177 JUMP JUMPDEST SWAP5 DUP6 DUP5 MSTORE PUSH2 0x1033 PUSH1 0x44 DUP3 ADD PUSH2 0x1177 JUMP JUMPDEST DUP1 SWAP8 DUP6 ADD MSTORE PUSH2 0x1044 PUSH1 0x64 DUP3 ADD PUSH2 0x1177 JUMP JUMPDEST DUP1 SWAP9 DUP6 ADD MSTORE ADD PUSH2 0x1177 JUMP JUMPDEST SWAP2 DUP3 SWAP2 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP1 DUP1 SWAP4 AND SWAP6 AND SWAP4 AND SWAP2 AND PUSH2 0x13A5 JUMP JUMPDEST ADD PUSH2 0xFDF JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x3 NOT ADD SWAP1 PUSH1 0x80 DUP3 SLT PUSH2 0x1130 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP1 PUSH2 0x11A6 DUP3 PUSH2 0x10A4 JUMP JUMPDEST DUP1 DUP3 SWAP5 SLT PUSH2 0x1130 JUMPI DUP1 MLOAD DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI DUP3 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1130 JUMPI DUP2 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x64 CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1130 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1130 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x108E JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1130 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1130 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x6 SHL ADD ADD GT PUSH2 0x1130 JUMPI JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x60 DUP2 DUP5 SUB SLT PUSH2 0x1130 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH2 0x129C DUP4 PUSH2 0x10A4 JUMP JUMPDEST DUP3 SWAP5 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 GT PUSH2 0x1130 JUMPI DUP4 ADD DUP3 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x1130 JUMPI DUP1 CALLDATALOAD PUSH2 0x12C9 DUP2 PUSH2 0x1225 JUMP JUMPDEST SWAP3 PUSH2 0x12D6 DUP8 MLOAD SWAP5 DUP6 PUSH2 0x10F8 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP1 DUP7 ADD SWAP4 PUSH1 0x6 SHL DUP6 ADD ADD SWAP4 DUP2 DUP6 GT PUSH2 0x1130 JUMPI SWAP1 DUP7 DUP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 ADD SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x1319 JUMPI POP POP POP POP POP DUP6 MSTORE DUP1 DUP3 ADD CALLDATALOAD SWAP1 DUP6 ADD MSTORE ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 DUP5 DUP4 SUB SLT PUSH2 0x1130 JUMPI DUP9 MLOAD SWAP1 DUP10 DUP3 ADD SWAP1 DUP3 DUP3 LT DUP6 DUP4 GT OR PUSH2 0x1366 JUMPI DUP11 SWAP3 DUP10 SWAP3 DUP5 MSTORE PUSH2 0x134A DUP8 PUSH2 0x1177 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP8 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP2 SWAP1 DUP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0x12FC JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x138F JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 DUP3 DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP3 DUP3 DUP3 KECCAK256 SWAP7 AND SWAP6 DUP7 DUP3 MSTORE PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SWAP5 DUP6 SLOAD SWAP6 PUSH6 0xFFFFFFFFFFFF DUP8 PUSH1 0xA0 SHR AND DUP1 TIMESTAMP GT PUSH2 0x1470 JUMPI POP DUP3 DUP8 AND SWAP7 DUP4 DUP9 SUB PUSH2 0x1409 JUMPI JUMPDEST POP POP PUSH2 0x1407 SWAP6 POP AND SWAP3 PUSH2 0x1E03 JUMP JUMPDEST JUMP JUMPDEST DUP8 DUP5 DUP5 AND GT PUSH1 0x0 EQ PUSH2 0x1446 JUMPI PUSH1 0x24 DUP9 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xF96FB07100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP5 DUP5 PUSH2 0x1407 SWAP11 SUB AND SWAP2 AND OR SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xD81B2F2E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x138F JUMPI PUSH1 0x6 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1130 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP6 MLOAD AND SWAP5 DUP3 PUSH1 0x20 DUP3 ADD MLOAD AND SWAP3 DUP1 DUP7 PUSH1 0x40 DUP1 SWAP5 ADD MLOAD AND SWAP6 AND SWAP6 PUSH1 0x0 SWAP2 DUP8 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP4 DUP4 KECCAK256 DUP10 DUP5 MSTORE PUSH1 0x20 MSTORE DUP4 DUP4 KECCAK256 SWAP10 AND SWAP9 DUP10 DUP4 MSTORE PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP2 DUP5 DUP4 SLOAD PUSH1 0xD0 SHR SUB PUSH2 0x15E1 JUMPI SWAP2 DUP6 PUSH2 0x15CB SWAP5 SWAP3 PUSH32 0xC6A377BFC4EB120024A8AC08EEF205BE16B817020812C73223E81D1BDB9708EC SWAP9 SWAP8 SWAP7 SWAP5 POP DUP8 ISZERO PUSH1 0x0 EQ PUSH2 0x15D0 JUMPI PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP1 TIMESTAMP AND JUMPDEST PUSH1 0xA0 SHL AND PUSH32 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000 PUSH1 0x1 DUP7 ADD PUSH1 0xD0 SHL AND OR OR SWAP1 SSTORE MLOAD SWAP4 DUP5 SWAP4 DUP5 SWAP2 PUSH1 0x40 SWAP2 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP6 ADD SWAP7 AND DUP5 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 SWAP3 AND PUSH1 0x20 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST POP PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL DUP8 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x4 DUP5 MLOAD PUSH4 0x3AB3447F PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST CHAINID PUSH32 0x0 SUB PUSH2 0x163C JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 DUP3 MSTORE PUSH32 0x9AC997416E8FF9D2FF6BEBEB7149F65CDAE5E32E2B90440B566BB3044041D36A PUSH1 0x40 DUP3 ADD MSTORE CHAINID PUSH1 0x60 DUP3 ADD MSTORE ADDRESS PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP2 MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x10C0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x16B4 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x22 DUP4 ADD MSTORE PUSH1 0x42 DUP3 ADD MSTORE PUSH1 0x42 DUP2 MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x1072 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP4 PUSH1 0x40 DUP5 ADD MLOAD DUP1 TIMESTAMP GT PUSH2 0x1773 JUMPI POP PUSH1 0x20 DUP5 MLOAD ADD MLOAD DUP1 DUP7 GT PUSH2 0x175B JUMPI POP SWAP2 DUP6 SWAP2 PUSH2 0xB43 PUSH2 0x1738 SWAP5 PUSH2 0x1733 PUSH1 0x20 DUP9 ADD MLOAD DUP7 PUSH2 0x189C JUMP JUMPDEST PUSH2 0x16AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 MLOAD MLOAD AND SWAP3 PUSH1 0x84 CALLDATALOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI PUSH2 0x1407 SWAP4 PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x3728B83D PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP6 SWAP1 SWAP4 SWAP6 DUP1 MLOAD MLOAD SWAP6 PUSH1 0x40 SWAP3 DUP4 DUP4 ADD MLOAD DUP1 TIMESTAMP GT PUSH2 0x1885 JUMPI POP DUP5 DUP9 SUB PUSH2 0x185C JUMPI PUSH2 0x17C2 SWAP2 DUP7 SWAP2 PUSH2 0xB43 PUSH1 0x20 SWAP12 PUSH2 0x1733 DUP14 DUP9 ADD MLOAD DUP7 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT PUSH2 0x17D6 JUMPI POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x17E1 DUP2 DUP4 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD DUP9 PUSH2 0x17EE DUP4 DUP8 DUP11 PUSH2 0x14A1 JUMP JUMPDEST ADD CALLDATALOAD SWAP1 DUP10 DUP2 ADD MLOAD DUP1 DUP4 GT PUSH2 0x1845 JUMPI POP SWAP2 DUP2 DUP9 DUP9 DUP9 PUSH1 0x1 SWAP7 DUP6 SWAP7 PUSH2 0x1818 JUMPI JUMPDEST POP POP POP POP POP POP ADD PUSH2 0x17C5 JUMP JUMPDEST PUSH2 0x183A SWAP6 PUSH2 0x1834 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4BA SWAP4 MLOAD AND SWAP6 PUSH2 0x14A1 JUMP JUMPDEST SWAP2 PUSH2 0x1E03 JUMP JUMPDEST DUP1 CODESIZE DUP9 DUP9 DUP9 DUP4 PUSH2 0x180C JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP7 MLOAD SWAP1 PUSH4 0x3728B83D PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x4 DUP5 MLOAD PUSH32 0xFF633A3800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x24 SWAP1 DUP6 MLOAD SWAP1 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0xFF DUP4 AND SHL SWAP3 AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SHR PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD XOR DUP1 SWAP2 SSTORE AND ISZERO PUSH2 0x18D9 JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH4 0x3AB3447F PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST SWAP1 PUSH2 0x18F4 DUP3 PUSH2 0x1225 JUMP JUMPDEST PUSH2 0x1901 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x10F8 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x1912 PUSH1 0x1F NOT SWAP2 PUSH2 0x1225 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x192B JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 SWAP3 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x195A JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x194C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x65626CAD6CB96493BF6F5EBEA28756C966F023AB9E8A83A7101849D5573B3678 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP3 PUSH32 0x618358AC3DB8DC274F0CD8829DA7E234BD48CD73C4A740AEDE1ADEC9846D06A1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP2 MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x1072 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x1130 JUMPI PUSH1 0x20 DUP3 CALLDATALOAD SWAP3 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x0 DUP3 EXTCODESIZE PUSH2 0x1CA9 JUMPI POP PUSH1 0x41 DUP5 SUB PUSH2 0x1C21 JUMPI PUSH2 0x1A7E DUP5 DUP5 ADD DUP5 PUSH2 0x1A47 JUMP JUMPDEST SWAP2 SWAP1 SWAP5 PUSH1 0x40 LT ISZERO PUSH2 0x138F JUMPI PUSH1 0x80 PUSH1 0x0 SWAP2 PUSH1 0x40 PUSH1 0xFF SWAP7 ADD CALLDATALOAD PUSH1 0xF8 SHR SWAP4 JUMPDEST PUSH1 0x40 SWAP8 DUP9 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP8 DUP9 SWAP7 AND DUP7 DUP5 ADD MSTORE DUP9 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x1C16 JUMPI PUSH1 0x0 MLOAD DUP4 MLOAD DUP5 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI DUP6 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x7979797979797979797979797979797900000000000000000000000000000000 DUP5 DUP3 ADD MSTORE DUP5 MLOAD SWAP1 DUP5 DUP3 ADD SWAP3 PUSH31 0x7150BE00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP5 DUP6 PUSH1 0x24 DUP6 ADD MSTORE AND SWAP5 DUP6 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x64 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1C02 JUMPI POP POP POP SWAP2 DUP2 PUSH2 0x1B91 PUSH1 0xA4 DUP3 DUP7 PUSH1 0x0 DUP4 DUP2 SWAP10 DUP3 SWAP10 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB PUSH1 0x84 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 PUSH11 0x636F6E736F6C652E6C6F67 GAS STATICCALL POP DUP1 ISZERO PUSH2 0x1BD9 JUMPI SUB PUSH2 0x1BB0 JUMPI POP JUMP JUMPDEST PUSH1 0x4 SWAP1 MLOAD PUSH32 0x815E1D6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x4 DUP4 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xA4 ADD MSTORE DUP3 ADD PUSH2 0x1B5D JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x40 DUP5 SWAP3 SWAP5 EQ PUSH1 0x0 EQ PUSH2 0x1C7F JUMPI PUSH2 0x1C3B SWAP2 DUP2 ADD SWAP1 PUSH2 0x1A47 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH1 0x1B PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP2 PUSH1 0xFF SHR ADD SWAP3 PUSH1 0xFF DUP5 GT PUSH2 0x192B JUMPI PUSH1 0x80 PUSH1 0x0 SWAP2 PUSH1 0xFF SWAP6 SWAP4 PUSH2 0x1A9A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x4BE6321B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP3 SWAP4 DUP1 SWAP3 PUSH1 0x20 SWAP3 SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP8 DUP2 SWAP7 DUP3 SWAP6 PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP13 DUP14 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP6 ADD MSTORE DUP2 PUSH1 0x44 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY DUP2 DUP2 ADD DUP4 ADD DUP11 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP3 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1DF8 JUMPI DUP3 SWAP2 PUSH2 0x1D7A JUMPI JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 POP AND SUB PUSH2 0x1D50 JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xB0669CBC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x1DF0 JUMPI JUMPDEST DUP2 PUSH2 0x1D94 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x10F8 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x33B JUMPI MLOAD SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND DUP3 SUB PUSH2 0x908 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 CODESIZE PUSH2 0x1D24 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x0 DUP1 SWAP4 PUSH1 0x20 SWAP6 PUSH1 0x64 SWAP5 PUSH1 0x40 MLOAD SWAP5 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x4 DUP8 ADD MSTORE AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE GAS CALL RETURNDATASIZE ISZERO PUSH1 0x1F RETURNDATASIZE GT PUSH1 0x1 PUSH1 0x0 MLOAD EQ AND OR AND ISZERO PUSH2 0x1E68 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F46524F4D5F4641494C4544000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 CREATE BYTE 0xF7 EXTCODECOPY 0xAF PUSH19 0xEA274682F34E0E2F5CF5436B1762A3D73D908D DUP13 SELFDESTRUCT OR CHAINID SELFDESTRUCT DUP1 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
          "sourceMap": "385:152:36:-:0;;;;918:13:35;899:32;;1631:60;;;788:80;385:152:36;;716:20:35;385:152:36;;;;918:13:35;385:152:36;;;;1685:4:35;385:152:36;;;;;1631:60:35;;899:32;385:152:36;;;;;;;;;;;;;;;;;;;;1621:71:35;;385:152:36;941:74:35;385:152:36;;;;;;;;;;;;899:32:35;385:152:36;;;;;;;;;;-1:-1:-1;385:152:36;;;;;-1:-1:-1;385:152:36;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "abi_decode_address": {
              "entryPoint": 4471,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_address_13500": {
              "entryPoint": 4378,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_address_13503": {
              "entryPoint": 4405,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_address_13514": {
              "entryPoint": 4427,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_address_13527": {
              "entryPoint": 4449,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_array_struct_TokenSpenderPair_calldata_dyn_calldata": {
              "entryPoint": 4688,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_bytes32t_bytes32": {
              "entryPoint": 6727,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_string_calldata": {
              "entryPoint": 4599,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_struct_PermitBatchTransferFrom": {
              "entryPoint": 4737,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_struct_PermitTransferFrom": {
              "entryPoint": 4491,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint48": {
              "entryPoint": 4669,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_array_bytes32_dyn": {
              "entryPoint": 6465,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes32_bytes32_address_uint256_uint256_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "abi_encode_uint160_uint48_uint48": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "allocate_and_zero_memory_array_array_bytes32_dyn": {
              "entryPoint": 6378,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_array_struct_PermitDetails_dyn": {
              "entryPoint": 4645,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "calldata_array_index_access_struct_TokenSpenderPair_calldata_dyn_calldata": {
              "entryPoint": 5281,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 4344,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "finalize_allocation_13498": {
              "entryPoint": 4210,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "finalize_allocation_13506": {
              "entryPoint": 4260,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "finalize_allocation_19593": {
              "entryPoint": 4288,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "finalize_allocation_19602": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "finalize_allocation_22703": {
              "entryPoint": 4316,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "fun_DOMAIN_SEPARATOR": {
              "entryPoint": 5617,
              "id": 6382,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "fun__permitTransferFrom": {
              "entryPoint": 6027,
              "id": 6792,
              "parameterSlots": 7,
              "returnSlots": 0
            },
            "fun_hashPermitDetails": {
              "entryPoint": 6510,
              "id": 8032,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_hashTokenPermissions": {
              "entryPoint": 6647,
              "id": 8049,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_hashTypedData": {
              "entryPoint": 5804,
              "id": 6426,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_permitTransferFrom": {
              "entryPoint": 5880,
              "id": 6620,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "fun_safeTransferFrom": {
              "entryPoint": 7683,
              "id": 17618,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "fun_transfer": {
              "entryPoint": 5029,
              "id": 6125,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "fun_updateApproval": {
              "entryPoint": 5317,
              "id": 6325,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "fun_useUnorderedNonce": {
              "entryPoint": 6300,
              "id": 6886,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_verify": {
              "entryPoint": 6749,
              "id": 8258,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "increment_uint256": {
              "entryPoint": 6428,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "memory_array_index_access_struct_PermitDetails_dyn": {
              "entryPoint": 4987,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "read_from_calldatat_address": {
              "entryPoint": 5297,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            }
          },
          "generatedSources": [],
          "immutableReferences": {
            "6335": [
              {
                "length": 32,
                "start": 5658
              }
            ],
            "6337": [
              {
                "length": 32,
                "start": 5620
              }
            ]
          },
          "linkReferences": {},
          "object": "6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db14610f8f578063137c29fe14610dd45780632a2d80d114610b695780632b67b570146109f257806330f28b7a1461092e5780633644e5151461090b57806336c78516146108c15780633ff9dcb11461085f5780634fe02b441461082157806365d9723c146106d257806387517c45146105dc578063927da10514610550578063cc53287f14610466578063edd9444b1461033f5763fe8ec1a7146100c657600080fd5b3461033b5760c036600319011261033b5767ffffffffffffffff928035848111610337576100f79036908301611281565b6024358581116103335761010e9036908401611250565b610116611161565b9160843588811161032f5761012e90369087016111f7565b95909860a43590811161032b5795989561014a913691016111f7565b969095815190610159826110c0565b606b9081835260209b8c917f5065726d697442617463685769746e6573735472616e7366657246726f6d2854838601527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472868601527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608601527f3620646561646c696e652c00000000000000000000000000000000000000000060808601528c8651958694825b87811061030957505050918084926102329694608b8097019081523781018d8482015203908101845201826110f8565b89815191012090855151996102468b6118ea565b9a8a5b8181106102db5750506102d8999a6102cf916102c38451928361026f8482018093611941565b0393610283601f19958681018352826110f8565b5190208a830151868c0151965193840197885260208801919091523360408801526060870152608086019490945260643560a086015292839060c0860190565b039081018352826110f8565b5190209361178b565b80f35b808d6102fe826102f86102f2610304968f5161137b565b516119f7565b9261137b565b5261191c565b610249565b90829495965080935081819301015182828a01015201918e9187959493610202565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b50913461033b57608036600319011261033b5767ffffffffffffffff908035828111610337576103729036908301611281565b602435838111610333576103899036908401611250565b939092610394611161565b91606435908111610462576103ab913691016111f7565b949093835151976103bb896118ea565b98885b8181106104465750506102d8979881516103ee816103e0602082018095611941565b03601f1981018352826110f8565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102cf816110dc565b808b6102fe826102f86102f261045d968d5161137b565b6103be565b8680fd5b50823461054c57602090816003193601126103375780359067ffffffffffffffff82116103335761049991369101611250565b929091845b8481106104a9578580f35b806104bf6104ba60019388886114a1565b6114b1565b6104d4846104ce848a8a6114a1565b016114b1565b338952838552858920916001600160a01b0380911692838b528652868a20911690818a52855285892073ffffffffffffffffffffffffffffffffffffffff1981541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a20161049e565b8280fd5b503461033b57606036600319011261033b576105d88161056e611135565b9361057761114b565b61057f611161565b6001600160a01b03968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b503461033b57608036600319011261033b576105f6611135565b906105ff61114b565b91610608611161565b65ffffffffffff926064358481169081810361032f5765ffffffffffff60a01b947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b20986001600160a01b03809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146106ca57504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b9050926106a9565b50823461054c57606036600319011261054c576106ed611135565b906106f661114b565b9265ffffffffffff604435818116939084810361032f5733885260209160018352848920966001600160a01b0380911697888b528452858a20981697888a5283528489205460d01c93848711156108125761ffff9085840316116107eb5750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b508451633ab3447f60e11b8152fd5b503461033b578060031936011261033b57806020926001600160a01b03610846611135565b1681528084528181206024358252845220549051908152f35b50823461054c578160031936011261054c577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610908576080366003190112610908576108db611135565b6108e361114b565b6108eb611161565b606435916001600160a01b0383168303610333576102d8936113a5565b80fd5b503461033b578160031936011261033b576020906109276115f1565b9051908152f35b5082903461054c5761010036600319011261054c5761094c3661118b565b90806083193601126103375761096061111a565b9160e43567ffffffffffffffff81116109ee576102d894610983913691016111f7565b93909261099083516119f7565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a081526109e5816110dc565b519020916116f8565b8580fd5b50913461033b5761010036600319011261033b57610a0e611135565b366023190160c08112610337576080855191610a29836110a4565b1261033757845190610a3a82611072565b6001600160a01b03916024358381168103610462578152604435838116810361046257602082015265ffffffffffff606435818116810361032f57888301526084359081168103610462576060820152815260a4359382851685036109ee576020820194855260c4359087830182815260e43567ffffffffffffffff811161032b57610ac990369084016111f7565b929093804211610b53575050918591610b436102d8999a610b4995610aee885161196e565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610b3b816110c0565b5190206116ac565b91611a5d565b51925116916114c5565b602492508a519163cd21db4f60e01b8352820152fd5b50913461033b57606060031993818536011261033757610b87611135565b9260249081359267ffffffffffffffff9788851161032f57859085360301126104625780519785890189811082821117610dc25782528483013581811161032b578501903660238301121561032b578382013591610be483611225565b90610bf1855192836110f8565b838252602093878584019160071b83010191368311610dbe578801905b828210610d61575050508a526044610c27868801611177565b96838c01978852013594838b0191868352604435908111610d5d57610c4f90369087016111f7565b959096804211610d4b575050508998995151610c6a816118ea565b908b5b818110610d1e57505092889492610b4392610ceb97958351610c96816103e08682018095611941565b519020906001600160a01b039a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610b3b816110c0565b51169082515192845b848110610cff578580f35b80610d188585610d12600195875161137b565b516114c5565b01610cf4565b80610d39610d338e9f9e93610d43945161137b565b5161196e565b6102fe828661137b565b9b9a9b610c6d565b85519163cd21db4f60e01b8352820152fd5b8a80fd5b608082360312610dbe57856080918851610d7a81611072565b610d8385611177565b8152610d90838601611177565b83820152610d9f8a860161123d565b8a8201528d610daf81870161123d565b90820152815201910190610c0e565b8c80fd5b8489604186634e487b7160e01b835252fd5b503461033b5761014036600319011261033b57610df03661118b565b908060831936011261054c57610e0461111a565b67ffffffffffffffff9290610104358481116109ee57610e2790369088016111f7565b9690946101243590811161046257610e41913691016111f7565b949093805197610e50896110c0565b606490818a526020937f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e50858c01527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848c01527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608c01527f696e652c0000000000000000000000000000000000000000000000000000000060808c015283519a8a5b848110610f7c57505060846109e5938c8c856102d89e9f96610f2b96868501848152378201908482015203908101845201826110f8565b838151910120926103e0610f3f87516119f7565b8783015185890151955193840196875260208701919091523360408701526060860152608085019390935260e43560a085015291829060c0850190565b8181018701518d82018801528601610ef4565b50823461054c5760208060031936011261033757813567ffffffffffffffff928382116109ee57366023830112156109ee57810135928311610333576024906007368386831b8401011161046257865b858110610fea578780f35b80821b8301906080602319833603011261032b5761106c88876001946060835161101381611072565b61104f60846110238d8601611177565b9485845261103360448201611177565b809785015261104460648201611177565b809885015201611177565b91829101526001600160a01b0380808093169516931691166113a5565b01610fdf565b6080810190811067ffffffffffffffff82111761108e57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761108e57604052565b60a0810190811067ffffffffffffffff82111761108e57604052565b60c0810190811067ffffffffffffffff82111761108e57604052565b90601f8019910116810190811067ffffffffffffffff82111761108e57604052565b60c435906001600160a01b038216820361113057565b600080fd5b600435906001600160a01b038216820361113057565b602435906001600160a01b038216820361113057565b604435906001600160a01b038216820361113057565b35906001600160a01b038216820361113057565b6003190190608082126111305760408051906111a6826110a4565b8082941261113057805181810181811067ffffffffffffffff82111761108e5782526004356001600160a01b0381168103611130578152602435602082015282526044356020830152606435910152565b9181601f840112156111305782359167ffffffffffffffff8311611130576020838186019501011161113057565b67ffffffffffffffff811161108e5760051b60200190565b359065ffffffffffff8216820361113057565b9181601f840112156111305782359167ffffffffffffffff8311611130576020808501948460061b01011161113057565b91909160608184031261113057604080519161129c836110a4565b8294813567ffffffffffffffff9081811161113057830182601f820112156111305780356112c981611225565b926112d6875194856110f8565b818452602094858086019360061b85010193818511611130579086899897969594939201925b848410611319575050505050855280820135908501520135910152565b909192939495969784830312611130578851908982019082821085831117611366578a928992845261134a87611177565b81528287013583820152815201930191908897969594936112fc565b60246000634e487b7160e01b81526041600452fd5b805182101561138f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9291926001600160a01b03604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611470575082871696838803611409575b505061140795501692611e03565b565b878484161160001461144657602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b73ffffffffffffffffffffffffffffffffffffffff1984846114079a0316911617905538806113f9565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b919081101561138f5760061b0190565b356001600160a01b03811681036111305790565b9065ffffffffffff90816060840151166001600160a01b03908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c036115e15791856115cb94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec989796945087156000146115d05765ffffffffffff60a01b9042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b161717905551938493849160409194936001600160a01b03606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5065ffffffffffff60a01b8761156a565b60048451633ab3447f60e11b8152fd5b467f00000000000000000000000000000000000000000000000000000000000000000361163c577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a6040820152466060820152306080820152608081526116a6816110c0565b51902090565b6116b46115f1565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526116a681611072565b9192909360a435936040840151804211611773575060208451015180861161175b5750918591610b436117389461173360208801518661189c565b6116ac565b6001600160a01b0380915151169260843591821682036111305761140793611e03565b60249060405190633728b83d60e01b82526004820152fd5b6024906040519063cd21db4f60e01b82526004820152fd5b959093958051519560409283830151804211611885575084880361185c576117c2918691610b4360209b6117338d8801518661189c565b60005b8681106117d6575050505050505050565b6117e181835161137b565b51886117ee83878a6114a1565b01359089810151808311611845575091818888886001968596611818575b505050505050016117c5565b61183a95611834926001600160a01b036104ba935116956114a1565b91611e03565b80388888888361180c565b602490865190633728b83d60e01b82526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b60249085519063cd21db4f60e01b82526004820152fd5b906001600160a01b03600160ff83161b9216600052600060205260406000209060081c60005260205260406000208181541880915516156118d957565b6004604051633ab3447f60e11b8152fd5b906118f482611225565b61190160405191826110f8565b8281528092611912601f1991611225565b0190602036910137565b600019811461192b5760010190565b634e487b7160e01b600052601160045260246000fd5b805160208092019160005b82811061195a575050505090565b83518552938101939281019260010161194c565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b367883526001600160a01b038082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff82111761108e5760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a184526001600160a01b03815116604084015201516060820152606081526116a681611072565b9190826040910312611130576020823592013590565b909290916000823b611ca9575060418403611c2157611a7e84840184611a47565b9190946040101561138f576080600091604060ff96013560f81c935b60409788519283526020978896168684015288830152606082015282805260015afa15611c1657600051835184810181811067ffffffffffffffff82111761108e578552601081527f797979797979797979797979797979790000000000000000000000000000000084820152845190848201927e7150be0000000000000000000000000000000000000000000000000000000084526001600160a01b038091169485602485015216948560448401526060606484015281519182608485015260005b838110611c02575050509181611b9160a4828660008381998299010152601f801991011681010360848101845201826110f8565b51906a636f6e736f6c652e6c6f675afa508015611bd95703611bb05750565b600490517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b600483517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b81810183015185820160a401528201611b5d565b82513d6000823e3d90fd5b91604084929414600014611c7f57611c3b91810190611a47565b929092601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169160ff1c019260ff841161192b57608060009160ff9593611a9a565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b92938092602092956001600160a01b0360646040518097819682957f1626ba7e000000000000000000000000000000000000000000000000000000009c8d85526004850152604060248501528160448501528484013781810183018a9052601f01601f19168101030192165afa908115611df8578291611d7a575b507fffffffff0000000000000000000000000000000000000000000000000000000091501603611d5057565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d8211611df0575b81611d94602093836110f8565b8101031261033b5751907fffffffff000000000000000000000000000000000000000000000000000000008216820361090857507fffffffff000000000000000000000000000000000000000000000000000000009038611d24565b3d9150611d87565b6040513d84823e3d90fd5b9160008093602095606494604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b03809216600487015216602485015260448401525af13d15601f3d1160016000511416171615611e6857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfea2646970667358221220d1f01af73caf72ea274682f34e0e2f5cf5436b1762a3d73d908d8cff1746ff8064736f6c63430008110033",
          "opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD58B1DB EQ PUSH2 0xF8F JUMPI DUP1 PUSH4 0x137C29FE EQ PUSH2 0xDD4 JUMPI DUP1 PUSH4 0x2A2D80D1 EQ PUSH2 0xB69 JUMPI DUP1 PUSH4 0x2B67B570 EQ PUSH2 0x9F2 JUMPI DUP1 PUSH4 0x30F28B7A EQ PUSH2 0x92E JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x90B JUMPI DUP1 PUSH4 0x36C78516 EQ PUSH2 0x8C1 JUMPI DUP1 PUSH4 0x3FF9DCB1 EQ PUSH2 0x85F JUMPI DUP1 PUSH4 0x4FE02B44 EQ PUSH2 0x821 JUMPI DUP1 PUSH4 0x65D9723C EQ PUSH2 0x6D2 JUMPI DUP1 PUSH4 0x87517C45 EQ PUSH2 0x5DC JUMPI DUP1 PUSH4 0x927DA105 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0xCC53287F EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0xEDD9444B EQ PUSH2 0x33F JUMPI PUSH4 0xFE8EC1A7 EQ PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x33B JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP1 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x337 JUMPI PUSH2 0xF7 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP6 DUP2 GT PUSH2 0x333 JUMPI PUSH2 0x10E SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x1250 JUMP JUMPDEST PUSH2 0x116 PUSH2 0x1161 JUMP JUMPDEST SWAP2 PUSH1 0x84 CALLDATALOAD DUP9 DUP2 GT PUSH2 0x32F JUMPI PUSH2 0x12E SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP6 SWAP1 SWAP9 PUSH1 0xA4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x32B JUMPI SWAP6 SWAP9 SWAP6 PUSH2 0x14A SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP7 SWAP1 SWAP6 DUP2 MLOAD SWAP1 PUSH2 0x159 DUP3 PUSH2 0x10C0 JUMP JUMPDEST PUSH1 0x6B SWAP1 DUP2 DUP4 MSTORE PUSH1 0x20 SWAP12 DUP13 SWAP2 PUSH32 0x5065726D697442617463685769746E6573735472616E7366657246726F6D2854 DUP4 DUP7 ADD MSTORE PUSH32 0x6F6B656E5065726D697373696F6E735B5D207065726D69747465642C61646472 DUP7 DUP7 ADD MSTORE PUSH32 0x657373207370656E6465722C75696E74323536206E6F6E63652C75696E743235 PUSH1 0x60 DUP7 ADD MSTORE PUSH32 0x3620646561646C696E652C000000000000000000000000000000000000000000 PUSH1 0x80 DUP7 ADD MSTORE DUP13 DUP7 MLOAD SWAP6 DUP7 SWAP5 DUP3 JUMPDEST DUP8 DUP2 LT PUSH2 0x309 JUMPI POP POP POP SWAP2 DUP1 DUP5 SWAP3 PUSH2 0x232 SWAP7 SWAP5 PUSH1 0x8B DUP1 SWAP8 ADD SWAP1 DUP2 MSTORE CALLDATACOPY DUP2 ADD DUP14 DUP5 DUP3 ADD MSTORE SUB SWAP1 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x10F8 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 DUP6 MLOAD MLOAD SWAP10 PUSH2 0x246 DUP12 PUSH2 0x18EA JUMP JUMPDEST SWAP11 DUP11 JUMPDEST DUP2 DUP2 LT PUSH2 0x2DB JUMPI POP POP PUSH2 0x2D8 SWAP10 SWAP11 PUSH2 0x2CF SWAP2 PUSH2 0x2C3 DUP5 MLOAD SWAP3 DUP4 PUSH2 0x26F DUP5 DUP3 ADD DUP1 SWAP4 PUSH2 0x1941 JUMP JUMPDEST SUB SWAP4 PUSH2 0x283 PUSH1 0x1F NOT SWAP6 DUP7 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP11 DUP4 ADD MLOAD DUP7 DUP13 ADD MLOAD SWAP7 MLOAD SWAP4 DUP5 ADD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0xA0 DUP7 ADD MSTORE SWAP3 DUP4 SWAP1 PUSH1 0xC0 DUP7 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP4 PUSH2 0x178B JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP1 DUP14 PUSH2 0x2FE DUP3 PUSH2 0x2F8 PUSH2 0x2F2 PUSH2 0x304 SWAP7 DUP16 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD PUSH2 0x19F7 JUMP JUMPDEST SWAP3 PUSH2 0x137B JUMP JUMPDEST MSTORE PUSH2 0x191C JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST SWAP1 DUP3 SWAP5 SWAP6 SWAP7 POP DUP1 SWAP4 POP DUP2 DUP2 SWAP4 ADD ADD MLOAD DUP3 DUP3 DUP11 ADD ADD MSTORE ADD SWAP2 DUP15 SWAP2 DUP8 SWAP6 SWAP5 SWAP4 PUSH2 0x202 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP1 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x337 JUMPI PUSH2 0x372 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x333 JUMPI PUSH2 0x389 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x1250 JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x394 PUSH2 0x1161 JUMP JUMPDEST SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x462 JUMPI PUSH2 0x3AB SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 DUP4 MLOAD MLOAD SWAP8 PUSH2 0x3BB DUP10 PUSH2 0x18EA JUMP JUMPDEST SWAP9 DUP9 JUMPDEST DUP2 DUP2 LT PUSH2 0x446 JUMPI POP POP PUSH2 0x2D8 SWAP8 SWAP9 DUP2 MLOAD PUSH2 0x3EE DUP2 PUSH2 0x3E0 PUSH1 0x20 DUP3 ADD DUP1 SWAP6 PUSH2 0x1941 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x20 DUP7 ADD MLOAD DUP3 DUP8 ADD MLOAD SWAP1 DUP4 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP5 PUSH32 0xFCF35F5AC6A2C28868DC44C302166470266239195F02B0EE408334829333B766 DUP7 MSTORE DUP5 ADD MSTORE CALLER PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0x2CF DUP2 PUSH2 0x10DC JUMP JUMPDEST DUP1 DUP12 PUSH2 0x2FE DUP3 PUSH2 0x2F8 PUSH2 0x2F2 PUSH2 0x45D SWAP7 DUP14 MLOAD PUSH2 0x137B JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x333 JUMPI PUSH2 0x499 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x1250 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 DUP5 JUMPDEST DUP5 DUP2 LT PUSH2 0x4A9 JUMPI DUP6 DUP1 RETURN JUMPDEST DUP1 PUSH2 0x4BF PUSH2 0x4BA PUSH1 0x1 SWAP4 DUP9 DUP9 PUSH2 0x14A1 JUMP JUMPDEST PUSH2 0x14B1 JUMP JUMPDEST PUSH2 0x4D4 DUP5 PUSH2 0x4CE DUP5 DUP11 DUP11 PUSH2 0x14A1 JUMP JUMPDEST ADD PUSH2 0x14B1 JUMP JUMPDEST CALLER DUP10 MSTORE DUP4 DUP6 MSTORE DUP6 DUP10 KECCAK256 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP3 DUP4 DUP12 MSTORE DUP7 MSTORE DUP7 DUP11 KECCAK256 SWAP2 AND SWAP1 DUP2 DUP11 MSTORE DUP6 MSTORE DUP6 DUP10 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 SLOAD AND SWAP1 SSTORE DUP6 MLOAD SWAP2 DUP3 MSTORE DUP5 DUP3 ADD MSTORE PUSH32 0x89B1ADD15EFF56B3DFE299AD94E01F2B52FBCB80AE1A3BAEA6AE8C04CB2B98A4 DUP6 CALLER SWAP3 LOG2 ADD PUSH2 0x49E JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0x5D8 DUP2 PUSH2 0x56E PUSH2 0x1135 JUMP JUMPDEST SWAP4 PUSH2 0x577 PUSH2 0x114B JUMP JUMPDEST PUSH2 0x57F PUSH2 0x1161 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP5 DUP5 KECCAK256 SWAP3 DUP9 AND DUP5 MSTORE SWAP2 DUP3 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP8 AND DUP4 MSTORE DUP2 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD SWAP3 MLOAD SWAP4 DUP4 AND DUP5 MSTORE PUSH1 0xA0 DUP4 SWAP1 SHR PUSH6 0xFFFFFFFFFFFF AND SWAP1 DUP5 ADD MSTORE PUSH1 0xD0 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x40 DUP4 ADD MSTORE DUP2 SWAP1 PUSH1 0x60 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0x5F6 PUSH2 0x1135 JUMP JUMPDEST SWAP1 PUSH2 0x5FF PUSH2 0x114B JUMP JUMPDEST SWAP2 PUSH2 0x608 PUSH2 0x1161 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP3 PUSH1 0x64 CALLDATALOAD DUP5 DUP2 AND SWAP1 DUP2 DUP2 SUB PUSH2 0x32F JUMPI PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP5 PUSH32 0xDA9FA7C1B00402C17D0161B249B1AB8BBEC047C5A52207B9C112DEFFD817036B SWAP5 CALLER DUP11 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH32 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000 DUP6 DUP12 KECCAK256 SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP5 AND SWAP10 DUP11 DUP14 MSTORE PUSH1 0x20 MSTORE DUP4 DUP8 DUP14 KECCAK256 SWAP12 AND SWAP11 DUP12 DUP14 MSTORE PUSH1 0x20 MSTORE DUP7 DUP13 KECCAK256 SWAP5 DUP7 ISZERO PUSH1 0x0 EQ PUSH2 0x6CA JUMPI POP TIMESTAMP AND SWAP3 JUMPDEST DUP5 SLOAD SWAP3 AND SWAP8 DUP9 SWAP4 PUSH1 0xA0 SHL AND SWAP2 AND OR OR SWAP1 SSTORE DUP2 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG4 DUP1 RETURN JUMPDEST SWAP1 POP SWAP3 PUSH2 0x6A9 JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x54C JUMPI PUSH2 0x6ED PUSH2 0x1135 JUMP JUMPDEST SWAP1 PUSH2 0x6F6 PUSH2 0x114B JUMP JUMPDEST SWAP3 PUSH6 0xFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP4 SWAP1 DUP5 DUP2 SUB PUSH2 0x32F JUMPI CALLER DUP9 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP5 DUP10 KECCAK256 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP8 DUP9 DUP12 MSTORE DUP5 MSTORE DUP6 DUP11 KECCAK256 SWAP9 AND SWAP8 DUP9 DUP11 MSTORE DUP4 MSTORE DUP5 DUP10 KECCAK256 SLOAD PUSH1 0xD0 SHR SWAP4 DUP5 DUP8 GT ISZERO PUSH2 0x812 JUMPI PUSH2 0xFFFF SWAP1 DUP6 DUP5 SUB AND GT PUSH2 0x7EB JUMPI POP SWAP1 PUSH32 0x55EB90D810E1700B35A8E7E25395FF7F2B2259ABD7415CA2284DFB1C246418F3 SWAP4 SWAP3 SWAP2 CALLER DUP10 MSTORE PUSH1 0x1 DUP3 MSTORE DUP4 DUP10 KECCAK256 DUP8 DUP11 MSTORE DUP3 MSTORE DUP4 DUP10 KECCAK256 DUP9 DUP11 MSTORE DUP3 MSTORE DUP4 DUP10 KECCAK256 SWAP1 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000 DUP4 SLOAD SWAP3 PUSH1 0xD0 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP3 MLOAD SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG4 DUP1 RETURN JUMPDEST DUP5 MLOAD PUSH32 0x24D35A2600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP5 MLOAD PUSH4 0x3AB3447F PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x33B JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x846 PUSH2 0x1135 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x54C JUMPI PUSH32 0x3704902F963766A4E561BBAAB6E6CDC1B1DD12F6E9E99648DA8843B3F46B918D SWAP1 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD CALLER DUP6 MSTORE DUP5 PUSH1 0x20 MSTORE DUP2 DUP6 KECCAK256 DUP5 DUP7 MSTORE PUSH1 0x20 MSTORE DUP2 DUP6 KECCAK256 DUP2 DUP2 SLOAD OR SWAP1 SSTORE DUP2 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x908 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x908 JUMPI PUSH2 0x8DB PUSH2 0x1135 JUMP JUMPDEST PUSH2 0x8E3 PUSH2 0x114B JUMP JUMPDEST PUSH2 0x8EB PUSH2 0x1161 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP4 SUB PUSH2 0x333 JUMPI PUSH2 0x2D8 SWAP4 PUSH2 0x13A5 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x33B JUMPI PUSH1 0x20 SWAP1 PUSH2 0x927 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x54C JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x54C JUMPI PUSH2 0x94C CALLDATASIZE PUSH2 0x118B JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x83 NOT CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI PUSH2 0x960 PUSH2 0x111A JUMP JUMPDEST SWAP2 PUSH1 0xE4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EE JUMPI PUSH2 0x2D8 SWAP5 PUSH2 0x983 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x990 DUP4 MLOAD PUSH2 0x19F7 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD DUP3 DUP6 ADD MLOAD SWAP1 DUP4 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP5 PUSH32 0x939C21A48A8DBE3A9A2404A1D46691E4D39F6583D6EC6B35714604C986D80106 DUP7 MSTORE DUP5 ADD MSTORE CALLER PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0x9E5 DUP2 PUSH2 0x10DC JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP2 PUSH2 0x16F8 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x33B JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0xA0E PUSH2 0x1135 JUMP JUMPDEST CALLDATASIZE PUSH1 0x23 NOT ADD PUSH1 0xC0 DUP2 SLT PUSH2 0x337 JUMPI PUSH1 0x80 DUP6 MLOAD SWAP2 PUSH2 0xA29 DUP4 PUSH2 0x10A4 JUMP JUMPDEST SLT PUSH2 0x337 JUMPI DUP5 MLOAD SWAP1 PUSH2 0xA3A DUP3 PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI DUP2 MSTORE PUSH1 0x44 CALLDATALOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI PUSH1 0x20 DUP3 ADD MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x32F JUMPI DUP9 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0xA4 CALLDATALOAD SWAP4 DUP3 DUP6 AND DUP6 SUB PUSH2 0x9EE JUMPI PUSH1 0x20 DUP3 ADD SWAP5 DUP6 MSTORE PUSH1 0xC4 CALLDATALOAD SWAP1 DUP8 DUP4 ADD DUP3 DUP2 MSTORE PUSH1 0xE4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x32B JUMPI PUSH2 0xAC9 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 DUP1 TIMESTAMP GT PUSH2 0xB53 JUMPI POP POP SWAP2 DUP6 SWAP2 PUSH2 0xB43 PUSH2 0x2D8 SWAP10 SWAP11 PUSH2 0xB49 SWAP6 PUSH2 0xAEE DUP9 MLOAD PUSH2 0x196E JUMP JUMPDEST SWAP1 DUP10 DUP13 MLOAD AND SWAP1 MLOAD SWAP1 DUP4 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP5 PUSH32 0xF3841CD1FF0085026A6327B620B67997CE40F282C88A8E905A7A5626E310F3D0 DUP7 MSTORE DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP2 MSTORE PUSH2 0xB3B DUP2 PUSH2 0x10C0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0x16AC JUMP JUMPDEST SWAP2 PUSH2 0x1A5D JUMP JUMPDEST MLOAD SWAP3 MLOAD AND SWAP2 PUSH2 0x14C5 JUMP JUMPDEST PUSH1 0x24 SWAP3 POP DUP11 MLOAD SWAP2 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x33B JUMPI PUSH1 0x60 PUSH1 0x3 NOT SWAP4 DUP2 DUP6 CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI PUSH2 0xB87 PUSH2 0x1135 JUMP JUMPDEST SWAP3 PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP8 DUP9 DUP6 GT PUSH2 0x32F JUMPI DUP6 SWAP1 DUP6 CALLDATASIZE SUB ADD SLT PUSH2 0x462 JUMPI DUP1 MLOAD SWAP8 DUP6 DUP10 ADD DUP10 DUP2 LT DUP3 DUP3 GT OR PUSH2 0xDC2 JUMPI DUP3 MSTORE DUP5 DUP4 ADD CALLDATALOAD DUP2 DUP2 GT PUSH2 0x32B JUMPI DUP6 ADD SWAP1 CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x32B JUMPI DUP4 DUP3 ADD CALLDATALOAD SWAP2 PUSH2 0xBE4 DUP4 PUSH2 0x1225 JUMP JUMPDEST SWAP1 PUSH2 0xBF1 DUP6 MLOAD SWAP3 DUP4 PUSH2 0x10F8 JUMP JUMPDEST DUP4 DUP3 MSTORE PUSH1 0x20 SWAP4 DUP8 DUP6 DUP5 ADD SWAP2 PUSH1 0x7 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0xDBE JUMPI DUP9 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xD61 JUMPI POP POP POP DUP11 MSTORE PUSH1 0x44 PUSH2 0xC27 DUP7 DUP9 ADD PUSH2 0x1177 JUMP JUMPDEST SWAP7 DUP4 DUP13 ADD SWAP8 DUP9 MSTORE ADD CALLDATALOAD SWAP5 DUP4 DUP12 ADD SWAP2 DUP7 DUP4 MSTORE PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xD5D JUMPI PUSH2 0xC4F SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP6 SWAP1 SWAP7 DUP1 TIMESTAMP GT PUSH2 0xD4B JUMPI POP POP POP DUP10 SWAP9 SWAP10 MLOAD MLOAD PUSH2 0xC6A DUP2 PUSH2 0x18EA JUMP JUMPDEST SWAP1 DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0xD1E JUMPI POP POP SWAP3 DUP9 SWAP5 SWAP3 PUSH2 0xB43 SWAP3 PUSH2 0xCEB SWAP8 SWAP6 DUP4 MLOAD PUSH2 0xC96 DUP2 PUSH2 0x3E0 DUP7 DUP3 ADD DUP1 SWAP6 PUSH2 0x1941 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP11 DUP12 DUP12 MLOAD AND SWAP2 MLOAD SWAP3 DUP6 MLOAD SWAP5 DUP6 ADD SWAP6 PUSH32 0xAF1B0D30D2CAB0380E68F0689007E3254993C596F2FDD0AAA7F4D04F79440863 DUP8 MSTORE DUP6 ADD MSTORE DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP2 MSTORE PUSH2 0xB3B DUP2 PUSH2 0x10C0 JUMP JUMPDEST MLOAD AND SWAP1 DUP3 MLOAD MLOAD SWAP3 DUP5 JUMPDEST DUP5 DUP2 LT PUSH2 0xCFF JUMPI DUP6 DUP1 RETURN JUMPDEST DUP1 PUSH2 0xD18 DUP6 DUP6 PUSH2 0xD12 PUSH1 0x1 SWAP6 DUP8 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD PUSH2 0x14C5 JUMP JUMPDEST ADD PUSH2 0xCF4 JUMP JUMPDEST DUP1 PUSH2 0xD39 PUSH2 0xD33 DUP15 SWAP16 SWAP15 SWAP4 PUSH2 0xD43 SWAP5 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD PUSH2 0x196E JUMP JUMPDEST PUSH2 0x2FE DUP3 DUP7 PUSH2 0x137B JUMP JUMPDEST SWAP12 SWAP11 SWAP12 PUSH2 0xC6D JUMP JUMPDEST DUP6 MLOAD SWAP2 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST DUP11 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP3 CALLDATASIZE SUB SLT PUSH2 0xDBE JUMPI DUP6 PUSH1 0x80 SWAP2 DUP9 MLOAD PUSH2 0xD7A DUP2 PUSH2 0x1072 JUMP JUMPDEST PUSH2 0xD83 DUP6 PUSH2 0x1177 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xD90 DUP4 DUP7 ADD PUSH2 0x1177 JUMP JUMPDEST DUP4 DUP3 ADD MSTORE PUSH2 0xD9F DUP11 DUP7 ADD PUSH2 0x123D JUMP JUMPDEST DUP11 DUP3 ADD MSTORE DUP14 PUSH2 0xDAF DUP2 DUP8 ADD PUSH2 0x123D JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0xC0E JUMP JUMPDEST DUP13 DUP1 REVERT JUMPDEST DUP5 DUP10 PUSH1 0x41 DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x33B JUMPI PUSH2 0x140 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x33B JUMPI PUSH2 0xDF0 CALLDATASIZE PUSH2 0x118B JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x83 NOT CALLDATASIZE ADD SLT PUSH2 0x54C JUMPI PUSH2 0xE04 PUSH2 0x111A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP1 PUSH2 0x104 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x9EE JUMPI PUSH2 0xE27 SWAP1 CALLDATASIZE SWAP1 DUP9 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP7 SWAP1 SWAP5 PUSH2 0x124 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x462 JUMPI PUSH2 0xE41 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11F7 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 DUP1 MLOAD SWAP8 PUSH2 0xE50 DUP10 PUSH2 0x10C0 JUMP JUMPDEST PUSH1 0x64 SWAP1 DUP2 DUP11 MSTORE PUSH1 0x20 SWAP4 PUSH32 0x5065726D69745769746E6573735472616E7366657246726F6D28546F6B656E50 DUP6 DUP13 ADD MSTORE PUSH32 0x65726D697373696F6E73207065726D69747465642C6164647265737320737065 DUP5 DUP13 ADD MSTORE PUSH32 0x6E6465722C75696E74323536206E6F6E63652C75696E7432353620646561646C PUSH1 0x60 DUP13 ADD MSTORE PUSH32 0x696E652C00000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP13 ADD MSTORE DUP4 MLOAD SWAP11 DUP11 JUMPDEST DUP5 DUP2 LT PUSH2 0xF7C JUMPI POP POP PUSH1 0x84 PUSH2 0x9E5 SWAP4 DUP13 DUP13 DUP6 PUSH2 0x2D8 SWAP15 SWAP16 SWAP7 PUSH2 0xF2B SWAP7 DUP7 DUP6 ADD DUP5 DUP2 MSTORE CALLDATACOPY DUP3 ADD SWAP1 DUP5 DUP3 ADD MSTORE SUB SWAP1 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x10F8 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP3 PUSH2 0x3E0 PUSH2 0xF3F DUP8 MLOAD PUSH2 0x19F7 JUMP JUMPDEST DUP8 DUP4 ADD MLOAD DUP6 DUP10 ADD MLOAD SWAP6 MLOAD SWAP4 DUP5 ADD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xE4 CALLDATALOAD PUSH1 0xA0 DUP6 ADD MSTORE SWAP2 DUP3 SWAP1 PUSH1 0xC0 DUP6 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP8 ADD MLOAD DUP14 DUP3 ADD DUP9 ADD MSTORE DUP7 ADD PUSH2 0xEF4 JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x54C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x337 JUMPI DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x9EE JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x9EE JUMPI DUP2 ADD CALLDATALOAD SWAP3 DUP4 GT PUSH2 0x333 JUMPI PUSH1 0x24 SWAP1 PUSH1 0x7 CALLDATASIZE DUP4 DUP7 DUP4 SHL DUP5 ADD ADD GT PUSH2 0x462 JUMPI DUP7 JUMPDEST DUP6 DUP2 LT PUSH2 0xFEA JUMPI DUP8 DUP1 RETURN JUMPDEST DUP1 DUP3 SHL DUP4 ADD SWAP1 PUSH1 0x80 PUSH1 0x23 NOT DUP4 CALLDATASIZE SUB ADD SLT PUSH2 0x32B JUMPI PUSH2 0x106C DUP9 DUP8 PUSH1 0x1 SWAP5 PUSH1 0x60 DUP4 MLOAD PUSH2 0x1013 DUP2 PUSH2 0x1072 JUMP JUMPDEST PUSH2 0x104F PUSH1 0x84 PUSH2 0x1023 DUP14 DUP7 ADD PUSH2 0x1177 JUMP JUMPDEST SWAP5 DUP6 DUP5 MSTORE PUSH2 0x1033 PUSH1 0x44 DUP3 ADD PUSH2 0x1177 JUMP JUMPDEST DUP1 SWAP8 DUP6 ADD MSTORE PUSH2 0x1044 PUSH1 0x64 DUP3 ADD PUSH2 0x1177 JUMP JUMPDEST DUP1 SWAP9 DUP6 ADD MSTORE ADD PUSH2 0x1177 JUMP JUMPDEST SWAP2 DUP3 SWAP2 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP1 DUP1 SWAP4 AND SWAP6 AND SWAP4 AND SWAP2 AND PUSH2 0x13A5 JUMP JUMPDEST ADD PUSH2 0xFDF JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH1 0x3 NOT ADD SWAP1 PUSH1 0x80 DUP3 SLT PUSH2 0x1130 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP1 PUSH2 0x11A6 DUP3 PUSH2 0x10A4 JUMP JUMPDEST DUP1 DUP3 SWAP5 SLT PUSH2 0x1130 JUMPI DUP1 MLOAD DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI DUP3 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1130 JUMPI DUP2 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x64 CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1130 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1130 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x1130 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x108E JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1130 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1130 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x6 SHL ADD ADD GT PUSH2 0x1130 JUMPI JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x60 DUP2 DUP5 SUB SLT PUSH2 0x1130 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH2 0x129C DUP4 PUSH2 0x10A4 JUMP JUMPDEST DUP3 SWAP5 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 GT PUSH2 0x1130 JUMPI DUP4 ADD DUP3 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x1130 JUMPI DUP1 CALLDATALOAD PUSH2 0x12C9 DUP2 PUSH2 0x1225 JUMP JUMPDEST SWAP3 PUSH2 0x12D6 DUP8 MLOAD SWAP5 DUP6 PUSH2 0x10F8 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP1 DUP7 ADD SWAP4 PUSH1 0x6 SHL DUP6 ADD ADD SWAP4 DUP2 DUP6 GT PUSH2 0x1130 JUMPI SWAP1 DUP7 DUP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 ADD SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x1319 JUMPI POP POP POP POP POP DUP6 MSTORE DUP1 DUP3 ADD CALLDATALOAD SWAP1 DUP6 ADD MSTORE ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 DUP5 DUP4 SUB SLT PUSH2 0x1130 JUMPI DUP9 MLOAD SWAP1 DUP10 DUP3 ADD SWAP1 DUP3 DUP3 LT DUP6 DUP4 GT OR PUSH2 0x1366 JUMPI DUP11 SWAP3 DUP10 SWAP3 DUP5 MSTORE PUSH2 0x134A DUP8 PUSH2 0x1177 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP8 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP2 SWAP1 DUP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0x12FC JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x138F JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 DUP3 DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP3 DUP3 DUP3 KECCAK256 SWAP7 AND SWAP6 DUP7 DUP3 MSTORE PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SWAP5 DUP6 SLOAD SWAP6 PUSH6 0xFFFFFFFFFFFF DUP8 PUSH1 0xA0 SHR AND DUP1 TIMESTAMP GT PUSH2 0x1470 JUMPI POP DUP3 DUP8 AND SWAP7 DUP4 DUP9 SUB PUSH2 0x1409 JUMPI JUMPDEST POP POP PUSH2 0x1407 SWAP6 POP AND SWAP3 PUSH2 0x1E03 JUMP JUMPDEST JUMP JUMPDEST DUP8 DUP5 DUP5 AND GT PUSH1 0x0 EQ PUSH2 0x1446 JUMPI PUSH1 0x24 DUP9 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xF96FB07100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP5 DUP5 PUSH2 0x1407 SWAP11 SUB AND SWAP2 AND OR SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xD81B2F2E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x138F JUMPI PUSH1 0x6 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1130 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP6 MLOAD AND SWAP5 DUP3 PUSH1 0x20 DUP3 ADD MLOAD AND SWAP3 DUP1 DUP7 PUSH1 0x40 DUP1 SWAP5 ADD MLOAD AND SWAP6 AND SWAP6 PUSH1 0x0 SWAP2 DUP8 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP4 DUP4 KECCAK256 DUP10 DUP5 MSTORE PUSH1 0x20 MSTORE DUP4 DUP4 KECCAK256 SWAP10 AND SWAP9 DUP10 DUP4 MSTORE PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP2 DUP5 DUP4 SLOAD PUSH1 0xD0 SHR SUB PUSH2 0x15E1 JUMPI SWAP2 DUP6 PUSH2 0x15CB SWAP5 SWAP3 PUSH32 0xC6A377BFC4EB120024A8AC08EEF205BE16B817020812C73223E81D1BDB9708EC SWAP9 SWAP8 SWAP7 SWAP5 POP DUP8 ISZERO PUSH1 0x0 EQ PUSH2 0x15D0 JUMPI PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP1 TIMESTAMP AND JUMPDEST PUSH1 0xA0 SHL AND PUSH32 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000 PUSH1 0x1 DUP7 ADD PUSH1 0xD0 SHL AND OR OR SWAP1 SSTORE MLOAD SWAP4 DUP5 SWAP4 DUP5 SWAP2 PUSH1 0x40 SWAP2 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP6 ADD SWAP7 AND DUP5 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 SWAP3 AND PUSH1 0x20 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST POP PUSH6 0xFFFFFFFFFFFF PUSH1 0xA0 SHL DUP8 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x4 DUP5 MLOAD PUSH4 0x3AB3447F PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST CHAINID PUSH32 0x0 SUB PUSH2 0x163C JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 DUP3 MSTORE PUSH32 0x9AC997416E8FF9D2FF6BEBEB7149F65CDAE5E32E2B90440B566BB3044041D36A PUSH1 0x40 DUP3 ADD MSTORE CHAINID PUSH1 0x60 DUP3 ADD MSTORE ADDRESS PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP2 MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x10C0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x16B4 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x22 DUP4 ADD MSTORE PUSH1 0x42 DUP3 ADD MSTORE PUSH1 0x42 DUP2 MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x1072 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP4 PUSH1 0x40 DUP5 ADD MLOAD DUP1 TIMESTAMP GT PUSH2 0x1773 JUMPI POP PUSH1 0x20 DUP5 MLOAD ADD MLOAD DUP1 DUP7 GT PUSH2 0x175B JUMPI POP SWAP2 DUP6 SWAP2 PUSH2 0xB43 PUSH2 0x1738 SWAP5 PUSH2 0x1733 PUSH1 0x20 DUP9 ADD MLOAD DUP7 PUSH2 0x189C JUMP JUMPDEST PUSH2 0x16AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 MLOAD MLOAD AND SWAP3 PUSH1 0x84 CALLDATALOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0x1130 JUMPI PUSH2 0x1407 SWAP4 PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x3728B83D PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP6 SWAP1 SWAP4 SWAP6 DUP1 MLOAD MLOAD SWAP6 PUSH1 0x40 SWAP3 DUP4 DUP4 ADD MLOAD DUP1 TIMESTAMP GT PUSH2 0x1885 JUMPI POP DUP5 DUP9 SUB PUSH2 0x185C JUMPI PUSH2 0x17C2 SWAP2 DUP7 SWAP2 PUSH2 0xB43 PUSH1 0x20 SWAP12 PUSH2 0x1733 DUP14 DUP9 ADD MLOAD DUP7 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT PUSH2 0x17D6 JUMPI POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x17E1 DUP2 DUP4 MLOAD PUSH2 0x137B JUMP JUMPDEST MLOAD DUP9 PUSH2 0x17EE DUP4 DUP8 DUP11 PUSH2 0x14A1 JUMP JUMPDEST ADD CALLDATALOAD SWAP1 DUP10 DUP2 ADD MLOAD DUP1 DUP4 GT PUSH2 0x1845 JUMPI POP SWAP2 DUP2 DUP9 DUP9 DUP9 PUSH1 0x1 SWAP7 DUP6 SWAP7 PUSH2 0x1818 JUMPI JUMPDEST POP POP POP POP POP POP ADD PUSH2 0x17C5 JUMP JUMPDEST PUSH2 0x183A SWAP6 PUSH2 0x1834 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4BA SWAP4 MLOAD AND SWAP6 PUSH2 0x14A1 JUMP JUMPDEST SWAP2 PUSH2 0x1E03 JUMP JUMPDEST DUP1 CODESIZE DUP9 DUP9 DUP9 DUP4 PUSH2 0x180C JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP7 MLOAD SWAP1 PUSH4 0x3728B83D PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x4 DUP5 MLOAD PUSH32 0xFF633A3800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x24 SWAP1 DUP6 MLOAD SWAP1 PUSH4 0xCD21DB4F PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0xFF DUP4 AND SHL SWAP3 AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SHR PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD XOR DUP1 SWAP2 SSTORE AND ISZERO PUSH2 0x18D9 JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH4 0x3AB3447F PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST SWAP1 PUSH2 0x18F4 DUP3 PUSH2 0x1225 JUMP JUMPDEST PUSH2 0x1901 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x10F8 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x1912 PUSH1 0x1F NOT SWAP2 PUSH2 0x1225 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x192B JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 SWAP3 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x195A JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x194C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x65626CAD6CB96493BF6F5EBEA28756C966F023AB9E8A83A7101849D5573B3678 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x80 DUP6 ADD MSTORE ADD MLOAD AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP3 PUSH32 0x618358AC3DB8DC274F0CD8829DA7E234BD48CD73C4A740AEDE1ADEC9846D06A1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP2 MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x1072 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x1130 JUMPI PUSH1 0x20 DUP3 CALLDATALOAD SWAP3 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x0 DUP3 EXTCODESIZE PUSH2 0x1CA9 JUMPI POP PUSH1 0x41 DUP5 SUB PUSH2 0x1C21 JUMPI PUSH2 0x1A7E DUP5 DUP5 ADD DUP5 PUSH2 0x1A47 JUMP JUMPDEST SWAP2 SWAP1 SWAP5 PUSH1 0x40 LT ISZERO PUSH2 0x138F JUMPI PUSH1 0x80 PUSH1 0x0 SWAP2 PUSH1 0x40 PUSH1 0xFF SWAP7 ADD CALLDATALOAD PUSH1 0xF8 SHR SWAP4 JUMPDEST PUSH1 0x40 SWAP8 DUP9 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP8 DUP9 SWAP7 AND DUP7 DUP5 ADD MSTORE DUP9 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x1C16 JUMPI PUSH1 0x0 MLOAD DUP4 MLOAD DUP5 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x108E JUMPI DUP6 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x7979797979797979797979797979797900000000000000000000000000000000 DUP5 DUP3 ADD MSTORE DUP5 MLOAD SWAP1 DUP5 DUP3 ADD SWAP3 PUSH31 0x7150BE00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP5 DUP6 PUSH1 0x24 DUP6 ADD MSTORE AND SWAP5 DUP6 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x64 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1C02 JUMPI POP POP POP SWAP2 DUP2 PUSH2 0x1B91 PUSH1 0xA4 DUP3 DUP7 PUSH1 0x0 DUP4 DUP2 SWAP10 DUP3 SWAP10 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB PUSH1 0x84 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x10F8 JUMP JUMPDEST MLOAD SWAP1 PUSH11 0x636F6E736F6C652E6C6F67 GAS STATICCALL POP DUP1 ISZERO PUSH2 0x1BD9 JUMPI SUB PUSH2 0x1BB0 JUMPI POP JUMP JUMPDEST PUSH1 0x4 SWAP1 MLOAD PUSH32 0x815E1D6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x4 DUP4 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xA4 ADD MSTORE DUP3 ADD PUSH2 0x1B5D JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x40 DUP5 SWAP3 SWAP5 EQ PUSH1 0x0 EQ PUSH2 0x1C7F JUMPI PUSH2 0x1C3B SWAP2 DUP2 ADD SWAP1 PUSH2 0x1A47 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH1 0x1B PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP2 PUSH1 0xFF SHR ADD SWAP3 PUSH1 0xFF DUP5 GT PUSH2 0x192B JUMPI PUSH1 0x80 PUSH1 0x0 SWAP2 PUSH1 0xFF SWAP6 SWAP4 PUSH2 0x1A9A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x4BE6321B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP3 SWAP4 DUP1 SWAP3 PUSH1 0x20 SWAP3 SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP8 DUP2 SWAP7 DUP3 SWAP6 PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP13 DUP14 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP6 ADD MSTORE DUP2 PUSH1 0x44 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY DUP2 DUP2 ADD DUP4 ADD DUP11 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP3 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1DF8 JUMPI DUP3 SWAP2 PUSH2 0x1D7A JUMPI JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 POP AND SUB PUSH2 0x1D50 JUMPI JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xB0669CBC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x1DF0 JUMPI JUMPDEST DUP2 PUSH2 0x1D94 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x10F8 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x33B JUMPI MLOAD SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND DUP3 SUB PUSH2 0x908 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 CODESIZE PUSH2 0x1D24 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x0 DUP1 SWAP4 PUSH1 0x20 SWAP6 PUSH1 0x64 SWAP5 PUSH1 0x40 MLOAD SWAP5 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x4 DUP8 ADD MSTORE AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE GAS CALL RETURNDATASIZE ISZERO PUSH1 0x1F RETURNDATASIZE GT PUSH1 0x1 PUSH1 0x0 MLOAD EQ AND OR AND ISZERO PUSH2 0x1E68 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F46524F4D5F4641494C4544000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 CREATE BYTE 0xF7 EXTCODECOPY 0xAF PUSH19 0xEA274682F34E0E2F5CF5436B1762A3D73D908D DUP13 SELFDESTRUCT OR CHAINID SELFDESTRUCT DUP1 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
          "sourceMap": "385:152:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1795:102:47;;;;;;;;;;;;;;;;;5589:86;1795:102;;;;;;;;;;;;;;;;;5589:86;;;;;;;;;:::i;:::-;385:152:36;;;5589:86:47;;5560:129;5727:16;;;385:152:36;5805:27:47;;;;:::i;:::-;5852:13;;5867:16;;;;;;385:152:36;;3581:9:38;385:152:36;;6068:330:47;385:152:36;6068:330:47;385:152:36;;6160:39:47;;743:191;6160:39;;;743:191;;;:::i;:::-;6160:39;4932:80;6160:39;4932:80;;6160:39;;;;;;;;:::i;:::-;385:152:36;6150:50:47;;6274:12;;;385:152:36;6318:15:47;;;385:152:36;;;6068:330:47;;;385:152:36;;;1795:102:47;;;385:152:36;;;;6232:10:47;1795:102;;;385:152:36;1795:102:47;;;385:152:36;1795:102:47;;;385:152:36;;;;;;1795:102:47;;;385:152:36;;;;1795:102:47;;;;;6068:330;;;;;;;;;:::i;:::-;385:152:36;6033:385:47;;3581:9:38;;:::i;:::-;385:152:36;;5885:3:47;5959:16;;5910:69;5959:16;5937:42;5959:19;5885:3;5959:16;;;:19;:::i;:::-;;5937:42;:::i;:::-;5910:69;;:::i;:::-;385:152:36;5885:3:47;:::i;:::-;5852:13;;1795:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;3967:16:47;;;;;385:152:36;4045:27:47;;;;:::i;:::-;4092:13;;4107:16;;;;;;385:152:36;;3109:9:38;385:152:36;;;;4428:39:47;;743:191;385:152:36;4428:39:47;;743:191;;;:::i;:::-;4428:39;4932:80;;4428:39;;;;;;:::i;:::-;385:152:36;4418:50:47;;385:152:36;4542:12:47;;385:152:36;4586:15:47;;;385:152:36;;;;4308:319:47;385:152:36;4308:319:47;;385:152:36;1402:191:47;385:152:36;;1134:184:47;;385:152:36;4500:10:47;1134:184;;;385:152:36;;1134:184:47;;385:152:36;1134:184:47;;;385:152:36;1134:184:47;4308:319;;;;;:::i;4125:3::-;4199:16;;4150:69;4199:16;4177:42;4199:19;4125:3;4199:16;;;:19;:::i;4125:3::-;4092:13;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4667:13:34;;;;4682:10;;;;;;385:152:36;;;4694:3:34;4737:12;:18;:12;385:152:36;4737:12:34;;;;:::i;:::-;:18;:::i;:::-;4795:20;:12;;;;;;:::i;:::-;:20;;:::i;:::-;4494:10;385:152:36;;;;;;;;;-1:-1:-1;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;;;;;;;;;4908:31:34;4494:10;;4908:31;;385:152:36;4667:13:34;;385:152:36;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;385:152:36;;;;;1111:92:34;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;1400:10:34;1509:56;1400:10;;385:152:36;;1390:9:34;385:152:36;;;;;;;-1:-1:-1;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;1510:54:45;:15;;:54;385:152:36;;;1535:15:45;;385:152:36;1510:54:45;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;1400:10:34;1509:56;;385:152:36;;1510:54:45;;;;;;385:152:36;;;;;;;;-1:-1:-1;;385:152:36;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;5147:10:34;385:152:36;;;;5137:9:34;385:152:36;;;;;;-1:-1:-1;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;5197:20:34;;;;;5193:47;;385:152:36;;;;;;5419:24:34;5415:60;;5147:10;;5571:65;5147:10;;;;385:152:36;;5137:9:34;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5147:10:34;5571:65;;385:152:36;;5415:60:34;385:152:36;;5452:23:34;;;;5193:47;385:152:36;;;-1:-1:-1;;;5226:14:34;;;385:152:36;;;;;;;;;;;;;;;;-1:-1:-1;;;;;385:152:36;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5317:53:38;385:152:36;;;;;5273:10:38;385:152:36;;;;;;;;;;;;;;;;;;;5261:40:38;385:152:36;;;;;;;;;;;5273:10:38;5317:53;;385:152:36;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;-1:-1:-1;;;;;385:152:36;;;;;;2906:5:34;;;:::i;385:152:36:-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;1157:9:38;385:152:36;;;;;;;:::i;:::-;3415:16:47;;;3393:39;3415:16;;3393:39;:::i;:::-;3704:12;;;385:152:36;3748:15:47;;;385:152:36;;;;3506:283:47;3704:12;3506:283;;385:152:36;1134:184:47;385:152:36;;1134:184:47;;385:152:36;3662:10:47;1134:184;;;385:152:36;1134:184:47;;;385:152:36;1134:184:47;;;385:152:36;1134:184:47;3506:283;;;;;:::i;:::-;385:152:36;3471:338:47;;1157:9:38;;:::i;385:152:36:-;;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;:::i;:::-;;-1:-1:-1;;385:152:36;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1736:15:34;;;;;:42;1732:97;;2264:20:47;;;;;1918:35:34;2019:20;2264::47;;1955:5:34;2264:20:47;2245:40;2264:20;;2245:40;:::i;:::-;385:152:36;;;;;;;;;;2359:95:47;385:152:36;2359:95:47;;385:152:36;483:190:47;385:152:36;;483:190:47;;385:152:36;;483:190:47;;385:152:36;;483:190:47;;385:152:36;;2359:95:47;;;;;:::i;:::-;385:152:36;2324:150:47;;1918:35:34;:::i;:::-;1955:5;;:::i;:::-;1990:20;385:152:36;;;2019:20:34;;:::i;1732:97::-;385:152:36;;;;;1787:42:34;-1:-1:-1;;;1787:42:34;;;;385:152:36;1787:42:34;385:152:36;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2209:15:34;;;;;:41;2205:95;;2623:19:47;;;;;;;385:152:36;2695:25:47;;;:::i;:::-;2739:13;;2754:14;;;;;;385:152:36;;;;;;2389:34:34;385:152:36;2425:5:34;385:152:36;;;;3049:30:47;;743:191;3049:30;;;743:191;;;:::i;3049:30::-;385:152:36;3039:41:47;;385:152:36;-1:-1:-1;;;;;385:152:36;;;;;;;;;;2943:269:47;;;385:152:36;743:191:47;385:152:36;;483:190:47;;385:152:36;483:190:47;;385:152:36;;483:190:47;;385:152:36;;2943:269:47;;;;;:::i;2425:5:34:-;385:152:36;;2537:19:34;;;385:152:36;2585:13:34;;2600:10;;;;;;385:152:36;;;2612:3:34;2655:19;2686:7;2655:19;;:22;385:152:36;2655:19:34;;;:22;:::i;:::-;;2686:7;:::i;:::-;385:152:36;2585:13:34;;2770:3:47;2832:19;2813:42;2832:22;:19;;;;2770:3;2832:19;;:22;:::i;:::-;;2813:42;:::i;:::-;2795:60;;;;:::i;2770:3::-;2739:13;;;;;2205:95:34;385:152:36;;2259:41:34;-1:-1:-1;;;2259:41:34;;;;385:152:36;2259:41:34;385:152:36;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;385:152:36;;;;;;;;;;;-1:-1:-1;;385:152:36;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1795:102:47;;;;;;;;;;;5185:94;1795:102;;;;1622:9:38;1795:102:47;;;4932:80;1795:102;;;;;;;;;;;;;;;4932:80;;;;;;;;;:::i;:::-;385:152:36;;;4932:80:47;;4903:123;5094:16;5185:94;5072:39;5094:16;;5072:39;:::i;:::-;5240:12;;;385:152:36;5254:15:47;;;385:152:36;;;5185:94:47;;;385:152:36;;;1795:102:47;;;385:152:36;;;;5228:10:47;1795:102;;;385:152:36;1795:102:47;;;385:152:36;1795:102:47;;;385:152:36;;;;;;1795:102:47;;;385:152:36;;;;1795:102:47;;;;;;;;;;;;;;;;;;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3151:13:34;3166:10;;;;;;385:152:36;;;3178:3:34;385:152:36;;;;;;;;;;;;;;;;3367:20:34;385:152:36;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;385:152:36;;;;;;;;;;;3367:20:34;:::i;:::-;385:152:36;3151:13:34;;385:152:36;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;1134:184:47;385:152:36;;;;;;;;;;;;;:::o;:::-;;4932:80:47;;;385:152:36;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;385:152:36;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;385:152:36;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;385:152:36;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;385:152:36;;;;;;:::o;:::-;;;-1:-1:-1;;;;;385:152:36;;;;;;:::o;:::-;-1:-1:-1;;385:152:36;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;385:152:36;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;385:152:36;;;;;;;;3575:778:34;;;;-1:-1:-1;;;;;385:152:36;-1:-1:-1;385:152:36;;;;;3705:9:34;385:152:36;;;;;;;;;;;;;;;;;3728:10:34;385:152:36;;;;;;;;;;;;;;3756:15:34;;:36;3752:85;;385:152:36;;;;3900:30:34;;;;3896:317;;3575:778;385:152:36;;4298:47:34;385:152:36;;;4298:47:34;;:::i;:::-;3575:778::o;3896:317::-;385:152:36;;;;3953:18:34;3949:252;3953:18;;;385:152:36;;;;4002:32:34;;;;;;;385:152:36;4002:32:34;3949:252;-1:-1:-1;;385:152:36;;4298:47:34;385:152:36;;;;;;;;3896:317:34;;;;3752:85;385:152:36;;;;3801:36:34;;;;;;;385:152:36;3801:36:34;385:152:36;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;385:152:36;;;;;;;:::o;5878:547:34:-;;385:152:36;6000:13:34;;;;;385:152:36;;-1:-1:-1;;;;;385:152:36;;;;;6083:14:34;;;;;385:152:36;;6129:18:34;;;;;;;385:152:36;;;;-1:-1:-1;;385:152:36;;;;6193:9:34;6083:14;385:152:36;;;;;;;6083:14:34;385:152:36;;;;;;;;;;6083:14:34;385:152:36;;;;;;;;;;6242:22:34;6238:49;;843:79:45;;6361:56:34;843:79:45;;6361:56:34;843:79:45;;;;:40;;;:79;385:152:36;;;-1:-1:-1;;;893:15:45;;385:152:36;843:79:45;1883:3;385:152:36;;;6193:9:34;385:152:36;;;;;1834:52:45;:61;1001:59;;385:152:36;6361:56:34;;;;385:152:36;;;;;-1:-1:-1;;;;;385:152:36;;;;;;;;;;;;;;;;;;;;6361:56:34;;;;5878:547::o;843:79:45:-;;-1:-1:-1;;;843:79:45;;;6238:49:34;6273:14;385:152:36;;-1:-1:-1;;;6273:14:34;;;1185:225:35;1269:13;1286:16;1269:33;1286:16;;1317:24;1185:225;:::o;1269:134::-;385:152:36;;1631:60:35;;;385:152:36;788:80:35;385:152:36;;716:20:35;385:152:36;;;;1269:13:35;385:152:36;;;;1685:4:35;385:152:36;;;;;1631:60:35;;;;;:::i;:::-;385:152:36;1621:71:35;;1185:225;:::o;1756:167::-;1886:18;;:::i;:::-;385:152:36;;;1857:58:35;;;;385:152:36;;;;;;;;;;;;;1857:58:35;;;;;:::i;2075:704:38:-;;;;;2338:31;385:152:36;2402:15:38;;;;385:152:36;2384:15:38;;:33;2380:79;;2491:16;2338:31;2491:16;;:23;385:152:36;2473:41:38;;;2469:92;;2598:12;;;;2639:24;2665:5;2598:12;;2338:31;2598:12;;385:152:36;2598:12:38;;:::i;:::-;2639:24;:::i;2665:5::-;-1:-1:-1;;;;;2688:16:38;;;385:152:36;;;;;;;;;;;;2756:15:38;;;:::i;2469:92::-;385:152:36;;2402:15:38;385:152:36;2523:38:38;-1:-1:-1;;;2523:38:38;;;;;385:152:36;2523:38:38;2380:79;385:152:36;;2402:15:38;385:152:36;2426:33:38;-1:-1:-1;;;2426:33:38;;;;;385:152:36;2426:33:38;3937:1194;;;;;4204:16;;385:152:36;4260:15:38;;;;;;385:152:36;4242:15:38;;:33;4238:79;;4331:38;;;;4327:67;;4497:5;4431:12;;;4471:24;4431:12;;;;;;385:152:36;4431:12:38;;:::i;4497:5::-;-1:-1:-1;4558:16:38;;;;;;3937:1194;;;;;;;;:::o;4576:3::-;4635:19;:16;;;:19;:::i;:::-;;4698:18;;;;;;:::i;:::-;:34;385:152:36;4773:16:38;;;;385:152:36;4755:34:38;;;4751:78;;4852:20;;;;;;385:152:36;4852:20:38;;;4848:253;;4576:3;;;;;;;385:152:36;4543:13:38;;4848:253;5066:15;385:152:36;5043:21:38;385:152:36;-1:-1:-1;;;;;5043:18:38;385:152:36;;;5043:18:38;;:::i;:21::-;5066:15;;:::i;:::-;4848:253;;;;;;;;4751:78;385:152:36;;;;4798:31:38;-1:-1:-1;;;4798:31:38;;;;;385:152:36;4798:31:38;4327:67;4378:16;385:152:36;;4378:16:38;;;;4238:79;385:152:36;;;;4284:33:38;-1:-1:-1;;;4284:33:38;;;;;385:152:36;4284:33:38;6250:293;;-1:-1:-1;;;;;6408:1:38;385:152:36;;;;;;-1:-1:-1;385:152:36;-1:-1:-1;385:152:36;;;-1:-1:-1;385:152:36;;5992:1:38;385:152:36;-1:-1:-1;385:152:36;;;;-1:-1:-1;385:152:36;;;;6447:33:38;385:152:36;;;6495:13:38;:18;6491:45;;6250:293::o;6491:45::-;6522:14;385:152:36;;-1:-1:-1;;;6522:14:38;;;385:152:36;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;4932:80:47;385:152:36;4932:80:47;;385:152:36;;:::i;:::-;;;;;;;;:::o;:::-;-1:-1:-1;;385:152:36;;;;;;;:::o;:::-;-1:-1:-1;;;385:152:36;;;;;;;;743:191:47;385:152:36;;;;;;743:191:47;;;;;;;;;;;;;:::o;:::-;;;385:152:36;;743:191:47;;;;;;;;;;;;6435:194;385:152:36;;6574:45:47;;;385:152:36;325:87:47;385:152:36;;-1:-1:-1;;;;;325:87:47;;;385:152:36;;325:87:47;;385:152:36;6574:45:47;325:87;;;385:152:36;325:87:47;;;385:152:36;325:87:47;385:152:36;325:87:47;;385:152:36;325:87:47;;;385:152:36;325:87:47;;;385:152:36;325:87:47;;385:152:36;325:87:47;;;385:152:36;325:87:47;6574:45;;325:87;385:152:36;;;;;;;;;;;;;;6564:56:47;;6435:194;:::o;6637:227::-;385:152:36;;6804:50:47;;;;385:152:36;997:59:47;385:152:36;;-1:-1:-1;;;;;997:59:47;;385:152:36;;997:59:47;;385:152:36;997:59:47;;;;;385:152:36;997:59:47;6804:50;;;;;:::i;385:152:36:-;;;;;;;;;;;;;;;;;:::o;750:1434:49:-;;;;;-1:-1:-1;929:25:49;;;;-1:-1:-1;1005:2:49;985:22;;1005:2;;1044:41;;;;;;:::i;:::-;1035:50;;673:68;1131:2;673:68;;;;;-1:-1:-1;673:68:49;1131:2;385:152:36;673:68:49;;1121:13;673:68;;981:572;;385:152:36;;;;;;;673:68:49;385:152:36;;;;673:68:49;;;;;;;385:152:36;673:68:49;;;385:152:36;1589:24:49;;;;;;;;;-1:-1:-1;1589:24:49;385:152:36;;;;;;;;;;;;;;;;673:68:49;385:152:36;;673:68:49;;;;;385:152:36;;19181:66:55;;;;;;;;-1:-1:-1;;;;;385:152:36;;;19181:66:55;;;;;385:152:36;;;;;;;;673:68:49;385:152:36;;;;;;;;;;;;-1:-1:-1;1795:102:47;;;;;;;;;;;19181:66:55;385:152:36;1795:102:47;;-1:-1:-1;1795:102:47;;;;;;;;4932:80;;;385:152:36;;;;;19181:66:55;385:152:36;19181:66:55;;;;;;;:::i;:::-;358:279;;131:42;358:279;;;1711:20:49;;1707:51;;1782:23;1778:51;;925:1251;750:1434::o;1778:51::-;1814:15;385:152:36;;1814:15:49;;;;1707:51;1740:18;385:152:36;;1740:18:49;;;;1795:102:47;;;;;;;;;;385:152:36;1795:102:47;;;;;;1589:24:49;385:152:36;;;-1:-1:-1;385:152:36;;;;;981:572:49;1166:22;1186:2;1166:22;;;;1162:391;1186:2;;;1298:41;;;;;;:::i;:::-;1288:51;;1369:19;1446:2;674:66;1369:19;;385:152:36;;;673:68:49;;385:152:36;673:68:49;;;;;-1:-1:-1;1414:34:49;385:152:36;1414:34:49;1162:391;981:572;;1162:391;1508:24;1186:2;385:152:36;1508:24:49;;;;925:1251;385:152:36;;;;1948:57:49;385:152:36;;-1:-1:-1;;;;;385:152:36;;;;;;;;;;1948:57:49;;;;;;;385:152:36;;;;;;;;;;;;;;1795:102:47;;;;;;;;;4932:80;385:152:36;-1:-1:-1;;385:152:36;;;1948:57:49;;;385:152:36;1948:57:49;;;;;;;;;;;925:1251;385:152:36;;;;;2078:48:49;2074:87;;750:1434::o;2074:87::-;1948:57;385:152:36;;2135:26:49;;;;1948:57;;;;;;;;;;;;;;;;;:::i;:::-;;;385:152:36;;;;;;;;;;;;;1948:57:49;385:152:36;1948:57:49;;;;;;;-1:-1:-1;1948:57:49;;;385:152:36;;;;;;;;;1328:1782:57;;-1:-1:-1;1328:1782:57;;1532:1521;1328:1782;1532:1521;1328:1782;1532:1521;;;;;;-1:-1:-1;;;;;1532:1521:57;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:1521:57;;;;;385:152:36;;;1328:1782:57:o;385:152:36:-;1532:1521:57;;385:152:36;;;;1532:1521:57;;385:152:36;;;;1532:1521:57;385:152:36;;;;1532:1521:57;385:152:36;;;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1586400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DOMAIN_SEPARATOR()": "infinite",
            "allowance(address,address,address)": "1767",
            "approve(address,address,uint160,uint48)": "24207",
            "invalidateNonces(address,address,uint48)": "25115",
            "invalidateUnorderedNonces(uint256,uint256)": "22936",
            "lockdown((address,address)[])": "infinite",
            "nonceBitmap(address,uint256)": "1360",
            "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": "infinite",
            "permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": "infinite",
            "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": "infinite",
            "permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": "infinite",
            "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": "infinite",
            "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": "infinite",
            "transferFrom((address,address,uint160,address)[])": "infinite",
            "transferFrom(address,address,uint160,address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "DOMAIN_SEPARATOR()": "3644e515",
          "allowance(address,address,address)": "927da105",
          "approve(address,address,uint160,uint48)": "87517c45",
          "invalidateNonces(address,address,uint48)": "65d9723c",
          "invalidateUnorderedNonces(uint256,uint256)": "3ff9dcb1",
          "lockdown((address,address)[])": "cc53287f",
          "nonceBitmap(address,uint256)": "4fe02b44",
          "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": "2b67b570",
          "permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": "2a2d80d1",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": "30f28b7a",
          "permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": "edd9444b",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": "137c29fe",
          "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": "fe8ec1a7",
          "transferFrom((address,address,uint160,address)[])": "0d58b1db",
          "transferFrom(address,address,uint160,address)": "36c78516"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"AllowanceExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureDeadline\",\"type\":\"uint256\"}],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Lockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"oldNonce\",\"type\":\"uint48\"}],\"name\":\"NonceInvalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"name\":\"Permit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"word\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"UnorderedNonceInvalidation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"}],\"name\":\"invalidateNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"invalidateUnorderedNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.TokenSpenderPair[]\",\"name\":\"approvals\",\"type\":\"tuple[]\"}],\"name\":\"lockdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch\",\"name\":\"permitBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Users must approve Permit2 before calling any of the transfer functions.\",\"errors\":{\"AllowanceExpired(uint256)\":[{\"params\":{\"deadline\":\"The timestamp at which the allowed amount is no longer valid\"}}],\"InsufficientAllowance(uint256)\":[{\"params\":{\"amount\":\"The maximum amount allowed\"}}],\"InvalidAmount(uint256)\":[{\"params\":{\"maxAmount\":\"The maximum amount a spender can request to transfer\"}}],\"LengthMismatch()\":[{\"details\":\"If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\"}],\"SignatureExpired(uint256)\":[{\"params\":{\"signatureDeadline\":\"The timestamp at which a signature is no longer valid\"}}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Uses cached version if chainid and address are unchanged from construction.\"},\"approve(address,address,uint160,uint48)\":{\"details\":\"The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval\",\"params\":{\"amount\":\"The approved amount of the token\",\"expiration\":\"The timestamp at which the approval is no longer valid\",\"spender\":\"The spender address to approve\",\"token\":\"The token to approve\"}},\"invalidateNonces(address,address,uint48)\":{\"details\":\"Can't invalidate more than 2**16 nonces per transaction.\",\"params\":{\"newNonce\":\"The new nonce to set. Invalidates all nonces less than it.\",\"spender\":\"The spender to invalidate nonces for\",\"token\":\"The token to invalidate nonces for\"}},\"invalidateUnorderedNonces(uint256,uint256)\":{\"details\":\"The wordPos is maxed at type(uint248).max\",\"params\":{\"mask\":\"A bitmap masked against msg.sender's current bitmap at the word position\",\"wordPos\":\"A number to index the nonceBitmap at\"}},\"lockdown((address,address)[])\":{\"params\":{\"approvals\":\"Array of approvals to revoke.\"}},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitSingle\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitBatch\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"details\":\"Reverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\"}},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\"}},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"transferFrom((address,address,uint160,address)[])\":{\"details\":\"Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"transferDetails\":\"Array of owners, recipients, amounts, and tokens for the transfers\"}},\"transferFrom(address,address,uint160,address)\":{\"details\":\"Requires the from address to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"amount\":\"The amount of the token to transfer\",\"from\":\"The address to transfer from\",\"to\":\"The address of the recipient\",\"token\":\"The token address to transfer\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceExpired(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has expired.\"}],\"ExcessiveInvalidation()\":[{\"notice\":\"Thrown when too many nonces are invalidated.\"}],\"InsufficientAllowance(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has been depleted.\"}],\"InvalidAmount(uint256)\":[{\"notice\":\"Thrown when the requested amount for a transfer is larger than the permissioned amount\"}],\"InvalidContractSignature()\":[{\"notice\":\"Thrown when the recovered contract signature is incorrect\"}],\"InvalidNonce()\":[{\"notice\":\"Thrown when validating that the inputted nonce has not been used\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when the recovered signer is equal to the zero address\"}],\"InvalidSignatureLength()\":[{\"notice\":\"Thrown when the passed in signature is not a valid length\"}],\"InvalidSigner()\":[{\"notice\":\"Thrown when the recovered signer does not equal the claimedSigner\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\"}],\"SignatureExpired(uint256)\":[{\"notice\":\"Thrown when validating an inputted signature that is stale\"}]},\"events\":{\"Approval(address,address,address,uint160,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions on a token for the spender.\"},\"Lockdown(address,address,address)\":{\"notice\":\"Emits an event when the owner sets the allowance back to 0 with the lockdown function.\"},\"NonceInvalidation(address,address,address,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully invalidates an ordered nonce.\"},\"Permit(address,address,address,uint160,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\"},\"UnorderedNonceInvalidation(address,uint256,uint256)\":{\"notice\":\"Emits an event when the owner successfully invalidates an unordered nonce.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the domain separator for the current chain.\"},\"allowance(address,address,address)\":{\"notice\":\"Maps users to tokens to spender addresses and information about the approval on the token\"},\"approve(address,address,uint160,uint48)\":{\"notice\":\"Approves the spender to use up to amount of the specified token up until the expiration\"},\"invalidateNonces(address,address,uint48)\":{\"notice\":\"Invalidate nonces for a given (token, spender) pair\"},\"invalidateUnorderedNonces(uint256,uint256)\":{\"notice\":\"Invalidates the bits specified in mask for the bitmap at the word position\"},\"lockdown((address,address)[])\":{\"notice\":\"Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity by batch revoking approvals\"},\"nonceBitmap(address,uint256)\":{\"notice\":\"A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"notice\":\"Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\"},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"notice\":\"Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"notice\":\"Transfers a token using a signed permit message\"},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit message\"},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"notice\":\"Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"transferFrom((address,address,uint160,address)[])\":{\"notice\":\"Transfer approved tokens in a batch\"},\"transferFrom(address,address,uint160,address)\":{\"notice\":\"Transfer approved tokens from one address to another\"}},\"notice\":\"Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/permit2/Permit2.sol\":\"Permit2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/permit2/AllowanceTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {PermitHash} from \\\"./libraries/PermitHash.sol\\\";\\nimport {SignatureVerification} from \\\"./libraries/SignatureVerification.sol\\\";\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\nimport {IAllowanceTransfer} from \\\"../permit2/interfaces/IAllowanceTransfer.sol\\\";\\nimport {SignatureExpired, InvalidNonce} from \\\"./PermitErrors.sol\\\";\\nimport {Allowance} from \\\"./libraries/Allowance.sol\\\";\\n\\ncontract AllowanceTransfer is IAllowanceTransfer, EIP712 {\\n     using SignatureVerification for bytes;\\n     using SafeTransferLib for ERC20;\\n     using PermitHash for PermitSingle;\\n     using PermitHash for PermitBatch;\\n     using Allowance for PackedAllowance;\\n\\n     /// @notice Maps users to tokens to spender addresses and information about the approval on the token\\n     /// @dev Indexed in the order of token owner address, token address, spender address\\n     /// @dev The stored word saves the allowed amount, expiration on the allowance, and nonce\\n     mapping(address => mapping(address => mapping(address => PackedAllowance))) public allowance;\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function approve(address token, address spender, uint160 amount, uint48 expiration) external {\\n          PackedAllowance storage allowed = allowance[msg.sender][token][spender];\\n          allowed.updateAmountAndExpiration(amount, expiration);\\n          emit Approval(msg.sender, token, spender, amount, expiration);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external {\\n          if (block.timestamp > permitSingle.sigDeadline) revert SignatureExpired(permitSingle.sigDeadline);\\n\\n          // Verify the signer address from the signature.\\n          signature.verify(_hashTypedData(permitSingle.hash()), owner);\\n\\n          _updateApproval(permitSingle.details, owner, permitSingle.spender);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external {\\n          if (block.timestamp > permitBatch.sigDeadline) revert SignatureExpired(permitBatch.sigDeadline);\\n\\n          // Verify the signer address from the signature.\\n          signature.verify(_hashTypedData(permitBatch.hash()), owner);\\n\\n          address spender = permitBatch.spender;\\n          unchecked {\\n               uint256 length = permitBatch.details.length;\\n               for (uint256 i = 0; i < length; ++i) {\\n                    _updateApproval(permitBatch.details[i], owner, spender);\\n               }\\n          }\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function transferFrom(address from, address to, uint160 amount, address token) external {\\n          _transfer(from, to, amount, token);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external {\\n          unchecked {\\n               uint256 length = transferDetails.length;\\n               for (uint256 i = 0; i < length; ++i) {\\n                    AllowanceTransferDetails memory transferDetail = transferDetails[i];\\n                    _transfer(transferDetail.from, transferDetail.to, transferDetail.amount, transferDetail.token);\\n               }\\n          }\\n     }\\n\\n     /// @notice Internal function for transferring tokens using stored allowances\\n     /// @dev Will fail if the allowed timeframe has passed\\n     function _transfer(address from, address to, uint160 amount, address token) private {\\n          PackedAllowance storage allowed = allowance[from][token][msg.sender];\\n\\n          if (block.timestamp > allowed.expiration) revert AllowanceExpired(allowed.expiration);\\n\\n          uint256 maxAmount = allowed.amount;\\n          if (maxAmount != type(uint160).max) {\\n               if (amount > maxAmount) {\\n                    revert InsufficientAllowance(maxAmount);\\n               } else {\\n                    unchecked {\\n                         allowed.amount = uint160(maxAmount) - amount;\\n                    }\\n               }\\n          }\\n\\n          // Transfer the tokens from the from address to the recipient.\\n          ERC20(token).safeTransferFrom(from, to, amount);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function lockdown(TokenSpenderPair[] calldata approvals) external {\\n          address owner = msg.sender;\\n          // Revoke allowances for each pair of spenders and tokens.\\n          unchecked {\\n               uint256 length = approvals.length;\\n               for (uint256 i = 0; i < length; ++i) {\\n                    address token = approvals[i].token;\\n                    address spender = approvals[i].spender;\\n\\n                    allowance[owner][token][spender].amount = 0;\\n                    emit Lockdown(owner, token, spender);\\n               }\\n          }\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function invalidateNonces(address token, address spender, uint48 newNonce) external {\\n          uint48 oldNonce = allowance[msg.sender][token][spender].nonce;\\n\\n          if (newNonce <= oldNonce) revert InvalidNonce();\\n\\n          // Limit the amount of nonces that can be invalidated in one transaction.\\n          unchecked {\\n               uint48 delta = newNonce - oldNonce;\\n               if (delta > type(uint16).max) revert ExcessiveInvalidation();\\n          }\\n\\n          allowance[msg.sender][token][spender].nonce = newNonce;\\n          emit NonceInvalidation(msg.sender, token, spender, newNonce, oldNonce);\\n     }\\n\\n     /// @notice Sets the new values for amount, expiration, and nonce.\\n     /// @dev Will check that the signed nonce is equal to the current nonce and then incrememnt the nonce value by 1.\\n     /// @dev Emits a Permit event.\\n     function _updateApproval(PermitDetails memory details, address owner, address spender) private {\\n          uint48 nonce = details.nonce;\\n          address token = details.token;\\n          uint160 amount = details.amount;\\n          uint48 expiration = details.expiration;\\n          PackedAllowance storage allowed = allowance[owner][token][spender];\\n\\n          if (allowed.nonce != nonce) revert InvalidNonce();\\n\\n          allowed.updateAll(amount, expiration, nonce);\\n          emit Permit(owner, token, spender, amount, expiration, nonce);\\n     }\\n}\\n\",\"keccak256\":\"0x6c7ee4742755ac511cfce705d334fe48d9464519a4aa4ec6cd454398c141be1b\",\"license\":\"MIT\"},\"contracts/permit2/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IEIP712} from \\\"./interfaces/IEIP712.sol\\\";\\n\\n/// @notice EIP712 helpers for permit2\\n/// @dev Maintains cross-chain replay protection in the event of a fork\\n/// @dev Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol\\ncontract EIP712 is IEIP712 {\\n    // Cache the domain separator as an immutable value, but also store the chain id that it\\n    // corresponds to, in order to invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private constant _HASHED_NAME = keccak256(\\\"Permit2\\\");\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    constructor() {\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Returns the domain separator for the current chain.\\n    /// @dev Uses cached version if chainid and address are unchanged from construction.\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return block.chainid == _CACHED_CHAIN_ID\\n            ? _CACHED_DOMAIN_SEPARATOR\\n            : _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Builds a domain separator using the current chainId and contract address.\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 nameHash) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, block.chainid, address(this)));\\n    }\\n\\n    /// @notice Creates an EIP-712 typed data hash\\n    function _hashTypedData(bytes32 dataHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), dataHash));\\n    }\\n}\\n\",\"keccak256\":\"0x5ac9f1db92c3102fa28911c754cffc54c6bbd3eb793192b67c232c02fb974b99\",\"license\":\"MIT\"},\"contracts/permit2/Permit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {SignatureTransfer} from \\\"./SignatureTransfer.sol\\\";\\nimport {AllowanceTransfer} from \\\"./AllowanceTransfer.sol\\\";\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ncontract Permit2 is SignatureTransfer, AllowanceTransfer {\\n// Permit2 unifies the two contracts so users have maximal flexibility with their approval.\\n}\\n\",\"keccak256\":\"0x934c0eb24a52eb5900f01f5c328374b670366adf995ba9ed49bcd3d7b87b159e\",\"license\":\"MIT\"},\"contracts/permit2/PermitErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice Shared errors between signature based transfers and allowance based transfers.\\n\\n/// @notice Thrown when validating an inputted signature that is stale\\n/// @param signatureDeadline The timestamp at which a signature is no longer valid\\nerror SignatureExpired(uint256 signatureDeadline);\\n\\n/// @notice Thrown when validating that the inputted nonce has not been used\\nerror InvalidNonce();\\n\",\"keccak256\":\"0x9fd1192bbc3ffa9354f2bfc534d7a1cdf2be2c940c96ed4ac7bc37991e1e5dfe\",\"license\":\"MIT\"},\"contracts/permit2/SignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ISignatureTransfer} from \\\"./interfaces/ISignatureTransfer.sol\\\";\\nimport {SignatureExpired, InvalidNonce} from \\\"./PermitErrors.sol\\\";\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {SignatureVerification} from \\\"./libraries/SignatureVerification.sol\\\";\\nimport {PermitHash} from \\\"./libraries/PermitHash.sol\\\";\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\n\\ncontract SignatureTransfer is ISignatureTransfer, EIP712 {\\n    using SignatureVerification for bytes;\\n    using SafeTransferLib for ERC20;\\n    using PermitHash for PermitTransferFrom;\\n    using PermitHash for PermitBatchTransferFrom;\\n\\n    /// @inheritdoc ISignatureTransfer\\n    mapping(address => mapping(uint256 => uint256)) public nonceBitmap;\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hash(), signature);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(\\n            permit, transferDetails, owner, permit.hashWithWitness(witness, witnessTypeString), signature\\n        );\\n    }\\n\\n    /// @notice Transfers a token using a signed permit message.\\n    /// @param permit The permit data signed over by the owner\\n    /// @param dataHash The EIP-712 hash of permit data to include when checking signature\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function _permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 dataHash,\\n        bytes calldata signature\\n    ) private {\\n        uint256 requestedAmount = transferDetails.requestedAmount;\\n\\n        if (block.timestamp > permit.deadline) revert SignatureExpired(permit.deadline);\\n        if (requestedAmount > permit.permitted.amount) revert InvalidAmount(permit.permitted.amount);\\n\\n        _useUnorderedNonce(owner, permit.nonce);\\n\\n        signature.verify(_hashTypedData(dataHash), owner);\\n\\n        ERC20(permit.permitted.token).safeTransferFrom(owner, transferDetails.to, requestedAmount);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hash(), signature);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitWitnessTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(\\n            permit, transferDetails, owner, permit.hashWithWitness(witness, witnessTypeString), signature\\n        );\\n    }\\n\\n    /// @notice Transfers tokens using a signed permit messages\\n    /// @param permit The permit data signed over by the owner\\n    /// @param dataHash The EIP-712 hash of permit data to include when checking signature\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param signature The signature to verify\\n    function _permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 dataHash,\\n        bytes calldata signature\\n    ) private {\\n        uint256 numPermitted = permit.permitted.length;\\n\\n        if (block.timestamp > permit.deadline) revert SignatureExpired(permit.deadline);\\n        if (numPermitted != transferDetails.length) revert LengthMismatch();\\n\\n        _useUnorderedNonce(owner, permit.nonce);\\n        signature.verify(_hashTypedData(dataHash), owner);\\n\\n        unchecked {\\n            for (uint256 i = 0; i < numPermitted; ++i) {\\n                TokenPermissions memory permitted = permit.permitted[i];\\n                uint256 requestedAmount = transferDetails[i].requestedAmount;\\n\\n                if (requestedAmount > permitted.amount) revert InvalidAmount(permitted.amount);\\n\\n                if (requestedAmount != 0) {\\n                    // allow spender to specify which of the permitted tokens should be transferred\\n                    ERC20(permitted.token).safeTransferFrom(owner, transferDetails[i].to, requestedAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external {\\n        nonceBitmap[msg.sender][wordPos] |= mask;\\n\\n        emit UnorderedNonceInvalidation(msg.sender, wordPos, mask);\\n    }\\n\\n    /// @notice Returns the index of the bitmap and the bit position within the bitmap. Used for unordered nonces\\n    /// @param nonce The nonce to get the associated word and bit positions\\n    /// @return wordPos The word position or index into the nonceBitmap\\n    /// @return bitPos The bit position\\n    /// @dev The first 248 bits of the nonce value is the index of the desired bitmap\\n    /// @dev The last 8 bits of the nonce value is the position of the bit in the bitmap\\n    function bitmapPositions(uint256 nonce) private pure returns (uint256 wordPos, uint256 bitPos) {\\n        wordPos = uint248(nonce >> 8);\\n        bitPos = uint8(nonce);\\n    }\\n\\n    /// @notice Checks whether a nonce is taken and sets the bit at the bit position in the bitmap at the word position\\n    /// @param from The address to use the nonce at\\n    /// @param nonce The nonce to spend\\n    function _useUnorderedNonce(address from, uint256 nonce) internal {\\n        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);\\n        uint256 bit = 1 << bitPos;\\n        uint256 flipped = nonceBitmap[from][wordPos] ^= bit;\\n\\n        if (flipped & bit == 0) revert InvalidNonce();\\n    }\\n}\\n\",\"keccak256\":\"0xa821caa24d6231fa8befe24a34bfda2c3b05b56e67fb913c86b26a19b19b6bbe\",\"license\":\"MIT\"},\"contracts/permit2/interfaces/IAllowanceTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from \\\"./IEIP712.sol\\\";\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer is IEIP712 {\\n     /// @notice Thrown when an allowance on a token has expired.\\n     /// @param deadline The timestamp at which the allowed amount is no longer valid\\n     error AllowanceExpired(uint256 deadline);\\n\\n     /// @notice Thrown when an allowance on a token has been depleted.\\n     /// @param amount The maximum amount allowed\\n     error InsufficientAllowance(uint256 amount);\\n\\n     /// @notice Thrown when too many nonces are invalidated.\\n     error ExcessiveInvalidation();\\n\\n     /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n     event NonceInvalidation(\\n          address indexed owner,\\n          address indexed token,\\n          address indexed spender,\\n          uint48 newNonce,\\n          uint48 oldNonce\\n     );\\n\\n     /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n     event Approval(\\n          address indexed owner,\\n          address indexed token,\\n          address indexed spender,\\n          uint160 amount,\\n          uint48 expiration\\n     );\\n\\n     /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n     event Permit(\\n          address indexed owner,\\n          address indexed token,\\n          address indexed spender,\\n          uint160 amount,\\n          uint48 expiration,\\n          uint48 nonce\\n     );\\n\\n     /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n     event Lockdown(address indexed owner, address token, address spender);\\n\\n     /// @notice The permit data for a token\\n     struct PermitDetails {\\n          // ERC20 token address\\n          address token;\\n          // the maximum amount allowed to spend\\n          uint160 amount;\\n          // timestamp at which a spender's token allowances become invalid\\n          uint48 expiration;\\n          // an incrementing value indexed per owner,token,and spender for each signature\\n          uint48 nonce;\\n     }\\n\\n     /// @notice The permit message signed for a single token allownce\\n     struct PermitSingle {\\n          // the permit data for a single token alownce\\n          PermitDetails details;\\n          // address permissioned on the allowed tokens\\n          address spender;\\n          // deadline on the permit signature\\n          uint256 sigDeadline;\\n     }\\n\\n     /// @notice The permit message signed for multiple token allowances\\n     struct PermitBatch {\\n          // the permit data for multiple token allowances\\n          PermitDetails[] details;\\n          // address permissioned on the allowed tokens\\n          address spender;\\n          // deadline on the permit signature\\n          uint256 sigDeadline;\\n     }\\n\\n     /// @notice The saved permissions\\n     /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n     /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n     struct PackedAllowance {\\n          // amount allowed\\n          uint160 amount;\\n          // permission expiry\\n          uint48 expiration;\\n          // an incrementing value indexed per owner,token,and spender for each signature\\n          uint48 nonce;\\n     }\\n\\n     /// @notice A token spender pair.\\n     struct TokenSpenderPair {\\n          // the token the spender is approved\\n          address token;\\n          // the spender address\\n          address spender;\\n     }\\n\\n     /// @notice Details for a token transfer.\\n     struct AllowanceTransferDetails {\\n          // the owner of the token\\n          address from;\\n          // the recipient of the token\\n          address to;\\n          // the amount of the token\\n          uint160 amount;\\n          // the token to be transferred\\n          address token;\\n     }\\n\\n     /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n     /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n     /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n     function allowance(\\n          address user,\\n          address token,\\n          address spender\\n     ) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n     /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n     /// @param token The token to approve\\n     /// @param spender The spender address to approve\\n     /// @param amount The approved amount of the token\\n     /// @param expiration The timestamp at which the approval is no longer valid\\n     /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n     /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n     function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n     /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n     /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n     /// @param owner The owner of the tokens being approved\\n     /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n     /// @param signature The owner's signature over the permit data\\n     function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n     /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n     /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n     /// @param owner The owner of the tokens being approved\\n     /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n     /// @param signature The owner's signature over the permit data\\n     function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n     /// @notice Transfer approved tokens from one address to another\\n     /// @param from The address to transfer from\\n     /// @param to The address of the recipient\\n     /// @param amount The amount of the token to transfer\\n     /// @param token The token address to transfer\\n     /// @dev Requires the from address to have approved at least the desired amount\\n     /// of tokens to msg.sender.\\n     function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n     /// @notice Transfer approved tokens in a batch\\n     /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n     /// @dev Requires the from addresses to have approved at least the desired amount\\n     /// of tokens to msg.sender.\\n     function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n     /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n     /// by batch revoking approvals\\n     /// @param approvals Array of approvals to revoke.\\n     function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n     /// @notice Invalidate nonces for a given (token, spender) pair\\n     /// @param token The token to invalidate nonces for\\n     /// @param spender The spender to invalidate nonces for\\n     /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n     /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n     function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\",\"keccak256\":\"0xac2e758ee970f6c379c8ff3df76a91a1a81f18047c24524566549a0d77ec6f36\",\"license\":\"MIT\"},\"contracts/permit2/interfaces/IEIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEIP712 {\\n      function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4529c2e108b983d413eeb8ff1adadab83f5874d95348477d698525abd252431d\",\"license\":\"MIT\"},\"contracts/permit2/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC1271 {\\n      /// @dev Should return whether the signature provided is valid for the provided data\\n      /// @param hash      Hash of the data to be signed\\n      /// @param signature Signature byte array associated with _data\\n      /// @return magicValue The bytes4 magic value 0x1626ba7e\\n      function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xf3966eba8941c2c0b4b52d704decb3eadedabd4e437902dec61e2ab3102b7c63\",\"license\":\"MIT\"},\"contracts/permit2/interfaces/ISignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from \\\"./IEIP712.sol\\\";\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n     /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n     /// @param maxAmount The maximum amount a spender can request to transfer\\n     error InvalidAmount(uint256 maxAmount);\\n\\n     /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n     /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n     error LengthMismatch();\\n\\n     /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n     event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n     /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n     struct TokenPermissions {\\n          // ERC20 token address\\n          address token;\\n          // the maximum amount that can be spent\\n          uint256 amount;\\n     }\\n\\n     /// @notice The signed permit message for a single token transfer\\n     struct PermitTransferFrom {\\n          TokenPermissions permitted;\\n          // a unique value for every token owner's signature to prevent signature replays\\n          uint256 nonce;\\n          // deadline on the permit signature\\n          uint256 deadline;\\n     }\\n\\n     /// @notice Specifies the recipient address and amount for batched transfers.\\n     /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n     /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n     struct SignatureTransferDetails {\\n          // recipient address\\n          address to;\\n          // spender requested amount\\n          uint256 requestedAmount;\\n     }\\n\\n     /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n     /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n     /// @dev Note that a user still signs over a spender address\\n     struct PermitBatchTransferFrom {\\n          // the tokens and corresponding amounts permitted for a transfer\\n          TokenPermissions[] permitted;\\n          // a unique value for every token owner's signature to prevent signature replays\\n          uint256 nonce;\\n          // deadline on the permit signature\\n          uint256 deadline;\\n     }\\n\\n     /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n     /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n     /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n     /// @dev It returns a uint256 bitmap\\n     /// @dev The index, or wordPosition is capped at type(uint248).max\\n     function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n     /// @notice Transfers a token using a signed permit message\\n     /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails The spender's requested transfer details for the permitted token\\n     /// @param signature The signature to verify\\n     function permitTransferFrom(\\n          PermitTransferFrom memory permit,\\n          SignatureTransferDetails calldata transferDetails,\\n          address owner,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Transfers a token using a signed permit message\\n     /// @notice Includes extra data provided by the caller to verify signature over\\n     /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n     /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails The spender's requested transfer details for the permitted token\\n     /// @param witness Extra data to include when checking the user signature\\n     /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n     /// @param signature The signature to verify\\n     function permitWitnessTransferFrom(\\n          PermitTransferFrom memory permit,\\n          SignatureTransferDetails calldata transferDetails,\\n          address owner,\\n          bytes32 witness,\\n          string calldata witnessTypeString,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Transfers multiple tokens using a signed permit message\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n     /// @param signature The signature to verify\\n     function permitTransferFrom(\\n          PermitBatchTransferFrom memory permit,\\n          SignatureTransferDetails[] calldata transferDetails,\\n          address owner,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Transfers multiple tokens using a signed permit message\\n     /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n     /// @notice Includes extra data provided by the caller to verify signature over\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n     /// @param witness Extra data to include when checking the user signature\\n     /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n     /// @param signature The signature to verify\\n     function permitWitnessTransferFrom(\\n          PermitBatchTransferFrom memory permit,\\n          SignatureTransferDetails[] calldata transferDetails,\\n          address owner,\\n          bytes32 witness,\\n          string calldata witnessTypeString,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n     /// @dev The wordPos is maxed at type(uint248).max\\n     /// @param wordPos A number to index the nonceBitmap at\\n     /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n     function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\",\"keccak256\":\"0xaf3bdc95e414e6546d877bc887d7f5c9610d07c94c5f509f4a0ba4d0c0bafde9\",\"license\":\"MIT\"},\"contracts/permit2/libraries/Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAllowanceTransfer} from \\\"../interfaces/IAllowanceTransfer.sol\\\";\\n\\nlibrary Allowance {\\n    // note if the expiration passed is 0, then it the approval set to the block.timestamp\\n    uint256 private constant BLOCK_TIMESTAMP_EXPIRATION = 0;\\n\\n    /// @notice Sets the allowed amount, expiry, and nonce of the spender's permissions on owner's token.\\n    /// @dev Nonce is incremented.\\n    /// @dev If the inputted expiration is 0, the stored expiration is set to block.timestamp\\n    function updateAll(\\n        IAllowanceTransfer.PackedAllowance storage allowed,\\n        uint160 amount,\\n        uint48 expiration,\\n        uint48 nonce\\n    ) internal {\\n        uint48 storedNonce;\\n        unchecked {\\n            storedNonce = nonce + 1;\\n        }\\n\\n        uint48 storedExpiration = expiration == BLOCK_TIMESTAMP_EXPIRATION ? uint48(block.timestamp) : expiration;\\n\\n        uint256 word = pack(amount, storedExpiration, storedNonce);\\n        assembly {\\n            sstore(allowed.slot, word)\\n        }\\n    }\\n\\n    /// @notice Sets the allowed amount and expiry of the spender's permissions on owner's token.\\n    /// @dev Nonce does not need to be incremented.\\n    function updateAmountAndExpiration(\\n        IAllowanceTransfer.PackedAllowance storage allowed,\\n        uint160 amount,\\n        uint48 expiration\\n    ) internal {\\n        // If the inputted expiration is 0, the allowance only lasts the duration of the block.\\n        allowed.expiration = expiration == 0 ? uint48(block.timestamp) : expiration;\\n        allowed.amount = amount;\\n    }\\n\\n    /// @notice Computes the packed slot of the amount, expiration, and nonce that make up PackedAllowance\\n    function pack(uint160 amount, uint48 expiration, uint48 nonce) internal pure returns (uint256 word) {\\n        word = (uint256(nonce) << 208) | uint256(expiration) << 160 | amount;\\n    }\\n}\\n\",\"keccak256\":\"0x65ee20fb1a77d4e25dff2feb84027ff9096b065b6fc064c80f9eee49f1f9d498\",\"license\":\"MIT\"},\"contracts/permit2/libraries/PermitHash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAllowanceTransfer} from \\\"../interfaces/IAllowanceTransfer.sol\\\";\\nimport {ISignatureTransfer} from \\\"../interfaces/ISignatureTransfer.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary PermitHash {\\n      bytes32 public constant _PERMIT_DETAILS_TYPEHASH =\\n            keccak256(\\\"PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\");\\n\\n      bytes32 public constant _PERMIT_SINGLE_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitSingle(PermitDetails details,address spender,uint256 sigDeadline)PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\"\\n            );\\n\\n      bytes32 public constant _PERMIT_BATCH_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitBatch(PermitDetails[] details,address spender,uint256 sigDeadline)PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\"\\n            );\\n\\n      bytes32 public constant _TOKEN_PERMISSIONS_TYPEHASH = keccak256(\\\"TokenPermissions(address token,uint256 amount)\\\");\\n\\n      bytes32 public constant _PERMIT_TRANSFER_FROM_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)\\\"\\n            );\\n\\n      bytes32 public constant _PERMIT_BATCH_TRANSFER_FROM_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitBatchTransferFrom(TokenPermissions[] permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)\\\"\\n            );\\n\\n      string public constant _TOKEN_PERMISSIONS_TYPESTRING = \\\"TokenPermissions(address token,uint256 amount)\\\";\\n\\n      string public constant _PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB =\\n            \\\"PermitWitnessTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline,\\\";\\n\\n      string public constant _PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB =\\n            \\\"PermitBatchWitnessTransferFrom(TokenPermissions[] permitted,address spender,uint256 nonce,uint256 deadline,\\\";\\n\\n      function hash(IAllowanceTransfer.PermitSingle memory permitSingle) internal pure returns (bytes32) {\\n            bytes32 permitHash = _hashPermitDetails(permitSingle.details);\\n            return\\n                  keccak256(\\n                        abi.encode(_PERMIT_SINGLE_TYPEHASH, permitHash, permitSingle.spender, permitSingle.sigDeadline)\\n                  );\\n      }\\n\\n      function hash(IAllowanceTransfer.PermitBatch memory permitBatch) internal pure returns (bytes32) {\\n            uint256 numPermits = permitBatch.details.length;\\n            bytes32[] memory permitHashes = new bytes32[](numPermits);\\n            for (uint256 i = 0; i < numPermits; ++i) {\\n                  permitHashes[i] = _hashPermitDetails(permitBatch.details[i]);\\n            }\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              _PERMIT_BATCH_TYPEHASH,\\n                              keccak256(abi.encodePacked(permitHashes)),\\n                              permitBatch.spender,\\n                              permitBatch.sigDeadline\\n                        )\\n                  );\\n      }\\n\\n      function hash(ISignatureTransfer.PermitTransferFrom memory permit) internal view returns (bytes32) {\\n            bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              _PERMIT_TRANSFER_FROM_TYPEHASH,\\n                              tokenPermissionsHash,\\n                              msg.sender,\\n                              permit.nonce,\\n                              permit.deadline\\n                        )\\n                  );\\n      }\\n\\n      function hash(ISignatureTransfer.PermitBatchTransferFrom memory permit) internal view returns (bytes32) {\\n            uint256 numPermitted = permit.permitted.length;\\n            bytes32[] memory tokenPermissionHashes = new bytes32[](numPermitted);\\n\\n            for (uint256 i = 0; i < numPermitted; ++i) {\\n                  tokenPermissionHashes[i] = _hashTokenPermissions(permit.permitted[i]);\\n            }\\n\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              _PERMIT_BATCH_TRANSFER_FROM_TYPEHASH,\\n                              keccak256(abi.encodePacked(tokenPermissionHashes)),\\n                              msg.sender,\\n                              permit.nonce,\\n                              permit.deadline\\n                        )\\n                  );\\n      }\\n\\n      function hashWithWitness(\\n            ISignatureTransfer.PermitTransferFrom memory permit,\\n            bytes32 witness,\\n            string calldata witnessTypeString\\n      ) internal view returns (bytes32) {\\n            bytes32 typeHash = keccak256(\\n                  abi.encodePacked(_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB, witnessTypeString)\\n            );\\n\\n            bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n            return\\n                  keccak256(\\n                        abi.encode(typeHash, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline, witness)\\n                  );\\n      }\\n\\n      function hashWithWitness(\\n            ISignatureTransfer.PermitBatchTransferFrom memory permit,\\n            bytes32 witness,\\n            string calldata witnessTypeString\\n      ) internal view returns (bytes32) {\\n            bytes32 typeHash = keccak256(\\n                  abi.encodePacked(_PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB, witnessTypeString)\\n            );\\n\\n            uint256 numPermitted = permit.permitted.length;\\n            bytes32[] memory tokenPermissionHashes = new bytes32[](numPermitted);\\n\\n            for (uint256 i = 0; i < numPermitted; ++i) {\\n                  tokenPermissionHashes[i] = _hashTokenPermissions(permit.permitted[i]);\\n            }\\n\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              typeHash,\\n                              keccak256(abi.encodePacked(tokenPermissionHashes)),\\n                              msg.sender,\\n                              permit.nonce,\\n                              permit.deadline,\\n                              witness\\n                        )\\n                  );\\n      }\\n\\n      function _hashPermitDetails(IAllowanceTransfer.PermitDetails memory details) private pure returns (bytes32) {\\n            return keccak256(abi.encode(_PERMIT_DETAILS_TYPEHASH, details));\\n      }\\n\\n      function _hashTokenPermissions(\\n            ISignatureTransfer.TokenPermissions memory permitted\\n      ) private pure returns (bytes32) {\\n            return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, permitted));\\n      }\\n}\\n\",\"keccak256\":\"0xfd49fe58286881b2e64667eabbeecdaf0d7ebdb5d49678c78a898cd56f19db55\",\"license\":\"MIT\"},\"contracts/permit2/libraries/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC1271} from \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary SignatureVerification {\\n      /// @notice Thrown when the passed in signature is not a valid length\\n      error InvalidSignatureLength();\\n\\n      /// @notice Thrown when the recovered signer is equal to the zero address\\n      error InvalidSignature();\\n\\n      /// @notice Thrown when the recovered signer does not equal the claimedSigner\\n      error InvalidSigner();\\n\\n      /// @notice Thrown when the recovered contract signature is incorrect\\n      error InvalidContractSignature();\\n\\n      bytes32 constant UPPER_BIT_MASK = (0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\n      function verify(bytes calldata signature, bytes32 hash, address claimedSigner) internal view {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n\\n            if (claimedSigner.code.length == 0) {\\n                  if (signature.length == 65) {\\n                        (r, s) = abi.decode(signature, (bytes32, bytes32));\\n                        v = uint8(signature[64]);\\n                  } else if (signature.length == 64) {\\n                        // EIP-2098\\n                        bytes32 vs;\\n                        (r, vs) = abi.decode(signature, (bytes32, bytes32));\\n                        s = vs & UPPER_BIT_MASK;\\n                        v = uint8(uint256(vs >> 255)) + 27;\\n                  } else {\\n                        revert InvalidSignatureLength();\\n                  }\\n                  address signer = ecrecover(hash, v, r, s);\\n                  console.log(signer, claimedSigner, \\\"yyyyyyyyyyyyyyyy\\\");\\n                  if (signer == address(0)) revert InvalidSignature();\\n                  if (signer != claimedSigner) revert InvalidSigner();\\n            } else {\\n                  //  console.log(signer, claimedSigner);\\n                  bytes4 magicValue = IERC1271(claimedSigner).isValidSignature(hash, signature);\\n                  //   console.log(magicValue);\\n\\n                  if (magicValue != IERC1271.isValidSignature.selector) revert InvalidContractSignature();\\n            }\\n      }\\n}\\n\",\"keccak256\":\"0xb06b62b82d12c348d0f98ddf84e9f2073d0f9d20c14a5eb9b54545f3f03887fd\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6ab948013c2c7ca6351e593600425b0ec6df9035320280c678e735bce16e996b\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 6492,
            "contract": "contracts/permit2/Permit2.sol:Permit2",
            "label": "nonceBitmap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 5829,
            "contract": "contracts/permit2/Permit2.sol:Permit2",
            "label": "allowance",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(PackedAllowance)6990_storage)))"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(PackedAllowance)6990_storage)))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => mapping(address => struct IAllowanceTransfer.PackedAllowance)))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_mapping(t_address,t_struct(PackedAllowance)6990_storage))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(PackedAllowance)6990_storage))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => struct IAllowanceTransfer.PackedAllowance))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_struct(PackedAllowance)6990_storage)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_uint256)"
          },
          "t_mapping(t_address,t_struct(PackedAllowance)6990_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct IAllowanceTransfer.PackedAllowance)",
            "numberOfBytes": "32",
            "value": "t_struct(PackedAllowance)6990_storage"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_struct(PackedAllowance)6990_storage": {
            "encoding": "inplace",
            "label": "struct IAllowanceTransfer.PackedAllowance",
            "members": [
              {
                "astId": 6985,
                "contract": "contracts/permit2/Permit2.sol:Permit2",
                "label": "amount",
                "offset": 0,
                "slot": "0",
                "type": "t_uint160"
              },
              {
                "astId": 6987,
                "contract": "contracts/permit2/Permit2.sol:Permit2",
                "label": "expiration",
                "offset": 20,
                "slot": "0",
                "type": "t_uint48"
              },
              {
                "astId": 6989,
                "contract": "contracts/permit2/Permit2.sol:Permit2",
                "label": "nonce",
                "offset": 26,
                "slot": "0",
                "type": "t_uint48"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint160": {
            "encoding": "inplace",
            "label": "uint160",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint48": {
            "encoding": "inplace",
            "label": "uint48",
            "numberOfBytes": "6"
          }
        }
      },
      "userdoc": {
        "errors": {
          "AllowanceExpired(uint256)": [
            {
              "notice": "Thrown when an allowance on a token has expired."
            }
          ],
          "ExcessiveInvalidation()": [
            {
              "notice": "Thrown when too many nonces are invalidated."
            }
          ],
          "InsufficientAllowance(uint256)": [
            {
              "notice": "Thrown when an allowance on a token has been depleted."
            }
          ],
          "InvalidAmount(uint256)": [
            {
              "notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
            }
          ],
          "InvalidContractSignature()": [
            {
              "notice": "Thrown when the recovered contract signature is incorrect"
            }
          ],
          "InvalidNonce()": [
            {
              "notice": "Thrown when validating that the inputted nonce has not been used"
            }
          ],
          "InvalidSignature()": [
            {
              "notice": "Thrown when the recovered signer is equal to the zero address"
            }
          ],
          "InvalidSignatureLength()": [
            {
              "notice": "Thrown when the passed in signature is not a valid length"
            }
          ],
          "InvalidSigner()": [
            {
              "notice": "Thrown when the recovered signer does not equal the claimedSigner"
            }
          ],
          "LengthMismatch()": [
            {
              "notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
            }
          ],
          "SignatureExpired(uint256)": [
            {
              "notice": "Thrown when validating an inputted signature that is stale"
            }
          ]
        },
        "events": {
          "Approval(address,address,address,uint160,uint48)": {
            "notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
          },
          "Lockdown(address,address,address)": {
            "notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
          },
          "NonceInvalidation(address,address,address,uint48,uint48)": {
            "notice": "Emits an event when the owner successfully invalidates an ordered nonce."
          },
          "Permit(address,address,address,uint160,uint48,uint48)": {
            "notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
          },
          "UnorderedNonceInvalidation(address,uint256,uint256)": {
            "notice": "Emits an event when the owner successfully invalidates an unordered nonce."
          }
        },
        "kind": "user",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "notice": "Returns the domain separator for the current chain."
          },
          "allowance(address,address,address)": {
            "notice": "Maps users to tokens to spender addresses and information about the approval on the token"
          },
          "approve(address,address,uint160,uint48)": {
            "notice": "Approves the spender to use up to amount of the specified token up until the expiration"
          },
          "invalidateNonces(address,address,uint48)": {
            "notice": "Invalidate nonces for a given (token, spender) pair"
          },
          "invalidateUnorderedNonces(uint256,uint256)": {
            "notice": "Invalidates the bits specified in mask for the bitmap at the word position"
          },
          "lockdown((address,address)[])": {
            "notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
          },
          "nonceBitmap(address,uint256)": {
            "notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
          },
          "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
            "notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
          },
          "permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
            "notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
          },
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
            "notice": "Transfers a token using a signed permit message"
          },
          "permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
            "notice": "Transfers multiple tokens using a signed permit message"
          },
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
            "notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
          },
          "permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
            "notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
          },
          "transferFrom((address,address,uint160,address)[])": {
            "notice": "Transfer approved tokens in a batch"
          },
          "transferFrom(address,address,uint160,address)": {
            "notice": "Transfer approved tokens from one address to another"
          }
        },
        "notice": "Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1967.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/presets/ERC20PresetFixedSupply.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - Preminted initial supply\\n *  - Ability for holders to burn (destroy) their tokens\\n *  - No access control mechanism (for minting/pausing) and hence no governance\\n *\\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\\n * its documentation for details.\\n *\\n * _Available since v3.4._\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetFixedSupply is ERC20Burnable {\\n    /**\\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol, uint256 initialSupply, address owner) ERC20(name, symbol) {\\n        _mint(owner, initialSupply);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n     /**\\n      * @dev Returns true if `account` is a contract.\\n      *\\n      * [IMPORTANT]\\n      * ====\\n      * It is unsafe to assume that an address for which this function returns\\n      * false is an externally-owned account (EOA) and not a contract.\\n      *\\n      * Among others, `isContract` will return false for the following\\n      * types of addresses:\\n      *\\n      *  - an externally-owned account\\n      *  - a contract in construction\\n      *  - an address where a contract will be created\\n      *  - an address where a contract lived, but was destroyed\\n      *\\n      * Furthermore, `isContract` will also return true if the target contract within\\n      * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n      * which only has an effect at the end of a transaction.\\n      * ====\\n      *\\n      * [IMPORTANT]\\n      * ====\\n      * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n      *\\n      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n      * constructor.\\n      * ====\\n      */\\n     function isContract(address account) internal view returns (bool) {\\n          // This method relies on extcodesize/address.code.length, which returns 0\\n          // for contracts in construction, since the code is only stored at the end\\n          // of the constructor execution.\\n\\n          return account.code.length > 0;\\n     }\\n\\n     /**\\n      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n      * `recipient`, forwarding all available gas and reverting on errors.\\n      *\\n      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n      * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n      * imposed by `transfer`, making them unable to receive funds via\\n      * `transfer`. {sendValue} removes this limitation.\\n      *\\n      * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n      *\\n      * IMPORTANT: because control is transferred to `recipient`, care must be\\n      * taken to not create reentrancy vulnerabilities. Consider using\\n      * {ReentrancyGuard} or the\\n      * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n      */\\n     function sendValue(address payable recipient, uint256 amount) internal {\\n          require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n          (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n          require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n     }\\n\\n     /**\\n      * @dev Performs a Solidity function call using a low level `call`. A\\n      * plain `call` is an unsafe replacement for a function call: use this\\n      * function instead.\\n      *\\n      * If `target` reverts with a revert reason, it is bubbled up by this\\n      * function (like regular Solidity function calls).\\n      *\\n      * Returns the raw returned data. To convert to the expected return value,\\n      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n      *\\n      * Requirements:\\n      *\\n      * - `target` must be a contract.\\n      * - calling `target` with `data` must not revert.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n          return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n      * `errorMessage` as a fallback revert reason when `target` reverts.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCall(\\n          address target,\\n          bytes memory data,\\n          string memory errorMessage\\n     ) internal returns (bytes memory) {\\n          return functionCallWithValue(target, data, 0, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n      * but also transferring `value` wei to `target`.\\n      *\\n      * Requirements:\\n      *\\n      * - the calling contract must have an ETH balance of at least `value`.\\n      * - the called Solidity function must be `payable`.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n          return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n      * with `errorMessage` as a fallback revert reason when `target` reverts.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCallWithValue(\\n          address target,\\n          bytes memory data,\\n          uint256 value,\\n          string memory errorMessage\\n     ) internal returns (bytes memory) {\\n          require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n          (bool success, bytes memory returndata) = target.call{value: value}(data);\\n          return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n      * but performing a static call.\\n      *\\n      * _Available since v3.3._\\n      */\\n     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n          return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n      * but performing a static call.\\n      *\\n      * _Available since v3.3._\\n      */\\n     function functionStaticCall(\\n          address target,\\n          bytes memory data,\\n          string memory errorMessage\\n     ) internal view returns (bytes memory) {\\n          (bool success, bytes memory returndata) = target.staticcall(data);\\n          return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n      * but performing a delegate call.\\n      *\\n      * _Available since v3.4._\\n      */\\n     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n          return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n      * but performing a delegate call.\\n      *\\n      * _Available since v3.4._\\n      */\\n     function functionDelegateCall(\\n          address target,\\n          bytes memory data,\\n          string memory errorMessage\\n     ) internal returns (bytes memory) {\\n          (bool success, bytes memory returndata) = target.delegatecall(data);\\n          return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n      * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n      *\\n      * _Available since v4.8._\\n      */\\n     function verifyCallResultFromTarget(\\n          address target,\\n          bool success,\\n          bytes memory returndata,\\n          string memory errorMessage\\n     ) internal view returns (bytes memory) {\\n          if (success) {\\n               if (returndata.length == 0) {\\n                    // only check isContract if the call was successful and the return data is empty\\n                    // otherwise we already know that it was a contract\\n                    require(isContract(target), \\\"Address: call to non-contract\\\");\\n               }\\n               return returndata;\\n          } else {\\n               _revert(returndata, errorMessage);\\n          }\\n     }\\n\\n     /**\\n      * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n      * revert reason or using the provided one.\\n      *\\n      * _Available since v4.3._\\n      */\\n     function verifyCallResult(\\n          bool success,\\n          bytes memory returndata,\\n          string memory errorMessage\\n     ) internal pure returns (bytes memory) {\\n          if (success) {\\n               return returndata;\\n          } else {\\n               _revert(returndata, errorMessage);\\n          }\\n     }\\n\\n     function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n          // Look for revert reason and bubble it up if present\\n          if (returndata.length > 0) {\\n               // The easiest way to bubble the revert reason is using memory via assembly\\n               /// @solidity memory-safe-assembly\\n               assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n               }\\n          } else {\\n               revert(errorMessage);\\n          }\\n     }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the PancakeSwap V3 Factory\\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\\ninterface IPancakeV3Factory {\\n    struct TickSpacingExtraInfo {\\n        bool whitelistRequested;\\n        bool enabled;\\n    }\\n\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    event FeeAmountExtraInfoUpdated(uint24 indexed fee, bool whitelistRequested, bool enabled);\\n\\n    event WhiteListAdded(address indexed user, bool verified);\\n\\n    /// @notice Emitted when LM pool deployer is set\\n    event SetLmPoolDeployer(address indexed lmPoolDeployer);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the tick spacing extra info\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return whitelistRequested The flag whether should be created by white list users only\\n    function feeAmountTickSpacingExtraInfo(uint24 fee) external view returns (bool whitelistRequested, bool enabled);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n\\n    /// @notice Set an address into white list\\n    /// @dev Address can be updated by owner with boolean value false\\n    /// @param user The user address that add into white list\\n    function setWhiteListAddress(address user, bool verified) external;\\n\\n    /// @notice Set a fee amount extra info\\n    /// @dev Fee amounts can be updated by owner with extra info\\n    /// @param whitelistRequested The flag whether should be created by owner only\\n    /// @param enabled The flag is the fee is enabled or not\\n    function setFeeAmountExtraInfo(\\n        uint24 fee,\\n        bool whitelistRequested,\\n        bool enabled\\n    ) external;\\n\\n    function setLmPoolDeployer(address _lmPoolDeployer) external;\\n\\n    function setFeeProtocol(address pool, uint32 feeProtocol0, uint32 feeProtocol1) external;\\n\\n    function collectProtocol(\\n        address pool,\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    function setLmPool(address pool, address lmPool) external;\\n}\\n\"\n    },\n    \"contracts/ECDSAWallet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n// pragma experimental ABIEncoderV2;\\n\\nimport \\\"./SmartWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ECDSAWallet is SmartWallet {\\n     using ECDSAUpgradeable for bytes32;\\n     bytes32 private constant ECDSA_WALLET_STORAGE_POSITION = keccak256(\\\"wallet.ecdsa.v1\\\");\\n\\n     struct ECDSAWalletState {\\n          address owner;\\n          uint96 nonce;\\n          mapping(uint256 => TradeInfo) walletTrades;\\n     }\\n\\n     bytes32 private constant HASHED_NAME = keccak256(bytes(\\\"ECDSAWallet\\\"));\\n     bytes32 private constant HASHED_VERSION = keccak256(bytes(\\\"0.0.1\\\"));\\n     bytes32 private constant TYPE_HASH =\\n          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n     bytes32 private constant UserOp_TYPE_HASH = keccak256(\\\"UserOp(address to,uint256 amount,bytes data)\\\");\\n\\n     bytes32 private constant _TYPEHASH =\\n          keccak256(\\n               \\\"ECDSAExec(UserOp[] userOps,uint256 nonce,uint256 chainID,uint256 sigChainID)UserOp(address to,uint256 amount,bytes data)\\\"\\n          );\\n\\n     function domainSeperator(uint256 _chainID) public view returns (bytes32) {\\n          return keccak256(abi.encode(TYPE_HASH, HASHED_NAME, HASHED_VERSION, _chainID, address(this)));\\n     }\\n\\n     function __ECDSAWallet_init(address _owner) public initializer {\\n          __SmartWallet_init_unchained();\\n          __ECDSAWallet_init_unchained(_owner);\\n     }\\n\\n     function __ECDSAWallet_init_unchained(address _owner) internal onlyInitializing {\\n          state().owner = _owner;\\n     }\\n\\n     function state() internal pure returns (ECDSAWalletState storage s) {\\n          bytes32 position = ECDSA_WALLET_STORAGE_POSITION;\\n          assembly {\\n               s.slot := position\\n          }\\n     }\\n\\n     function owner() external view returns (address) {\\n          return state().owner;\\n     }\\n\\n     //      function permit2() public view virtual override returns (address) {\\n     //           return state().permit2;\\n     //      }\\n\\n     function getTradeDetails(uint256 _nonce) public view override returns (TradeInfo memory) {\\n          return state().walletTrades[_nonce];\\n     }\\n\\n     function nonce() public view virtual override returns (uint256) {\\n          return state().nonce;\\n     }\\n\\n     function addNewTradeDetails(\\n          address _token0,\\n          address _token1,\\n          address _feeToken,\\n          uint256 _amountIn,\\n          uint256 _gasPrice\\n     ) internal override {\\n          state().walletTrades[nonce()] = TradeInfo(_token0, _token1, _feeToken, _amountIn, _gasPrice);\\n     }\\n\\n     function _incrementNonce() internal override {\\n          state().nonce++;\\n     }\\n\\n     function hash(UserOp[] memory _userOps) internal pure returns (bytes32) {\\n          bytes32[] memory opHashes = new bytes32[](_userOps.length);\\n          for (uint i = 0; i < _userOps.length; i++) {\\n               opHashes[i] = keccak256(\\n                    abi.encode(UserOp_TYPE_HASH, _userOps[i].to, _userOps[i].amount, keccak256(_userOps[i].data))\\n               );\\n          }\\n          return keccak256(abi.encodePacked(opHashes));\\n     }\\n\\n     function _verify(UserOp[] memory _userOps, bytes memory _signature) internal view override returns (address) {\\n          (uint256 _sigChainID, bytes memory _sig) = abi.decode(_signature, (uint256, bytes));\\n          address signer = domainSeperator(_sigChainID)\\n               .toTypedDataHash(keccak256(abi.encode(_TYPEHASH, hash(_userOps), nonce(), block.chainid, _sigChainID)))\\n               .recover(_sig);\\n          require(state().owner == signer, \\\"ECDSAWallet: failed to verify signature\\\");\\n          return signer;\\n     }\\n}\\n\"\n    },\n    \"contracts/ECDSAWalletFactory.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"./ECDSAWallet.sol\\\";\\nimport \\\"./SmartWalletFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ECDSAWalletFactory is Ownable {\\n     SmartWalletFactory factory;\\n     ECDSAWallet wallet;\\n\\n     using ECDSAUpgradeable for bytes32;\\n\\n     constructor(SmartWalletFactory _factory) {\\n          wallet = new ECDSAWallet();\\n          wallet.__ECDSAWallet_init(address(0));\\n\\n          factory = _factory;\\n     }\\n\\n     function createWallet(address _owner) external payable returns (IWallet) {\\n          return\\n               factory.createWallet{value: msg.value}(\\n                    address(wallet),\\n                    abi.encodeWithSelector(ECDSAWallet.__ECDSAWallet_init.selector, _owner)\\n               );\\n     }\\n\\n     function walletAddress(address _owner, uint256 _nonce) public view returns (address) {\\n          return\\n               factory.walletAddress(\\n                    address(wallet),\\n                    abi.encodeWithSelector(ECDSAWallet.__ECDSAWallet_init.selector, _owner),\\n                    _nonce\\n               );\\n     }\\n}\\n\"\n    },\n    \"contracts/IWallet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\nimport {IAllowanceTransfer} from \\\"./permit2/interfaces/IAllowanceTransfer.sol\\\";\\nimport {IPermit2} from \\\"./permit2/interfaces/IPermit2.sol\\\";\\n\\ninterface IWallet {\\n     event LogReceivedEther(address indexed _from, uint256 _amount);\\n     event LogCall(address indexed _contract, uint256 _value, bytes _data);\\n\\n     struct UserOp {\\n          address to;\\n          uint256 amount;\\n          bytes data;\\n     }\\n\\n     struct TradeInfo {\\n          address _token0;\\n          address _token1;\\n          address _feeToken;\\n          uint256 _amountIn;\\n          uint256 _gasPrice;\\n     }\\n\\n     function deposit(\\n          uint256 _amount,\\n          address _token,\\n          address _feeAsset,\\n          address _outputToken,\\n          address _user,\\n          address _permit2A,\\n          IAllowanceTransfer.PermitBatch calldata _permit,\\n          uint256 _gasPrice,\\n          bytes calldata _signature\\n     ) external;\\n\\n     receive() external payable;\\n\\n     function nonce() external view returns (uint256);\\n\\n     function getTradeDetails(uint256 _nonce) external view returns (TradeInfo memory);\\n\\n     function exec(UserOp[] calldata userOps, bytes memory _signature, address weth, address pancakeFactory) external;\\n}\\n\"\n    },\n    \"contracts/IWalletFactory.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IWallet.sol\\\";\\n\\ninterface IWalletFactory {\\n     function createWallet(address _impl, bytes memory _call) external payable returns (IWallet);\\n\\n     function walletAddress(address _impl, bytes memory _call, uint256 _nonce) external view returns (address);\\n}\\n\"\n    },\n    \"contracts/permit2/AllowanceTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {PermitHash} from \\\"./libraries/PermitHash.sol\\\";\\nimport {SignatureVerification} from \\\"./libraries/SignatureVerification.sol\\\";\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\nimport {IAllowanceTransfer} from \\\"../permit2/interfaces/IAllowanceTransfer.sol\\\";\\nimport {SignatureExpired, InvalidNonce} from \\\"./PermitErrors.sol\\\";\\nimport {Allowance} from \\\"./libraries/Allowance.sol\\\";\\n\\ncontract AllowanceTransfer is IAllowanceTransfer, EIP712 {\\n     using SignatureVerification for bytes;\\n     using SafeTransferLib for ERC20;\\n     using PermitHash for PermitSingle;\\n     using PermitHash for PermitBatch;\\n     using Allowance for PackedAllowance;\\n\\n     /// @notice Maps users to tokens to spender addresses and information about the approval on the token\\n     /// @dev Indexed in the order of token owner address, token address, spender address\\n     /// @dev The stored word saves the allowed amount, expiration on the allowance, and nonce\\n     mapping(address => mapping(address => mapping(address => PackedAllowance))) public allowance;\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function approve(address token, address spender, uint160 amount, uint48 expiration) external {\\n          PackedAllowance storage allowed = allowance[msg.sender][token][spender];\\n          allowed.updateAmountAndExpiration(amount, expiration);\\n          emit Approval(msg.sender, token, spender, amount, expiration);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external {\\n          if (block.timestamp > permitSingle.sigDeadline) revert SignatureExpired(permitSingle.sigDeadline);\\n\\n          // Verify the signer address from the signature.\\n          signature.verify(_hashTypedData(permitSingle.hash()), owner);\\n\\n          _updateApproval(permitSingle.details, owner, permitSingle.spender);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external {\\n          if (block.timestamp > permitBatch.sigDeadline) revert SignatureExpired(permitBatch.sigDeadline);\\n\\n          // Verify the signer address from the signature.\\n          signature.verify(_hashTypedData(permitBatch.hash()), owner);\\n\\n          address spender = permitBatch.spender;\\n          unchecked {\\n               uint256 length = permitBatch.details.length;\\n               for (uint256 i = 0; i < length; ++i) {\\n                    _updateApproval(permitBatch.details[i], owner, spender);\\n               }\\n          }\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function transferFrom(address from, address to, uint160 amount, address token) external {\\n          _transfer(from, to, amount, token);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external {\\n          unchecked {\\n               uint256 length = transferDetails.length;\\n               for (uint256 i = 0; i < length; ++i) {\\n                    AllowanceTransferDetails memory transferDetail = transferDetails[i];\\n                    _transfer(transferDetail.from, transferDetail.to, transferDetail.amount, transferDetail.token);\\n               }\\n          }\\n     }\\n\\n     /// @notice Internal function for transferring tokens using stored allowances\\n     /// @dev Will fail if the allowed timeframe has passed\\n     function _transfer(address from, address to, uint160 amount, address token) private {\\n          PackedAllowance storage allowed = allowance[from][token][msg.sender];\\n\\n          if (block.timestamp > allowed.expiration) revert AllowanceExpired(allowed.expiration);\\n\\n          uint256 maxAmount = allowed.amount;\\n          if (maxAmount != type(uint160).max) {\\n               if (amount > maxAmount) {\\n                    revert InsufficientAllowance(maxAmount);\\n               } else {\\n                    unchecked {\\n                         allowed.amount = uint160(maxAmount) - amount;\\n                    }\\n               }\\n          }\\n\\n          // Transfer the tokens from the from address to the recipient.\\n          ERC20(token).safeTransferFrom(from, to, amount);\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function lockdown(TokenSpenderPair[] calldata approvals) external {\\n          address owner = msg.sender;\\n          // Revoke allowances for each pair of spenders and tokens.\\n          unchecked {\\n               uint256 length = approvals.length;\\n               for (uint256 i = 0; i < length; ++i) {\\n                    address token = approvals[i].token;\\n                    address spender = approvals[i].spender;\\n\\n                    allowance[owner][token][spender].amount = 0;\\n                    emit Lockdown(owner, token, spender);\\n               }\\n          }\\n     }\\n\\n     /// @inheritdoc IAllowanceTransfer\\n     function invalidateNonces(address token, address spender, uint48 newNonce) external {\\n          uint48 oldNonce = allowance[msg.sender][token][spender].nonce;\\n\\n          if (newNonce <= oldNonce) revert InvalidNonce();\\n\\n          // Limit the amount of nonces that can be invalidated in one transaction.\\n          unchecked {\\n               uint48 delta = newNonce - oldNonce;\\n               if (delta > type(uint16).max) revert ExcessiveInvalidation();\\n          }\\n\\n          allowance[msg.sender][token][spender].nonce = newNonce;\\n          emit NonceInvalidation(msg.sender, token, spender, newNonce, oldNonce);\\n     }\\n\\n     /// @notice Sets the new values for amount, expiration, and nonce.\\n     /// @dev Will check that the signed nonce is equal to the current nonce and then incrememnt the nonce value by 1.\\n     /// @dev Emits a Permit event.\\n     function _updateApproval(PermitDetails memory details, address owner, address spender) private {\\n          uint48 nonce = details.nonce;\\n          address token = details.token;\\n          uint160 amount = details.amount;\\n          uint48 expiration = details.expiration;\\n          PackedAllowance storage allowed = allowance[owner][token][spender];\\n\\n          if (allowed.nonce != nonce) revert InvalidNonce();\\n\\n          allowed.updateAll(amount, expiration, nonce);\\n          emit Permit(owner, token, spender, amount, expiration, nonce);\\n     }\\n}\\n\"\n    },\n    \"contracts/permit2/EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IEIP712} from \\\"./interfaces/IEIP712.sol\\\";\\n\\n/// @notice EIP712 helpers for permit2\\n/// @dev Maintains cross-chain replay protection in the event of a fork\\n/// @dev Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol\\ncontract EIP712 is IEIP712 {\\n    // Cache the domain separator as an immutable value, but also store the chain id that it\\n    // corresponds to, in order to invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private constant _HASHED_NAME = keccak256(\\\"Permit2\\\");\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    constructor() {\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Returns the domain separator for the current chain.\\n    /// @dev Uses cached version if chainid and address are unchanged from construction.\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return block.chainid == _CACHED_CHAIN_ID\\n            ? _CACHED_DOMAIN_SEPARATOR\\n            : _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Builds a domain separator using the current chainId and contract address.\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 nameHash) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, block.chainid, address(this)));\\n    }\\n\\n    /// @notice Creates an EIP-712 typed data hash\\n    function _hashTypedData(bytes32 dataHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), dataHash));\\n    }\\n}\\n\"\n    },\n    \"contracts/permit2/interfaces/IAllowanceTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from \\\"./IEIP712.sol\\\";\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer is IEIP712 {\\n     /// @notice Thrown when an allowance on a token has expired.\\n     /// @param deadline The timestamp at which the allowed amount is no longer valid\\n     error AllowanceExpired(uint256 deadline);\\n\\n     /// @notice Thrown when an allowance on a token has been depleted.\\n     /// @param amount The maximum amount allowed\\n     error InsufficientAllowance(uint256 amount);\\n\\n     /// @notice Thrown when too many nonces are invalidated.\\n     error ExcessiveInvalidation();\\n\\n     /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n     event NonceInvalidation(\\n          address indexed owner,\\n          address indexed token,\\n          address indexed spender,\\n          uint48 newNonce,\\n          uint48 oldNonce\\n     );\\n\\n     /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n     event Approval(\\n          address indexed owner,\\n          address indexed token,\\n          address indexed spender,\\n          uint160 amount,\\n          uint48 expiration\\n     );\\n\\n     /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n     event Permit(\\n          address indexed owner,\\n          address indexed token,\\n          address indexed spender,\\n          uint160 amount,\\n          uint48 expiration,\\n          uint48 nonce\\n     );\\n\\n     /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n     event Lockdown(address indexed owner, address token, address spender);\\n\\n     /// @notice The permit data for a token\\n     struct PermitDetails {\\n          // ERC20 token address\\n          address token;\\n          // the maximum amount allowed to spend\\n          uint160 amount;\\n          // timestamp at which a spender's token allowances become invalid\\n          uint48 expiration;\\n          // an incrementing value indexed per owner,token,and spender for each signature\\n          uint48 nonce;\\n     }\\n\\n     /// @notice The permit message signed for a single token allownce\\n     struct PermitSingle {\\n          // the permit data for a single token alownce\\n          PermitDetails details;\\n          // address permissioned on the allowed tokens\\n          address spender;\\n          // deadline on the permit signature\\n          uint256 sigDeadline;\\n     }\\n\\n     /// @notice The permit message signed for multiple token allowances\\n     struct PermitBatch {\\n          // the permit data for multiple token allowances\\n          PermitDetails[] details;\\n          // address permissioned on the allowed tokens\\n          address spender;\\n          // deadline on the permit signature\\n          uint256 sigDeadline;\\n     }\\n\\n     /// @notice The saved permissions\\n     /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n     /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n     struct PackedAllowance {\\n          // amount allowed\\n          uint160 amount;\\n          // permission expiry\\n          uint48 expiration;\\n          // an incrementing value indexed per owner,token,and spender for each signature\\n          uint48 nonce;\\n     }\\n\\n     /// @notice A token spender pair.\\n     struct TokenSpenderPair {\\n          // the token the spender is approved\\n          address token;\\n          // the spender address\\n          address spender;\\n     }\\n\\n     /// @notice Details for a token transfer.\\n     struct AllowanceTransferDetails {\\n          // the owner of the token\\n          address from;\\n          // the recipient of the token\\n          address to;\\n          // the amount of the token\\n          uint160 amount;\\n          // the token to be transferred\\n          address token;\\n     }\\n\\n     /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n     /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n     /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n     function allowance(\\n          address user,\\n          address token,\\n          address spender\\n     ) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n     /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n     /// @param token The token to approve\\n     /// @param spender The spender address to approve\\n     /// @param amount The approved amount of the token\\n     /// @param expiration The timestamp at which the approval is no longer valid\\n     /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n     /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n     function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n     /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n     /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n     /// @param owner The owner of the tokens being approved\\n     /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n     /// @param signature The owner's signature over the permit data\\n     function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n     /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n     /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n     /// @param owner The owner of the tokens being approved\\n     /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n     /// @param signature The owner's signature over the permit data\\n     function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n     /// @notice Transfer approved tokens from one address to another\\n     /// @param from The address to transfer from\\n     /// @param to The address of the recipient\\n     /// @param amount The amount of the token to transfer\\n     /// @param token The token address to transfer\\n     /// @dev Requires the from address to have approved at least the desired amount\\n     /// of tokens to msg.sender.\\n     function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n     /// @notice Transfer approved tokens in a batch\\n     /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n     /// @dev Requires the from addresses to have approved at least the desired amount\\n     /// of tokens to msg.sender.\\n     function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n     /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n     /// by batch revoking approvals\\n     /// @param approvals Array of approvals to revoke.\\n     function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n     /// @notice Invalidate nonces for a given (token, spender) pair\\n     /// @param token The token to invalidate nonces for\\n     /// @param spender The spender to invalidate nonces for\\n     /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n     /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n     function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\"\n    },\n    \"contracts/permit2/interfaces/IDAIPermit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDAIPermit {\\n      /// @param holder The address of the token owner.\\n      /// @param spender The address of the token spender.\\n      /// @param nonce The owner's nonce, increases at each call to permit.\\n      /// @param expiry The timestamp at which the permit is no longer valid.\\n      /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\\n      /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n      /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n      /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n      function permit(\\n            address holder,\\n            address spender,\\n            uint256 nonce,\\n            uint256 expiry,\\n            bool allowed,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n      ) external;\\n}\\n\"\n    },\n    \"contracts/permit2/interfaces/IEIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEIP712 {\\n      function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/permit2/interfaces/IERC1271.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC1271 {\\n      /// @dev Should return whether the signature provided is valid for the provided data\\n      /// @param hash      Hash of the data to be signed\\n      /// @param signature Signature byte array associated with _data\\n      /// @return magicValue The bytes4 magic value 0x1626ba7e\\n      function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\n    },\n    \"contracts/permit2/interfaces/IPermit2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ISignatureTransfer} from \\\"./ISignatureTransfer.sol\\\";\\nimport {IAllowanceTransfer} from \\\"./IAllowanceTransfer.sol\\\";\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\\n      // IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\\n}\\n\"\n    },\n    \"contracts/permit2/interfaces/ISignatureTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from \\\"./IEIP712.sol\\\";\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n     /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n     /// @param maxAmount The maximum amount a spender can request to transfer\\n     error InvalidAmount(uint256 maxAmount);\\n\\n     /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n     /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n     error LengthMismatch();\\n\\n     /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n     event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n     /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n     struct TokenPermissions {\\n          // ERC20 token address\\n          address token;\\n          // the maximum amount that can be spent\\n          uint256 amount;\\n     }\\n\\n     /// @notice The signed permit message for a single token transfer\\n     struct PermitTransferFrom {\\n          TokenPermissions permitted;\\n          // a unique value for every token owner's signature to prevent signature replays\\n          uint256 nonce;\\n          // deadline on the permit signature\\n          uint256 deadline;\\n     }\\n\\n     /// @notice Specifies the recipient address and amount for batched transfers.\\n     /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n     /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n     struct SignatureTransferDetails {\\n          // recipient address\\n          address to;\\n          // spender requested amount\\n          uint256 requestedAmount;\\n     }\\n\\n     /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n     /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n     /// @dev Note that a user still signs over a spender address\\n     struct PermitBatchTransferFrom {\\n          // the tokens and corresponding amounts permitted for a transfer\\n          TokenPermissions[] permitted;\\n          // a unique value for every token owner's signature to prevent signature replays\\n          uint256 nonce;\\n          // deadline on the permit signature\\n          uint256 deadline;\\n     }\\n\\n     /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n     /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n     /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n     /// @dev It returns a uint256 bitmap\\n     /// @dev The index, or wordPosition is capped at type(uint248).max\\n     function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n     /// @notice Transfers a token using a signed permit message\\n     /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails The spender's requested transfer details for the permitted token\\n     /// @param signature The signature to verify\\n     function permitTransferFrom(\\n          PermitTransferFrom memory permit,\\n          SignatureTransferDetails calldata transferDetails,\\n          address owner,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Transfers a token using a signed permit message\\n     /// @notice Includes extra data provided by the caller to verify signature over\\n     /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n     /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails The spender's requested transfer details for the permitted token\\n     /// @param witness Extra data to include when checking the user signature\\n     /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n     /// @param signature The signature to verify\\n     function permitWitnessTransferFrom(\\n          PermitTransferFrom memory permit,\\n          SignatureTransferDetails calldata transferDetails,\\n          address owner,\\n          bytes32 witness,\\n          string calldata witnessTypeString,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Transfers multiple tokens using a signed permit message\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n     /// @param signature The signature to verify\\n     function permitTransferFrom(\\n          PermitBatchTransferFrom memory permit,\\n          SignatureTransferDetails[] calldata transferDetails,\\n          address owner,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Transfers multiple tokens using a signed permit message\\n     /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n     /// @notice Includes extra data provided by the caller to verify signature over\\n     /// @param permit The permit data signed over by the owner\\n     /// @param owner The owner of the tokens to transfer\\n     /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n     /// @param witness Extra data to include when checking the user signature\\n     /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n     /// @param signature The signature to verify\\n     function permitWitnessTransferFrom(\\n          PermitBatchTransferFrom memory permit,\\n          SignatureTransferDetails[] calldata transferDetails,\\n          address owner,\\n          bytes32 witness,\\n          string calldata witnessTypeString,\\n          bytes calldata signature\\n     ) external;\\n\\n     /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n     /// @dev The wordPos is maxed at type(uint248).max\\n     /// @param wordPos A number to index the nonceBitmap at\\n     /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n     function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\"\n    },\n    \"contracts/permit2/libraries/Allowance.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAllowanceTransfer} from \\\"../interfaces/IAllowanceTransfer.sol\\\";\\n\\nlibrary Allowance {\\n    // note if the expiration passed is 0, then it the approval set to the block.timestamp\\n    uint256 private constant BLOCK_TIMESTAMP_EXPIRATION = 0;\\n\\n    /// @notice Sets the allowed amount, expiry, and nonce of the spender's permissions on owner's token.\\n    /// @dev Nonce is incremented.\\n    /// @dev If the inputted expiration is 0, the stored expiration is set to block.timestamp\\n    function updateAll(\\n        IAllowanceTransfer.PackedAllowance storage allowed,\\n        uint160 amount,\\n        uint48 expiration,\\n        uint48 nonce\\n    ) internal {\\n        uint48 storedNonce;\\n        unchecked {\\n            storedNonce = nonce + 1;\\n        }\\n\\n        uint48 storedExpiration = expiration == BLOCK_TIMESTAMP_EXPIRATION ? uint48(block.timestamp) : expiration;\\n\\n        uint256 word = pack(amount, storedExpiration, storedNonce);\\n        assembly {\\n            sstore(allowed.slot, word)\\n        }\\n    }\\n\\n    /// @notice Sets the allowed amount and expiry of the spender's permissions on owner's token.\\n    /// @dev Nonce does not need to be incremented.\\n    function updateAmountAndExpiration(\\n        IAllowanceTransfer.PackedAllowance storage allowed,\\n        uint160 amount,\\n        uint48 expiration\\n    ) internal {\\n        // If the inputted expiration is 0, the allowance only lasts the duration of the block.\\n        allowed.expiration = expiration == 0 ? uint48(block.timestamp) : expiration;\\n        allowed.amount = amount;\\n    }\\n\\n    /// @notice Computes the packed slot of the amount, expiration, and nonce that make up PackedAllowance\\n    function pack(uint160 amount, uint48 expiration, uint48 nonce) internal pure returns (uint256 word) {\\n        word = (uint256(nonce) << 208) | uint256(expiration) << 160 | amount;\\n    }\\n}\\n\"\n    },\n    \"contracts/permit2/libraries/Permit2Lib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\nimport {IDAIPermit} from \\\"../interfaces/IDAIPermit.sol\\\";\\nimport {IAllowanceTransfer} from \\\"../interfaces/IAllowanceTransfer.sol\\\";\\nimport {SafeCast160} from \\\"./SafeCast160.sol\\\";\\n\\n/// @title Permit2Lib\\n/// @notice Enables efficient transfers and EIP-2612/DAI\\n/// permits for any token by falling back to Permit2.\\nlibrary Permit2Lib {\\n      using SafeCast160 for uint256;\\n      /*//////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n      /// @dev The unique EIP-712 domain domain separator for the DAI token contract.\\n      bytes32 internal constant DAI_DOMAIN_SEPARATOR =\\n            0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;\\n\\n      /// @dev The address for the WETH9 contract on Ethereum mainnet, encoded as a bytes32.\\n      bytes32 internal constant WETH9_ADDRESS = 0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\\n\\n      /// @dev The address of the Permit2 contract the library will use.\\n      IAllowanceTransfer internal constant PERMIT2 =\\n            IAllowanceTransfer(address(0x000000000022D473030F116dDEE9F6B43aC78BA3));\\n\\n      /// @notice Transfer a given amount of tokens from one user to another.\\n      /// @param token The token to transfer.\\n      /// @param from The user to transfer from.\\n      /// @param to The user to transfer to.\\n      /// @param amount The amount to transfer.\\n      function transferFrom2(ERC20 token, address from, address to, uint256 amount) internal {\\n            // Generate calldata for a standard transferFrom call.\\n            bytes memory inputData = abi.encodeCall(ERC20.transferFrom, (from, to, amount));\\n\\n            bool success; // Call the token contract as normal, capturing whether it succeeded.\\n            assembly {\\n                  success := and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(eq(mload(0), 1), iszero(returndatasize())),\\n                        // Counterintuitively, this call() must be positioned after the or() in the\\n                        // surrounding and() because and() evaluates its arguments from right to left.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the first slot of scratch space.\\n                        call(gas(), token, 0, add(inputData, 32), mload(inputData), 0, 32)\\n                  )\\n            }\\n\\n            // We'll fall back to using Permit2 if calling transferFrom on the token directly reverted.\\n            if (!success) PERMIT2.transferFrom(from, to, amount.toUint160(), address(token));\\n      }\\n\\n      /*//////////////////////////////////////////////////////////////\\n                              PERMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n      /// @notice Permit a user to spend a given amount of\\n      /// another user's tokens via native EIP-2612 permit if possible, falling\\n      /// back to Permit2 if native permit fails or is not implemented on the token.\\n      /// @param token The token to permit spending.\\n      /// @param owner The user to permit spending from.\\n      /// @param spender The user to permit spending to.\\n      /// @param amount The amount to permit spending.\\n      /// @param deadline  The timestamp after which the signature is no longer valid.\\n      /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n      /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n      /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n      function permit2(\\n            ERC20 token,\\n            address owner,\\n            address spender,\\n            uint256 amount,\\n            uint256 deadline,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n      ) internal {\\n            // Generate calldata for a call to DOMAIN_SEPARATOR on the token.\\n            bytes memory inputData = abi.encodeWithSelector(ERC20.DOMAIN_SEPARATOR.selector);\\n\\n            bool success; // Call the token contract as normal, capturing whether it succeeded.\\n            bytes32 domainSeparator; // If the call succeeded, we'll capture the return value here.\\n\\n            assembly {\\n                  // If the token is WETH9, we know it doesn't have a DOMAIN_SEPARATOR, and we'll skip this step.\\n                  // We make sure to mask the token address as its higher order bits aren't guaranteed to be clean.\\n                  if iszero(eq(and(token, 0xffffffffffffffffffffffffffffffffffffffff), WETH9_ADDRESS)) {\\n                        success := and(\\n                              // Should resolve false if its not 32 bytes or its first word is 0.\\n                              and(iszero(iszero(mload(0))), eq(returndatasize(), 32)),\\n                              // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                              // Counterintuitively, this call must be positioned second to the and() call in the\\n                              // surrounding and() call or else returndatasize() will be zero during the computation.\\n                              // We send a maximum of 5000 gas to prevent tokens with fallbacks from using a ton of gas.\\n                              // which should be plenty to allow tokens to fetch their DOMAIN_SEPARATOR from storage, etc.\\n                              staticcall(5000, token, add(inputData, 32), mload(inputData), 0, 32)\\n                        )\\n\\n                        domainSeparator := mload(0) // Copy the return value into the domainSeparator variable.\\n                  }\\n            }\\n\\n            // If the call to DOMAIN_SEPARATOR succeeded, try using permit on the token.\\n            if (success) {\\n                  // We'll use DAI's special permit if it's DOMAIN_SEPARATOR matches,\\n                  // otherwise we'll just encode a call to the standard permit function.\\n                  inputData = domainSeparator == DAI_DOMAIN_SEPARATOR\\n                        ? abi.encodeCall(\\n                              IDAIPermit.permit,\\n                              (owner, spender, token.nonces(owner), deadline, true, v, r, s)\\n                        )\\n                        : abi.encodeCall(ERC20.permit, (owner, spender, amount, deadline, v, r, s));\\n\\n                  assembly {\\n                        success := call(gas(), token, 0, add(inputData, 32), mload(inputData), 0, 0)\\n                  }\\n            }\\n\\n            if (!success) {\\n                  // If the initial DOMAIN_SEPARATOR call on the token failed or a\\n                  // subsequent call to permit failed, fall back to using Permit2.\\n                  simplePermit2(token, owner, spender, amount, deadline, v, r, s);\\n            }\\n      }\\n\\n      /// @notice Simple unlimited permit on the Permit2 contract.\\n      /// @param token The token to permit spending.\\n      /// @param owner The user to permit spending from.\\n      /// @param spender The user to permit spending to.\\n      /// @param amount The amount to permit spending.\\n      /// @param deadline  The timestamp after which the signature is no longer valid.\\n      /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n      /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n      /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n      function simplePermit2(\\n            ERC20 token,\\n            address owner,\\n            address spender,\\n            uint256 amount,\\n            uint256 deadline,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n      ) internal {\\n            (, , uint48 nonce) = PERMIT2.allowance(owner, address(token), spender);\\n\\n            PERMIT2.permit(\\n                  owner,\\n                  IAllowanceTransfer.PermitSingle({\\n                        details: IAllowanceTransfer.PermitDetails({\\n                              token: address(token),\\n                              amount: amount.toUint160(),\\n                              // Use an unlimited expiration because it most\\n                              // closely mimics how a standard approval works.\\n                              expiration: type(uint48).max,\\n                              nonce: nonce\\n                        }),\\n                        spender: spender,\\n                        sigDeadline: deadline\\n                  }),\\n                  bytes.concat(r, s, bytes1(v))\\n            );\\n      }\\n}\\n\"\n    },\n    \"contracts/permit2/libraries/PermitHash.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAllowanceTransfer} from \\\"../interfaces/IAllowanceTransfer.sol\\\";\\nimport {ISignatureTransfer} from \\\"../interfaces/ISignatureTransfer.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary PermitHash {\\n      bytes32 public constant _PERMIT_DETAILS_TYPEHASH =\\n            keccak256(\\\"PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\");\\n\\n      bytes32 public constant _PERMIT_SINGLE_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitSingle(PermitDetails details,address spender,uint256 sigDeadline)PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\"\\n            );\\n\\n      bytes32 public constant _PERMIT_BATCH_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitBatch(PermitDetails[] details,address spender,uint256 sigDeadline)PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\"\\n            );\\n\\n      bytes32 public constant _TOKEN_PERMISSIONS_TYPEHASH = keccak256(\\\"TokenPermissions(address token,uint256 amount)\\\");\\n\\n      bytes32 public constant _PERMIT_TRANSFER_FROM_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)\\\"\\n            );\\n\\n      bytes32 public constant _PERMIT_BATCH_TRANSFER_FROM_TYPEHASH =\\n            keccak256(\\n                  \\\"PermitBatchTransferFrom(TokenPermissions[] permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)\\\"\\n            );\\n\\n      string public constant _TOKEN_PERMISSIONS_TYPESTRING = \\\"TokenPermissions(address token,uint256 amount)\\\";\\n\\n      string public constant _PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB =\\n            \\\"PermitWitnessTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline,\\\";\\n\\n      string public constant _PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB =\\n            \\\"PermitBatchWitnessTransferFrom(TokenPermissions[] permitted,address spender,uint256 nonce,uint256 deadline,\\\";\\n\\n      function hash(IAllowanceTransfer.PermitSingle memory permitSingle) internal pure returns (bytes32) {\\n            bytes32 permitHash = _hashPermitDetails(permitSingle.details);\\n            return\\n                  keccak256(\\n                        abi.encode(_PERMIT_SINGLE_TYPEHASH, permitHash, permitSingle.spender, permitSingle.sigDeadline)\\n                  );\\n      }\\n\\n      function hash(IAllowanceTransfer.PermitBatch memory permitBatch) internal pure returns (bytes32) {\\n            uint256 numPermits = permitBatch.details.length;\\n            bytes32[] memory permitHashes = new bytes32[](numPermits);\\n            for (uint256 i = 0; i < numPermits; ++i) {\\n                  permitHashes[i] = _hashPermitDetails(permitBatch.details[i]);\\n            }\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              _PERMIT_BATCH_TYPEHASH,\\n                              keccak256(abi.encodePacked(permitHashes)),\\n                              permitBatch.spender,\\n                              permitBatch.sigDeadline\\n                        )\\n                  );\\n      }\\n\\n      function hash(ISignatureTransfer.PermitTransferFrom memory permit) internal view returns (bytes32) {\\n            bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              _PERMIT_TRANSFER_FROM_TYPEHASH,\\n                              tokenPermissionsHash,\\n                              msg.sender,\\n                              permit.nonce,\\n                              permit.deadline\\n                        )\\n                  );\\n      }\\n\\n      function hash(ISignatureTransfer.PermitBatchTransferFrom memory permit) internal view returns (bytes32) {\\n            uint256 numPermitted = permit.permitted.length;\\n            bytes32[] memory tokenPermissionHashes = new bytes32[](numPermitted);\\n\\n            for (uint256 i = 0; i < numPermitted; ++i) {\\n                  tokenPermissionHashes[i] = _hashTokenPermissions(permit.permitted[i]);\\n            }\\n\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              _PERMIT_BATCH_TRANSFER_FROM_TYPEHASH,\\n                              keccak256(abi.encodePacked(tokenPermissionHashes)),\\n                              msg.sender,\\n                              permit.nonce,\\n                              permit.deadline\\n                        )\\n                  );\\n      }\\n\\n      function hashWithWitness(\\n            ISignatureTransfer.PermitTransferFrom memory permit,\\n            bytes32 witness,\\n            string calldata witnessTypeString\\n      ) internal view returns (bytes32) {\\n            bytes32 typeHash = keccak256(\\n                  abi.encodePacked(_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB, witnessTypeString)\\n            );\\n\\n            bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n            return\\n                  keccak256(\\n                        abi.encode(typeHash, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline, witness)\\n                  );\\n      }\\n\\n      function hashWithWitness(\\n            ISignatureTransfer.PermitBatchTransferFrom memory permit,\\n            bytes32 witness,\\n            string calldata witnessTypeString\\n      ) internal view returns (bytes32) {\\n            bytes32 typeHash = keccak256(\\n                  abi.encodePacked(_PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB, witnessTypeString)\\n            );\\n\\n            uint256 numPermitted = permit.permitted.length;\\n            bytes32[] memory tokenPermissionHashes = new bytes32[](numPermitted);\\n\\n            for (uint256 i = 0; i < numPermitted; ++i) {\\n                  tokenPermissionHashes[i] = _hashTokenPermissions(permit.permitted[i]);\\n            }\\n\\n            return\\n                  keccak256(\\n                        abi.encode(\\n                              typeHash,\\n                              keccak256(abi.encodePacked(tokenPermissionHashes)),\\n                              msg.sender,\\n                              permit.nonce,\\n                              permit.deadline,\\n                              witness\\n                        )\\n                  );\\n      }\\n\\n      function _hashPermitDetails(IAllowanceTransfer.PermitDetails memory details) private pure returns (bytes32) {\\n            return keccak256(abi.encode(_PERMIT_DETAILS_TYPEHASH, details));\\n      }\\n\\n      function _hashTokenPermissions(\\n            ISignatureTransfer.TokenPermissions memory permitted\\n      ) private pure returns (bytes32) {\\n            return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, permitted));\\n      }\\n}\\n\"\n    },\n    \"contracts/permit2/libraries/SafeCast160.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary SafeCast160 {\\n    /// @notice Thrown when a valude greater than type(uint160).max is cast to uint160\\n    error UnsafeCast();\\n\\n    /// @notice Safely casts uint256 to uint160\\n    /// @param value The uint256 to be cast\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) revert UnsafeCast();\\n        return uint160(value);\\n    }\\n}\\n\"\n    },\n    \"contracts/permit2/libraries/SignatureVerification.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC1271} from \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary SignatureVerification {\\n      /// @notice Thrown when the passed in signature is not a valid length\\n      error InvalidSignatureLength();\\n\\n      /// @notice Thrown when the recovered signer is equal to the zero address\\n      error InvalidSignature();\\n\\n      /// @notice Thrown when the recovered signer does not equal the claimedSigner\\n      error InvalidSigner();\\n\\n      /// @notice Thrown when the recovered contract signature is incorrect\\n      error InvalidContractSignature();\\n\\n      bytes32 constant UPPER_BIT_MASK = (0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\n      function verify(bytes calldata signature, bytes32 hash, address claimedSigner) internal view {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n\\n            if (claimedSigner.code.length == 0) {\\n                  if (signature.length == 65) {\\n                        (r, s) = abi.decode(signature, (bytes32, bytes32));\\n                        v = uint8(signature[64]);\\n                  } else if (signature.length == 64) {\\n                        // EIP-2098\\n                        bytes32 vs;\\n                        (r, vs) = abi.decode(signature, (bytes32, bytes32));\\n                        s = vs & UPPER_BIT_MASK;\\n                        v = uint8(uint256(vs >> 255)) + 27;\\n                  } else {\\n                        revert InvalidSignatureLength();\\n                  }\\n                  address signer = ecrecover(hash, v, r, s);\\n                  console.log(signer, claimedSigner, \\\"yyyyyyyyyyyyyyyy\\\");\\n                  if (signer == address(0)) revert InvalidSignature();\\n                  if (signer != claimedSigner) revert InvalidSigner();\\n            } else {\\n                  //  console.log(signer, claimedSigner);\\n                  bytes4 magicValue = IERC1271(claimedSigner).isValidSignature(hash, signature);\\n                  //   console.log(magicValue);\\n\\n                  if (magicValue != IERC1271.isValidSignature.selector) revert InvalidContractSignature();\\n            }\\n      }\\n}\\n\"\n    },\n    \"contracts/permit2/Permit2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {SignatureTransfer} from \\\"./SignatureTransfer.sol\\\";\\nimport {AllowanceTransfer} from \\\"./AllowanceTransfer.sol\\\";\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ncontract Permit2 is SignatureTransfer, AllowanceTransfer {\\n// Permit2 unifies the two contracts so users have maximal flexibility with their approval.\\n}\\n\"\n    },\n    \"contracts/permit2/PermitErrors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice Shared errors between signature based transfers and allowance based transfers.\\n\\n/// @notice Thrown when validating an inputted signature that is stale\\n/// @param signatureDeadline The timestamp at which a signature is no longer valid\\nerror SignatureExpired(uint256 signatureDeadline);\\n\\n/// @notice Thrown when validating that the inputted nonce has not been used\\nerror InvalidNonce();\\n\"\n    },\n    \"contracts/permit2/SignatureTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ISignatureTransfer} from \\\"./interfaces/ISignatureTransfer.sol\\\";\\nimport {SignatureExpired, InvalidNonce} from \\\"./PermitErrors.sol\\\";\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {SignatureVerification} from \\\"./libraries/SignatureVerification.sol\\\";\\nimport {PermitHash} from \\\"./libraries/PermitHash.sol\\\";\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\n\\ncontract SignatureTransfer is ISignatureTransfer, EIP712 {\\n    using SignatureVerification for bytes;\\n    using SafeTransferLib for ERC20;\\n    using PermitHash for PermitTransferFrom;\\n    using PermitHash for PermitBatchTransferFrom;\\n\\n    /// @inheritdoc ISignatureTransfer\\n    mapping(address => mapping(uint256 => uint256)) public nonceBitmap;\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hash(), signature);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(\\n            permit, transferDetails, owner, permit.hashWithWitness(witness, witnessTypeString), signature\\n        );\\n    }\\n\\n    /// @notice Transfers a token using a signed permit message.\\n    /// @param permit The permit data signed over by the owner\\n    /// @param dataHash The EIP-712 hash of permit data to include when checking signature\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function _permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 dataHash,\\n        bytes calldata signature\\n    ) private {\\n        uint256 requestedAmount = transferDetails.requestedAmount;\\n\\n        if (block.timestamp > permit.deadline) revert SignatureExpired(permit.deadline);\\n        if (requestedAmount > permit.permitted.amount) revert InvalidAmount(permit.permitted.amount);\\n\\n        _useUnorderedNonce(owner, permit.nonce);\\n\\n        signature.verify(_hashTypedData(dataHash), owner);\\n\\n        ERC20(permit.permitted.token).safeTransferFrom(owner, transferDetails.to, requestedAmount);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hash(), signature);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitWitnessTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(\\n            permit, transferDetails, owner, permit.hashWithWitness(witness, witnessTypeString), signature\\n        );\\n    }\\n\\n    /// @notice Transfers tokens using a signed permit messages\\n    /// @param permit The permit data signed over by the owner\\n    /// @param dataHash The EIP-712 hash of permit data to include when checking signature\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param signature The signature to verify\\n    function _permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 dataHash,\\n        bytes calldata signature\\n    ) private {\\n        uint256 numPermitted = permit.permitted.length;\\n\\n        if (block.timestamp > permit.deadline) revert SignatureExpired(permit.deadline);\\n        if (numPermitted != transferDetails.length) revert LengthMismatch();\\n\\n        _useUnorderedNonce(owner, permit.nonce);\\n        signature.verify(_hashTypedData(dataHash), owner);\\n\\n        unchecked {\\n            for (uint256 i = 0; i < numPermitted; ++i) {\\n                TokenPermissions memory permitted = permit.permitted[i];\\n                uint256 requestedAmount = transferDetails[i].requestedAmount;\\n\\n                if (requestedAmount > permitted.amount) revert InvalidAmount(permitted.amount);\\n\\n                if (requestedAmount != 0) {\\n                    // allow spender to specify which of the permitted tokens should be transferred\\n                    ERC20(permitted.token).safeTransferFrom(owner, transferDetails[i].to, requestedAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external {\\n        nonceBitmap[msg.sender][wordPos] |= mask;\\n\\n        emit UnorderedNonceInvalidation(msg.sender, wordPos, mask);\\n    }\\n\\n    /// @notice Returns the index of the bitmap and the bit position within the bitmap. Used for unordered nonces\\n    /// @param nonce The nonce to get the associated word and bit positions\\n    /// @return wordPos The word position or index into the nonceBitmap\\n    /// @return bitPos The bit position\\n    /// @dev The first 248 bits of the nonce value is the index of the desired bitmap\\n    /// @dev The last 8 bits of the nonce value is the position of the bit in the bitmap\\n    function bitmapPositions(uint256 nonce) private pure returns (uint256 wordPos, uint256 bitPos) {\\n        wordPos = uint248(nonce >> 8);\\n        bitPos = uint8(nonce);\\n    }\\n\\n    /// @notice Checks whether a nonce is taken and sets the bit at the bit position in the bitmap at the word position\\n    /// @param from The address to use the nonce at\\n    /// @param nonce The nonce to spend\\n    function _useUnorderedNonce(address from, uint256 nonce) internal {\\n        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);\\n        uint256 bit = 1 << bitPos;\\n        uint256 flipped = nonceBitmap[from][wordPos] ^= bit;\\n\\n        if (flipped & bit == 0) revert InvalidNonce();\\n    }\\n}\\n\"\n    },\n    \"contracts/priceOracle/IPancakeOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.7.6 <0.9.0;\\nimport \\\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol\\\";\\n\\n/// @title pancakeswap V3 Static Oracle\\n/// @notice Oracle contract for calculating price quoting against pancakeswap V3\\ninterface IStaticOracle {\\n     function PANCAKESWAP_V3_FACTORY() external view returns (IPancakeV3Factory);\\n\\n     /// @notice Returns how many observations are needed per minute in pancakeswap V3 oracles, on the deployed chain\\n     /// @dev This value is assigned during deployment and cannot be changed\\n     /// @return Number of observation that are needed per minute\\n     function CARDINALITY_PER_MINUTE() external view returns (uint8);\\n\\n     /// @notice Returns all supported fee tiers\\n     /// @return The supported fee tiers\\n     function supportedFeeTiers() external view returns (uint24[] memory);\\n\\n     /// @notice Returns whether a specific pair can be supported by the oracle\\n     /// @dev The pair can be provided in tokenA/tokenB or tokenB/tokenA order\\n     /// @return Whether the given pair can be supported by the oracle\\n     function isPairSupported(address tokenA, address tokenB) external view returns (bool);\\n\\n     /// @notice Returns all existing pools for the given pair\\n     /// @dev The pair can be provided in tokenA/tokenB or tokenB/tokenA order\\n     /// @return All existing pools for the given pair\\n     function getAllPoolsForPair(address tokenA, address tokenB) external view returns (address[] memory);\\n\\n     /// @notice Returns a quote, based on the given tokens and amount, by querying all of the pair's pools\\n     /// @dev If some pools are not configured correctly for the given period, then they will be ignored\\n     /// @dev Will revert if there are no pools available/configured for the pair and period combination\\n     /// @param baseAmount Amount of token to be converted\\n     /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     /// @param period Number of seconds from which to calculate the TWAP\\n     /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n     /// @return queriedPools The pools that were queried to calculate the quote\\n     function quoteAllAvailablePoolsWithTimePeriod(\\n          uint128 baseAmount,\\n          address baseToken,\\n          address quoteToken,\\n          uint32 period\\n     ) external view returns (uint256 quoteAmount, address[] memory queriedPools);\\n\\n     /// @notice Returns a quote, based on the given tokens and amount, by querying only the specified fee tiers\\n     /// @dev Will revert if the pair does not have a pool for one of the given fee tiers, or if one of the pools\\n     /// is not prepared/configured correctly for the given period\\n     /// @param baseAmount Amount of token to be converted\\n     /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     /// @param feeTiers The fee tiers to consider when calculating the quote\\n     /// @param period Number of seconds from which to calculate the TWAP\\n     /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n     /// @return queriedPools The pools that were queried to calculate the quote\\n     function quoteSpecificFeeTiersWithTimePeriod(\\n          uint128 baseAmount,\\n          address baseToken,\\n          address quoteToken,\\n          uint24[] calldata feeTiers,\\n          uint32 period\\n     ) external view returns (uint256 quoteAmount, address[] memory queriedPools);\\n\\n     /// @notice Returns a quote, based on the given tokens and amount, by querying only the specified pools\\n     /// @dev Will revert if one of the pools is not prepared/configured correctly for the given period\\n     /// @param baseAmount Amount of token to be converted\\n     /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     /// @param pools The pools to consider when calculating the quote\\n     /// @param period Number of seconds from which to calculate the TWAP\\n     /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n     function quoteSpecificPoolsWithTimePeriod(\\n          uint128 baseAmount,\\n          address baseToken,\\n          address quoteToken,\\n          address[] calldata pools,\\n          uint32 period\\n     ) external view returns (uint256 quoteAmount);\\n\\n     /// @notice Will initialize all existing pools for the given pair, so that they can be queried with the given period in the future\\n     /// @dev Will revert if there are no pools available for the pair and period combination\\n     /// @param tokenA One of the pair's tokens\\n     /// @param tokenB The other of the pair's tokens\\n     /// @param period The period that will be guaranteed when quoting\\n     /// @return preparedPools The pools that were prepared\\n     function prepareAllAvailablePoolsWithTimePeriod(\\n          address tokenA,\\n          address tokenB,\\n          uint32 period\\n     ) external returns (address[] memory preparedPools);\\n\\n     /// @notice Will initialize the pair's pools with the specified fee tiers, so that they can be queried with the given period in the future\\n     /// @dev Will revert if the pair does not have a pool for a given fee tier\\n     /// @param tokenA One of the pair's tokens\\n     /// @param tokenB The other of the pair's tokens\\n     /// @param feeTiers The fee tiers to consider when searching for the pair's pools\\n     /// @param period The period that will be guaranteed when quoting\\n     /// @return preparedPools The pools that were prepared\\n     function prepareSpecificFeeTiersWithTimePeriod(\\n          address tokenA,\\n          address tokenB,\\n          uint24[] calldata feeTiers,\\n          uint32 period\\n     ) external returns (address[] memory preparedPools);\\n\\n     /// @notice Returns a quote, based on the given tokens and amount, by querying all of the pair's pools\\n     /// @dev If some pools are not configured correctly for the given period + offset, then they will be ignored\\n     /// @dev Will revert if there are no pools available/configured for the pair and period combination\\n     /// @param baseAmount Amount of token to be converted\\n     /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     /// @param period Length in seconds of the TWAP calculation length\\n     /// @param offset Number of seconds ago to start the TWAP calculation\\n     /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n     /// @return queriedPools The pools that were queried to calculate the quote\\n     function quoteAllAvailablePoolsWithOffsettedTimePeriod(\\n          uint128 baseAmount,\\n          address baseToken,\\n          address quoteToken,\\n          uint32 period,\\n          uint32 offset\\n     ) external view returns (uint256 quoteAmount, address[] memory queriedPools);\\n\\n     /// @notice Returns a quote, based on the given tokens and amount, by querying only the specified fee tiers\\n     /// @dev Will revert if the pair does not have a pool for one of the given fee tiers\\n     /// @dev Will revert if one of the pools is not prepared/configured correctly for the given period + offset\\n     /// @param baseAmount Amount of token to be converted\\n     /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     /// @param feeTiers The fee tiers to consider when calculating the quote\\n     /// @param period Length in seconds of the TWAP calculation length\\n     /// @param offset Number of seconds ago to start the TWAP calculation\\n     /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n     /// @return queriedPools The pools that were queried to calculate the quote\\n     function quoteSpecificFeeTiersWithOffsettedTimePeriod(\\n          uint128 baseAmount,\\n          address baseToken,\\n          address quoteToken,\\n          uint24[] calldata feeTiers,\\n          uint32 period,\\n          uint32 offset\\n     ) external view returns (uint256 quoteAmount, address[] memory queriedPools);\\n\\n     /// @notice Returns a quote, based on the given tokens and amount, by querying only the specified pools\\n     /// @dev Will revert if one of the pools is not prepared/configured correctly for the given period\\n     /// @param baseAmount Amount of token to be converted\\n     /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     /// @param pools The pools to consider when calculating the quote\\n     /// @param period Length in seconds of the TWAP calculation length\\n     /// @param offset Number of seconds ago to start the TWAP calculation\\n     /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n     function quoteSpecificPoolsWithOffsettedTimePeriod(\\n          uint128 baseAmount,\\n          address baseToken,\\n          address quoteToken,\\n          address[] calldata pools,\\n          uint32 period,\\n          uint32 offset\\n     ) external view returns (uint256 quoteAmount);\\n\\n     /// @notice Will initialize all given pools, so that they can be queried with the given period in the future\\n     /// @param pools The pools to initialize\\n     /// @param period The period that will be guaranteed when quoting\\n     function prepareSpecificPoolsWithTimePeriod(address[] calldata pools, uint32 period) external;\\n\\n     /// @notice Will increase observations for all existing pools for the given pair, so they start accruing information for twap calculations\\n     /// @dev Will revert if there are no pools available for the pair and period combination\\n     /// @param tokenA One of the pair's tokens\\n     /// @param tokenB The other of the pair's tokens\\n     /// @param cardinality The cardinality that will be guaranteed when quoting\\n     /// @return preparedPools The pools that were prepared\\n     function prepareAllAvailablePoolsWithCardinality(\\n          address tokenA,\\n          address tokenB,\\n          uint16 cardinality\\n     ) external returns (address[] memory preparedPools);\\n\\n     /// @notice Will increase the pair's pools with the specified fee tiers observations, so they start accruing information for twap calculations\\n     /// @dev Will revert if the pair does not have a pool for a given fee tier\\n     /// @param tokenA One of the pair's tokens\\n     /// @param tokenB The other of the pair's tokens\\n     /// @param feeTiers The fee tiers to consider when searching for the pair's pools\\n     /// @param cardinality The cardinality that will be guaranteed when quoting\\n     /// @return preparedPools The pools that were prepared\\n     function prepareSpecificFeeTiersWithCardinality(\\n          address tokenA,\\n          address tokenB,\\n          uint24[] calldata feeTiers,\\n          uint16 cardinality\\n     ) external returns (address[] memory preparedPools);\\n\\n     /// @notice Will increase all given pools observations, so they start accruing information for twap calculations\\n     /// @param pools The pools to initialize\\n     /// @param cardinality The cardinality that will be guaranteed when quoting\\n     function prepareSpecificPoolsWithCardinality(address[] calldata pools, uint16 cardinality) external;\\n\\n     /// @notice Adds support for a new fee tier\\n     /// @dev Will revert if the given tier is invalid, or already supported\\n     /// @param feeTier The new fee tier to add\\n     function addNewFeeTier(uint24 feeTier) external;\\n}\\n\"\n    },\n    \"contracts/priceOracle/priceHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.6;\\n\\ninterface IPancakeV3Pool {\\n     function slot0()\\n          external\\n          view\\n          returns (\\n               uint160 sqrtPriceX96,\\n               int24 tick,\\n               uint16 observationIndex,\\n               uint16 observationCardinality,\\n               uint16 observationCardinalityNext,\\n               uint32 feeProtocol,\\n               bool unlocked\\n          );\\n}\\n\\ninterface IPancakeV3Factory {\\n     function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\\n}\\n\\nlibrary PriceHelper {\\n     function getQuoteFromsqrtPriceX96(\\n          address WETH,\\n          address quoteAsset,\\n          address pancakeFactory,\\n          uint128 baseAmount,\\n          bool inverse\\n     ) internal view returns (uint256 quoteAmount) {\\n          if (block.chainid == 31337) return baseAmount;\\n          address poolAddr = IPancakeV3Factory(pancakeFactory).getPool(WETH, quoteAsset, 2500);\\n          if (poolAddr == address(0)) return baseAmount;\\n\\n          (uint160 sqrtPriceX96, , , , , , ) = IPancakeV3Pool(poolAddr).slot0();\\n          if (sqrtPriceX96 <= type(uint128).max) {\\n               uint256 ratioX192 = uint256(sqrtPriceX96) * sqrtPriceX96;\\n               quoteAmount = !inverse\\n                    ? mulDiv(ratioX192, baseAmount, 1 << 192)\\n                    : mulDiv(1 << 192, baseAmount, ratioX192);\\n          } else {\\n               uint256 ratioX128 = mulDiv(sqrtPriceX96, sqrtPriceX96, 1 << 64);\\n               quoteAmount = !inverse\\n                    ? mulDiv(ratioX128, baseAmount, 1 << 128)\\n                    : mulDiv(1 << 128, baseAmount, ratioX128);\\n          }\\n     }\\n\\n     function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n          unchecked {\\n               uint256 prod0;\\n               uint256 prod1;\\n               assembly {\\n                    let mm := mulmod(a, b, not(0))\\n                    prod0 := mul(a, b)\\n                    prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n               }\\n               if (prod1 == 0) {\\n                    require(denominator > 0);\\n                    assembly {\\n                         result := div(prod0, denominator)\\n                    }\\n                    return result;\\n               }\\n               require(denominator > prod1);\\n               uint256 remainder;\\n               assembly {\\n                    remainder := mulmod(a, b, denominator)\\n               }\\n               assembly {\\n                    prod1 := sub(prod1, gt(remainder, prod0))\\n                    prod0 := sub(prod0, remainder)\\n               }\\n               uint256 twos = (0 - denominator) & denominator;\\n               assembly {\\n                    denominator := div(denominator, twos)\\n               }\\n               assembly {\\n                    prod0 := div(prod0, twos)\\n               }\\n               assembly {\\n                    twos := add(div(sub(0, twos), twos), 1)\\n               }\\n               prod0 |= prod1 * twos;\\n               uint256 inv = (3 * denominator) ^ 2;\\n               inv *= 2 - denominator * inv;\\n               inv *= 2 - denominator * inv;\\n               inv *= 2 - denominator * inv;\\n               inv *= 2 - denominator * inv;\\n               inv *= 2 - denominator * inv;\\n               inv *= 2 - denominator * inv;\\n               result = prod0 * inv;\\n               return result;\\n          }\\n     }\\n}\\n\"\n    },\n    \"contracts/SmartWallet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./IWallet.sol\\\";\\nimport \\\"./priceOracle/priceHelper.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPermit2} from \\\"./permit2/interfaces/IPermit2.sol\\\";\\nimport {IAllowanceTransfer} from \\\"./permit2/interfaces/IAllowanceTransfer.sol\\\";\\n\\nabstract contract SmartWallet is UUPSUpgradeable, IWallet {\\n     IPermit2 public PERMIT2;\\n     IAllowanceTransfer PermitBatch;\\n\\n     receive() external payable {\\n          emit LogReceivedEther(msg.sender, msg.value);\\n     }\\n\\n     function __SmartWallet_init() public initializer {\\n          __SmartWallet_init_unchained();\\n     }\\n\\n     function __SmartWallet_init_unchained() internal onlyInitializing {\\n          if (address(this).balance > 0) {\\n               emit LogReceivedEther(msg.sender, address(this).balance);\\n          }\\n     }\\n\\n     function _verify(UserOp[] memory userOps, bytes memory _signature) internal view virtual returns (address);\\n\\n     function _incrementNonce() internal virtual;\\n\\n     function nonce() public view virtual returns (uint256);\\n\\n     function getTradeDetails(uint256 _nonce) public view virtual returns (TradeInfo memory);\\n\\n     function addNewTradeDetails(\\n          address _token0,\\n          address _token1,\\n          address _feeToken,\\n          uint256 _amountIn,\\n          uint256 _gasPrice\\n     ) internal virtual;\\n\\n     function exec(\\n          UserOp[] calldata userOps,\\n          bytes calldata _signature,\\n          address weth,\\n          address pancakeFactory\\n     ) external {\\n          uint256 gasStart = gasleft();\\n          address owner = _verify(userOps, _signature);\\n          _incrementNonce();\\n\\n          for (uint32 i = 0; i < userOps.length; i++) {\\n               require(address(this).balance >= userOps[i].amount, \\\"SmartWallet: insufficient base asset balance\\\");\\n               _call(payable(userOps[i].to), userOps[i].amount, userOps[i].data);\\n          }\\n\\n          TradeInfo memory tradeInfo = getTradeDetails(nonce());\\n          uint256 gasCostInNative = (250000 + gasStart - gasleft()) * tradeInfo._gasPrice;\\n          uint256 gasCostInFeeAsset = PriceHelper.getQuoteFromsqrtPriceX96(\\n               weth,\\n               tradeInfo._feeToken,\\n               pancakeFactory,\\n               uint128(gasCostInNative),\\n               false\\n          );\\n\\n          if (tradeInfo._feeToken == tradeInfo._token1) {\\n               uint256 amountMinusFee = IERC20(tradeInfo._token1).balanceOf(address(this)) - gasCostInFeeAsset;\\n               IERC20(tradeInfo._feeToken).transfer(msg.sender, gasCostInFeeAsset);\\n               IERC20(tradeInfo._feeToken).transfer(owner, amountMinusFee);\\n          }\\n          if (tradeInfo._feeToken == tradeInfo._token0) {\\n               PERMIT2.transferFrom(owner, msg.sender, uint160(gasCostInFeeAsset), tradeInfo._feeToken);\\n          }\\n     }\\n\\n     function _call(address payable _contract, uint256 _value, bytes calldata _data) internal {\\n          (bool ok, bytes memory resp) = _contract.call{value: _value}(_data);\\n\\n          emit LogCall(_contract, _value, _data);\\n          if (!ok) {\\n               assembly {\\n                    revert(add(resp, 32), mload(resp))\\n               }\\n          }\\n     }\\n\\n     function deposit(\\n          uint256 _amount,\\n          address _token,\\n          address _feeAsset,\\n          address _outputToken,\\n          address _user,\\n          address _permit2A,\\n          IAllowanceTransfer.PermitBatch calldata _permit,\\n          uint256 _gasPrice,\\n          bytes calldata _signature\\n     ) external {\\n          require(_gasPrice > 1.5 * 10 ** 9, \\\"gas Price too low\\\");\\n          PERMIT2 = IPermit2(_permit2A);\\n\\n          IAllowanceTransfer.AllowanceTransferDetails memory detailsArray;\\n          detailsArray = IAllowanceTransfer.AllowanceTransferDetails({\\n               from: _user,\\n               to: address(this),\\n               amount: uint160(_amount),\\n               token: _token\\n          });\\n\\n          PERMIT2.permit(_user, _permit, _signature);\\n          PERMIT2.transferFrom(detailsArray.from, detailsArray.to, detailsArray.amount, detailsArray.token);\\n\\n          addNewTradeDetails(_token, _outputToken, _feeAsset, _amount, _gasPrice);\\n     }\\n\\n     function quoteGasFeeInAsset(\\n          address weth,\\n          address quoteAsset,\\n          address pancakeFactory,\\n          uint128 gasCostInNative\\n     ) public view returns (uint256) {\\n          return PriceHelper.getQuoteFromsqrtPriceX96(weth, quoteAsset, pancakeFactory, gasCostInNative, false);\\n     }\\n\\n     function _authorizeUpgrade(address) internal view override {\\n          require(msg.sender == address(this));\\n     }\\n}\\n\"\n    },\n    \"contracts/SmartWalletFactory.sol\": {\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"./IWalletFactory.sol\\\";\\nimport \\\"./ECDSAWallet.sol\\\";\\n\\ncontract SmartWalletFactory is IWalletFactory {\\n     mapping(bytes32 => uint256) nonces;\\n\\n     event WalletCreated(address indexed _wallet, bytes32 indexed _callID);\\n\\n     function createWallet(address _impl, bytes memory _call) external payable returns (IWallet) {\\n          require(msg.value > 0, \\\"user needs to fund wallet on creaton\\\");\\n          bytes32 callID = keccak256(_call);\\n\\n          // salt is derived from call hash and nonce, this is to allow the same user to\\n          // create and control multiple SmartWallets with the same private key\\n          ERC1967Proxy wallet_ = new ERC1967Proxy{salt: keccak256(abi.encode(callID, nonces[callID]++))}(\\n               address(_impl),\\n               _call\\n          );\\n\\n          emit WalletCreated(address(wallet_), callID);\\n          IWallet wallet = IWallet(payable(wallet_));\\n\\n          (bool ok, ) = address(wallet).call{value: msg.value}(\\\"\\\");\\n          require(ok, \\\"SmartWallet: Failed to creation Fee\\\");\\n\\n          return wallet;\\n     }\\n\\n     function walletAddress(address _impl, bytes memory _call, uint256 _nonce) public view returns (address) {\\n          bytes32 callID = keccak256(_call);\\n          return\\n               address(\\n                    uint160(\\n                         uint(\\n                              keccak256(\\n                                   abi.encodePacked(\\n                                        bytes1(0xff),\\n                                        address(this),\\n                                        keccak256(abi.encode(callID, _nonce)),\\n                                        keccak256(\\n                                             abi.encodePacked(type(ERC1967Proxy).creationCode, abi.encode(_impl, _call))\\n                                        )\\n                                   )\\n                              )\\n                         )\\n                    )\\n               );\\n     }\\n}\\n\"\n    },\n    \"contracts/utils/mockAMM.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract AMMSwap {\\n     address public owner;\\n     IERC20 public inputToken;\\n     IERC20 public outputToken;\\n\\n     constructor(address _inputToken, address _outputToken) {\\n          inputToken = IERC20(_inputToken);\\n          outputToken = IERC20(_outputToken);\\n     }\\n\\n     // Swap inputToken for outputToken and send to receiver\\n     function swap(uint256 amount, address receiver) external {\\n          // Transfer inputToken from owner to contract\\n          inputToken.transferFrom(msg.sender, address(this), amount);\\n\\n          // Calculate output amount based on simple exchange rate (for demonstration)\\n          uint256 outputAmount = amount * 3; // Example: double the input amount\\n\\n          // Transfer outputToken to receiver\\n          outputToken.transfer(receiver, outputAmount);\\n     }\\n\\n     // Owner can withdraw any accidentally sent tokens\\n     function withdrawToken(address token, address to, uint256 amount) external {\\n          require(msg.sender == owner, \\\"Only owner can withdraw\\\");\\n          IERC20(token).transfer(to, amount);\\n     }\\n}\\n\"\n    },\n    \"contracts/utils/NonceHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../permit2/interfaces/ISignatureTransfer.sol\\\";\\n\\n// helper contract to calculate nonce for permit sigs\\ncontract Permit2NonceFinder {\\n      ISignatureTransfer public immutable permit2;\\n\\n      constructor(address _permit2) {\\n            permit2 = ISignatureTransfer(_permit2);\\n      }\\n\\n      function nextNonce(address owner) external view returns (uint256 nonce) {\\n            nonce = _nextNonce(owner, 0, 0);\\n      }\\n\\n      function nextNonceAfter(address owner, uint256 start) external view returns (uint256 nonce) {\\n            uint248 word = uint248(start >> 8);\\n            uint8 pos = uint8(start);\\n            if (pos == type(uint8).max) {\\n                  // If the position is 255, we need to move to the next word\\n                  word++;\\n                  pos = 0;\\n            } else {\\n                  // Otherwise, we just move to the next position\\n                  pos++;\\n            }\\n            nonce = _nextNonce(owner, word, pos);\\n      }\\n\\n      function _nextNonce(address owner, uint248 word, uint8 pos) internal view returns (uint256 nonce) {\\n            while (true) {\\n                  uint256 bitmap = permit2.nonceBitmap(owner, word);\\n\\n                  if (bitmap == type(uint256).max) {\\n                        // If so, move to the next word\\n                        ++word;\\n                        pos = 0;\\n                        continue;\\n                  }\\n                  if (pos != 0) {\\n                        bitmap = bitmap >> pos;\\n                  }\\n                  // Find the first zero bit in the bitmap\\n                  while (bitmap & 1 == 1) {\\n                        bitmap = bitmap >> 1;\\n                        ++pos;\\n                  }\\n\\n                  return _nonceFromWordAndPos(word, pos);\\n            }\\n      }\\n\\n      function _nonceFromWordAndPos(uint248 word, uint8 pos) internal pure returns (uint256 nonce) {\\n            // The last 248 bits of the word are the nonce bits\\n            nonce = uint256(word) << 8;\\n            // The first 8 bits of the word are the position inside the word\\n            nonce |= pos;\\n      }\\n}\\n\"\n    },\n    \"contracts/utils/Test.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol\\\";\\n\\ncontract ABC is ERC20PresetFixedSupply {\\n    constructor() ERC20PresetFixedSupply(\\\"ABC\\\", \\\"ABC\\\", 1e27, msg.sender) {}\\n}\\n\\ncontract PQR is ERC20PresetFixedSupply {\\n    constructor() ERC20PresetFixedSupply(\\\"PQR\\\", \\\"PQR\\\", 1e27, msg.sender) {}\\n}\\n\\ncontract XYZ is ERC20PresetFixedSupply {\\n    constructor() ERC20PresetFixedSupply(\\\"XYZ\\\", \\\"XYZ\\\", 1e27, msg.sender) {}\\n}\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\"\n    },\n    \"solmate/src/tokens/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\n    },\n    \"solmate/src/utils/SafeTransferLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"evmVersion\": \"istanbul\",\n    \"viaIR\": true,\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "5c2aad68da5b616a81a0faf12b42ed77",
      "transactionHash": "0x9000459590d4ce0e90ac6331cc217945abae07e2b3a07aa169dc14af132cf2c8",
      "args": []
    },
    "decoded": {
      "from": "0xdBf48f5DB3d4bd13b9a29052947cB2edD6a2d132",
      "gasPrice": "11400000000",
      "maxFeePerGas": "11400000000",
      "maxPriorityFeePerGas": "11400000000",
      "gasLimit": "1763227",
      "to": null,
      "value": "0",
      "nonce": 307,
      "data": "0x60c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a55782604052519020608052611efc90816100c182396080518161161a015260a051816115f40152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db14610f8f578063137c29fe14610dd45780632a2d80d114610b695780632b67b570146109f257806330f28b7a1461092e5780633644e5151461090b57806336c78516146108c15780633ff9dcb11461085f5780634fe02b441461082157806365d9723c146106d257806387517c45146105dc578063927da10514610550578063cc53287f14610466578063edd9444b1461033f5763fe8ec1a7146100c657600080fd5b3461033b5760c036600319011261033b5767ffffffffffffffff928035848111610337576100f79036908301611281565b6024358581116103335761010e9036908401611250565b610116611161565b9160843588811161032f5761012e90369087016111f7565b95909860a43590811161032b5795989561014a913691016111f7565b969095815190610159826110c0565b606b9081835260209b8c917f5065726d697442617463685769746e6573735472616e7366657246726f6d2854838601527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472868601527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608601527f3620646561646c696e652c00000000000000000000000000000000000000000060808601528c8651958694825b87811061030957505050918084926102329694608b8097019081523781018d8482015203908101845201826110f8565b89815191012090855151996102468b6118ea565b9a8a5b8181106102db5750506102d8999a6102cf916102c38451928361026f8482018093611941565b0393610283601f19958681018352826110f8565b5190208a830151868c0151965193840197885260208801919091523360408801526060870152608086019490945260643560a086015292839060c0860190565b039081018352826110f8565b5190209361178b565b80f35b808d6102fe826102f86102f2610304968f5161137b565b516119f7565b9261137b565b5261191c565b610249565b90829495965080935081819301015182828a01015201918e9187959493610202565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b50913461033b57608036600319011261033b5767ffffffffffffffff908035828111610337576103729036908301611281565b602435838111610333576103899036908401611250565b939092610394611161565b91606435908111610462576103ab913691016111f7565b949093835151976103bb896118ea565b98885b8181106104465750506102d8979881516103ee816103e0602082018095611941565b03601f1981018352826110f8565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102cf816110dc565b808b6102fe826102f86102f261045d968d5161137b565b6103be565b8680fd5b50823461054c57602090816003193601126103375780359067ffffffffffffffff82116103335761049991369101611250565b929091845b8481106104a9578580f35b806104bf6104ba60019388886114a1565b6114b1565b6104d4846104ce848a8a6114a1565b016114b1565b338952838552858920916001600160a01b0380911692838b528652868a20911690818a52855285892073ffffffffffffffffffffffffffffffffffffffff1981541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a20161049e565b8280fd5b503461033b57606036600319011261033b576105d88161056e611135565b9361057761114b565b61057f611161565b6001600160a01b03968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b503461033b57608036600319011261033b576105f6611135565b906105ff61114b565b91610608611161565b65ffffffffffff926064358481169081810361032f5765ffffffffffff60a01b947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b20986001600160a01b03809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146106ca57504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b9050926106a9565b50823461054c57606036600319011261054c576106ed611135565b906106f661114b565b9265ffffffffffff604435818116939084810361032f5733885260209160018352848920966001600160a01b0380911697888b528452858a20981697888a5283528489205460d01c93848711156108125761ffff9085840316116107eb5750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b508451633ab3447f60e11b8152fd5b503461033b578060031936011261033b57806020926001600160a01b03610846611135565b1681528084528181206024358252845220549051908152f35b50823461054c578160031936011261054c577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610908576080366003190112610908576108db611135565b6108e361114b565b6108eb611161565b606435916001600160a01b0383168303610333576102d8936113a5565b80fd5b503461033b578160031936011261033b576020906109276115f1565b9051908152f35b5082903461054c5761010036600319011261054c5761094c3661118b565b90806083193601126103375761096061111a565b9160e43567ffffffffffffffff81116109ee576102d894610983913691016111f7565b93909261099083516119f7565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a081526109e5816110dc565b519020916116f8565b8580fd5b50913461033b5761010036600319011261033b57610a0e611135565b366023190160c08112610337576080855191610a29836110a4565b1261033757845190610a3a82611072565b6001600160a01b03916024358381168103610462578152604435838116810361046257602082015265ffffffffffff606435818116810361032f57888301526084359081168103610462576060820152815260a4359382851685036109ee576020820194855260c4359087830182815260e43567ffffffffffffffff811161032b57610ac990369084016111f7565b929093804211610b53575050918591610b436102d8999a610b4995610aee885161196e565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610b3b816110c0565b5190206116ac565b91611a5d565b51925116916114c5565b602492508a519163cd21db4f60e01b8352820152fd5b50913461033b57606060031993818536011261033757610b87611135565b9260249081359267ffffffffffffffff9788851161032f57859085360301126104625780519785890189811082821117610dc25782528483013581811161032b578501903660238301121561032b578382013591610be483611225565b90610bf1855192836110f8565b838252602093878584019160071b83010191368311610dbe578801905b828210610d61575050508a526044610c27868801611177565b96838c01978852013594838b0191868352604435908111610d5d57610c4f90369087016111f7565b959096804211610d4b575050508998995151610c6a816118ea565b908b5b818110610d1e57505092889492610b4392610ceb97958351610c96816103e08682018095611941565b519020906001600160a01b039a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610b3b816110c0565b51169082515192845b848110610cff578580f35b80610d188585610d12600195875161137b565b516114c5565b01610cf4565b80610d39610d338e9f9e93610d43945161137b565b5161196e565b6102fe828661137b565b9b9a9b610c6d565b85519163cd21db4f60e01b8352820152fd5b8a80fd5b608082360312610dbe57856080918851610d7a81611072565b610d8385611177565b8152610d90838601611177565b83820152610d9f8a860161123d565b8a8201528d610daf81870161123d565b90820152815201910190610c0e565b8c80fd5b8489604186634e487b7160e01b835252fd5b503461033b5761014036600319011261033b57610df03661118b565b908060831936011261054c57610e0461111a565b67ffffffffffffffff9290610104358481116109ee57610e2790369088016111f7565b9690946101243590811161046257610e41913691016111f7565b949093805197610e50896110c0565b606490818a526020937f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e50858c01527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848c01527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608c01527f696e652c0000000000000000000000000000000000000000000000000000000060808c015283519a8a5b848110610f7c57505060846109e5938c8c856102d89e9f96610f2b96868501848152378201908482015203908101845201826110f8565b838151910120926103e0610f3f87516119f7565b8783015185890151955193840196875260208701919091523360408701526060860152608085019390935260e43560a085015291829060c0850190565b8181018701518d82018801528601610ef4565b50823461054c5760208060031936011261033757813567ffffffffffffffff928382116109ee57366023830112156109ee57810135928311610333576024906007368386831b8401011161046257865b858110610fea578780f35b80821b8301906080602319833603011261032b5761106c88876001946060835161101381611072565b61104f60846110238d8601611177565b9485845261103360448201611177565b809785015261104460648201611177565b809885015201611177565b91829101526001600160a01b0380808093169516931691166113a5565b01610fdf565b6080810190811067ffffffffffffffff82111761108e57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761108e57604052565b60a0810190811067ffffffffffffffff82111761108e57604052565b60c0810190811067ffffffffffffffff82111761108e57604052565b90601f8019910116810190811067ffffffffffffffff82111761108e57604052565b60c435906001600160a01b038216820361113057565b600080fd5b600435906001600160a01b038216820361113057565b602435906001600160a01b038216820361113057565b604435906001600160a01b038216820361113057565b35906001600160a01b038216820361113057565b6003190190608082126111305760408051906111a6826110a4565b8082941261113057805181810181811067ffffffffffffffff82111761108e5782526004356001600160a01b0381168103611130578152602435602082015282526044356020830152606435910152565b9181601f840112156111305782359167ffffffffffffffff8311611130576020838186019501011161113057565b67ffffffffffffffff811161108e5760051b60200190565b359065ffffffffffff8216820361113057565b9181601f840112156111305782359167ffffffffffffffff8311611130576020808501948460061b01011161113057565b91909160608184031261113057604080519161129c836110a4565b8294813567ffffffffffffffff9081811161113057830182601f820112156111305780356112c981611225565b926112d6875194856110f8565b818452602094858086019360061b85010193818511611130579086899897969594939201925b848410611319575050505050855280820135908501520135910152565b909192939495969784830312611130578851908982019082821085831117611366578a928992845261134a87611177565b81528287013583820152815201930191908897969594936112fc565b60246000634e487b7160e01b81526041600452fd5b805182101561138f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9291926001600160a01b03604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611470575082871696838803611409575b505061140795501692611e03565b565b878484161160001461144657602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b73ffffffffffffffffffffffffffffffffffffffff1984846114079a0316911617905538806113f9565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b919081101561138f5760061b0190565b356001600160a01b03811681036111305790565b9065ffffffffffff90816060840151166001600160a01b03908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c036115e15791856115cb94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec989796945087156000146115d05765ffffffffffff60a01b9042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b161717905551938493849160409194936001600160a01b03606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5065ffffffffffff60a01b8761156a565b60048451633ab3447f60e11b8152fd5b467f00000000000000000000000000000000000000000000000000000000000000000361163c577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a6040820152466060820152306080820152608081526116a6816110c0565b51902090565b6116b46115f1565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526116a681611072565b9192909360a435936040840151804211611773575060208451015180861161175b5750918591610b436117389461173360208801518661189c565b6116ac565b6001600160a01b0380915151169260843591821682036111305761140793611e03565b60249060405190633728b83d60e01b82526004820152fd5b6024906040519063cd21db4f60e01b82526004820152fd5b959093958051519560409283830151804211611885575084880361185c576117c2918691610b4360209b6117338d8801518661189c565b60005b8681106117d6575050505050505050565b6117e181835161137b565b51886117ee83878a6114a1565b01359089810151808311611845575091818888886001968596611818575b505050505050016117c5565b61183a95611834926001600160a01b036104ba935116956114a1565b91611e03565b80388888888361180c565b602490865190633728b83d60e01b82526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b60249085519063cd21db4f60e01b82526004820152fd5b906001600160a01b03600160ff83161b9216600052600060205260406000209060081c60005260205260406000208181541880915516156118d957565b6004604051633ab3447f60e11b8152fd5b906118f482611225565b61190160405191826110f8565b8281528092611912601f1991611225565b0190602036910137565b600019811461192b5760010190565b634e487b7160e01b600052601160045260246000fd5b805160208092019160005b82811061195a575050505090565b83518552938101939281019260010161194c565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b367883526001600160a01b038082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff82111761108e5760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a184526001600160a01b03815116604084015201516060820152606081526116a681611072565b9190826040910312611130576020823592013590565b909290916000823b611ca9575060418403611c2157611a7e84840184611a47565b9190946040101561138f576080600091604060ff96013560f81c935b60409788519283526020978896168684015288830152606082015282805260015afa15611c1657600051835184810181811067ffffffffffffffff82111761108e578552601081527f797979797979797979797979797979790000000000000000000000000000000084820152845190848201927e7150be0000000000000000000000000000000000000000000000000000000084526001600160a01b038091169485602485015216948560448401526060606484015281519182608485015260005b838110611c02575050509181611b9160a4828660008381998299010152601f801991011681010360848101845201826110f8565b51906a636f6e736f6c652e6c6f675afa508015611bd95703611bb05750565b600490517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b600483517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b81810183015185820160a401528201611b5d565b82513d6000823e3d90fd5b91604084929414600014611c7f57611c3b91810190611a47565b929092601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169160ff1c019260ff841161192b57608060009160ff9593611a9a565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b92938092602092956001600160a01b0360646040518097819682957f1626ba7e000000000000000000000000000000000000000000000000000000009c8d85526004850152604060248501528160448501528484013781810183018a9052601f01601f19168101030192165afa908115611df8578291611d7a575b507fffffffff0000000000000000000000000000000000000000000000000000000091501603611d5057565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d8211611df0575b81611d94602093836110f8565b8101031261033b5751907fffffffff000000000000000000000000000000000000000000000000000000008216820361090857507fffffffff000000000000000000000000000000000000000000000000000000009038611d24565b3d9150611d87565b6040513d84823e3d90fd5b9160008093602095606494604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b03809216600487015216602485015260448401525af13d15601f3d1160016000511416171615611e6857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfea2646970667358221220d1f01af73caf72ea274682f34e0e2f5cf5436b1762a3d73d908d8cff1746ff8064736f6c63430008110033",
      "r": "0x3caa8c0630313c7ad3cd4c9f727cf92ee04a80949397bebd39ce91788dced80b",
      "s": "0x140f22552e9ff5560fef4928a5fc1890a41476cc999d1051bc513ecaae1f1de1",
      "v": 0,
      "chainId": 97
    }
  }
}