{
  "address": "0x6b4Ec059199883dfE189E8f131d2e79044a52eA3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SmartWalletFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "createWallet",
      "outputs": [
        {
          "internalType": "contract IWallet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract SmartWalletFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "contract ECDSAWallet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "walletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x819d4c9135363bfcd787079e4de0a1f26d37cb15970520b594cd7859b1957d58",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xdBf48f5DB3d4bd13b9a29052947cB2edD6a2d132",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "3987555",
    "logsBloom": "0x
    "blockHash": "0x77b7a18c1dd15e06286e6906b5276c4c649be41ea91eaea1f1653c6ccda2fab3",
    "transactionHash": "0x819d4c9135363bfcd787079e4de0a1f26d37cb15970520b594cd7859b1957d58",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 39646839,
        "transactionHash": "0x819d4c9135363bfcd787079e4de0a1f26d37cb15970520b594cd7859b1957d58",
        "address": "0xe08555Bc1Be43A3927D846a98614ab3049010052",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0x77b7a18c1dd15e06286e6906b5276c4c649be41ea91eaea1f1653c6ccda2fab3"
      }
    ],
    "blockNumber": 39646839,
    "cumulativeGasUsed": "4132490",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x518B14d78DF55F51508281F58352E1607177B685"
  ],
  "numDeployments": 17,
  "solcInputHash": "e19069992a7c36fcfd744f12175c08e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SmartWalletFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"contract IWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract SmartWalletFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"contract ECDSAWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"walletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ECDSAWalletFactory.sol\":\"ECDSAWalletFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n     /**\\n      * @dev Returns true if `account` is a contract.\\n      *\\n      * [IMPORTANT]\\n      * ====\\n      * It is unsafe to assume that an address for which this function returns\\n      * false is an externally-owned account (EOA) and not a contract.\\n      *\\n      * Among others, `isContract` will return false for the following\\n      * types of addresses:\\n      *\\n      *  - an externally-owned account\\n      *  - a contract in construction\\n      *  - an address where a contract will be created\\n      *  - an address where a contract lived, but was destroyed\\n      *\\n      * Furthermore, `isContract` will also return true if the target contract within\\n      * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n      * which only has an effect at the end of a transaction.\\n      * ====\\n      *\\n      * [IMPORTANT]\\n      * ====\\n      * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n      *\\n      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n      * constructor.\\n      * ====\\n      */\\n     function isContract(address account) internal view returns (bool) {\\n          // This method relies on extcodesize/address.code.length, which returns 0\\n          // for contracts in construction, since the code is only stored at the end\\n          // of the constructor execution.\\n\\n          return account.code.length > 0;\\n     }\\n\\n     /**\\n      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n      * `recipient`, forwarding all available gas and reverting on errors.\\n      *\\n      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n      * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n      * imposed by `transfer`, making them unable to receive funds via\\n      * `transfer`. {sendValue} removes this limitation.\\n      *\\n      * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n      *\\n      * IMPORTANT: because control is transferred to `recipient`, care must be\\n      * taken to not create reentrancy vulnerabilities. Consider using\\n      * {ReentrancyGuard} or the\\n      * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n      */\\n     function sendValue(address payable recipient, uint256 amount) internal {\\n          require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n          (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n          require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n     }\\n\\n     /**\\n      * @dev Performs a Solidity function call using a low level `call`. A\\n      * plain `call` is an unsafe replacement for a function call: use this\\n      * function instead.\\n      *\\n      * If `target` reverts with a revert reason, it is bubbled up by this\\n      * function (like regular Solidity function calls).\\n      *\\n      * Returns the raw returned data. To convert to the expected return value,\\n      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n      *\\n      * Requirements:\\n      *\\n      * - `target` must be a contract.\\n      * - calling `target` with `data` must not revert.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n          return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n      * `errorMessage` as a fallback revert reason when `target` reverts.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCall(\\n          address target,\\n          bytes memory data,\\n          string memory errorMessage\\n     ) internal returns (bytes memory) {\\n          return functionCallWithValue(target, data, 0, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n      * but also transferring `value` wei to `target`.\\n      *\\n      * Requirements:\\n      *\\n      * - the calling contract must have an ETH balance of at least `value`.\\n      * - the called Solidity function must be `payable`.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n          return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n      * with `errorMessage` as a fallback revert reason when `target` reverts.\\n      *\\n      * _Available since v3.1._\\n      */\\n     function functionCallWithValue(\\n          address target,\\n          bytes memory data,\\n          uint256 value,\\n          string memory errorMessage\\n     ) internal returns (bytes memory) {\\n          require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n          (bool success, bytes memory returndata) = target.call{value: value}(data);\\n          return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n      * but performing a static call.\\n      *\\n      * _Available since v3.3._\\n      */\\n     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n          return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n      * but performing a static call.\\n      *\\n      * _Available since v3.3._\\n      */\\n     function functionStaticCall(\\n          address target,\\n          bytes memory data,\\n          string memory errorMessage\\n     ) internal view returns (bytes memory) {\\n          (bool success, bytes memory returndata) = target.staticcall(data);\\n          return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n      * but performing a delegate call.\\n      *\\n      * _Available since v3.4._\\n      */\\n     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n          return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n     }\\n\\n     /**\\n      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n      * but performing a delegate call.\\n      *\\n      * _Available since v3.4._\\n      */\\n     function functionDelegateCall(\\n          address target,\\n          bytes memory data,\\n          string memory errorMessage\\n     ) internal returns (bytes memory) {\\n          (bool success, bytes memory returndata) = target.delegatecall(data);\\n          return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n     }\\n\\n     /**\\n      * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n      * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n      *\\n      * _Available since v4.8._\\n      */\\n     function verifyCallResultFromTarget(\\n          address target,\\n          bool success,\\n          bytes memory returndata,\\n          string memory errorMessage\\n     ) internal view returns (bytes memory) {\\n          if (success) {\\n               if (returndata.length == 0) {\\n                    // only check isContract if the call was successful and the return data is empty\\n                    // otherwise we already know that it was a contract\\n                    require(isContract(target), \\\"Address: call to non-contract\\\");\\n               }\\n               return returndata;\\n          } else {\\n               _revert(returndata, errorMessage);\\n          }\\n     }\\n\\n     /**\\n      * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n      * revert reason or using the provided one.\\n      *\\n      * _Available since v4.3._\\n      */\\n     function verifyCallResult(\\n          bool success,\\n          bytes memory returndata,\\n          string memory errorMessage\\n     ) internal pure returns (bytes memory) {\\n          if (success) {\\n               return returndata;\\n          } else {\\n               _revert(returndata, errorMessage);\\n          }\\n     }\\n\\n     function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n          // Look for revert reason and bubble it up if present\\n          if (returndata.length > 0) {\\n               // The easiest way to bubble the revert reason is using memory via assembly\\n               /// @solidity memory-safe-assembly\\n               assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n               }\\n          } else {\\n               revert(errorMessage);\\n          }\\n     }\\n}\\n\",\"keccak256\":\"0x2910cc8298163cc38e45b6d489ff8ed62f24fcbf959ab415e460a0e7f5a6df10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/ECDSAWallet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport {ECDSAWalletView} from \\\"./ECDSAWalletView.sol\\\";\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {Allowance} from \\\"./libraries/AllowanceHelperLib.sol\\\";\\nimport {SmartWalletHasher} from \\\"./libraries/HasherLib.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {PriceHelper} from \\\"./libraries/FeeHelperLib.sol\\\";\\n\\n// ECDSA ERC1967 implementation contract for the Base samrt wallet Spec. this contract\\n// handles the EIP712 Data signtures and verification. aswell as adding extra custom Permit2\\n// funtionality to enable direct tranerring of assets from owners EOA to their smart wallet\\n// in one signature. This is idea for swap transactions. This impl also requires user pys\\n//rhe reylayer back the gas cost for exec execution. this functionality is implemented\\n// in the optional _walletExecCallback() func, users gas pay relayer back in Native and\\n// ERC20 assets\\ncontract ECDSAWallet is ECDSAWalletView {\\n  using SafeTransferLib for ERC20;\\n  using Allowance for PackedAllowance;\\n  using SmartWalletHasher for ECDSAExec;\\n  using SmartWalletHasher for UserOp;\\n  using SmartWalletHasher for AllowanceOp;\\n  using ECDSAUpgradeable for bytes32;\\n\\n  // new verify func i borrowd from uni permit2. old one ws fine but want to remain consistent since\\n  // im integrating custom perit for this wallet. a users smart wallet is the only entity that can permit\\n  // spenders which is a measure against attack vectors. however transfer from can still be called externally\\n  function _verify(ECDSAExec memory _walletExec, bytes memory _signature) internal override {\\n    (uint256 _decodedSigChainID, bytes memory _sig) = abi.decode(_signature, (uint256, bytes));\\n    bytes32 dataHash = domainSeperator(_decodedSigChainID).toTypedDataHash(_walletExec.hash());\\n\\n    _verifyNonce(_walletExec.nonce);\\n    _verifySigChain(_decodedSigChainID, _walletExec);\\n    _verifyECDSAExecRequest(_sig, dataHash, owner());\\n    _permitWalletForOwner(_walletExec.allowanceOp);\\n\\n    validationResultsMap[nonce()] = ECDSAExecValidationDetails(owner(), dataHash, _signature, _walletExec.wallet, nonce());\\n    emit WalletOpRecoveryResult(owner(), dataHash, _signature, _walletExec.wallet, nonce());\\n  }\\n\\n  // implementation of cleanu function after smart wallet calls have finished. cleanup involves refunding the relayer\\n  // for paying the gass fees for the exec calls. this needs to be improved\\n  function _walletExecCallback(uint256 execGasUse, ECDSAExec memory walletExec, bytes memory _sig) internal override {\\n    address feeToken = walletExec.allowanceOp.details[1].token;\\n    factory.queryFeeAsset(feeToken);\\n\\n    uint256 gasCostInNative = (35000 + execGasUse - gasleft()) * 5 * 10 ** 9;\\n    uint160 gasCostInFeeAsset = uint160(\\n      PriceHelper.quoteGasPriceInFeeAsset(\\n        factory.WETH9(),\\n        feeToken,\\n        factory.PANCAKE_V2_FACTORY(),\\n        factory.PANCAKE_V3_FACTORY(),\\n        uint128(gasCostInNative)\\n      )\\n    );\\n    // since this function is outside of the Smart wallet the call comes from we need to call this contracts transferFrom\\n    // through an encoded call so that msg sender is the contract address and not the sc caller.\\n    string memory tranaferThash = \\\"transferFrom(address,address,uint160,address)\\\";\\n    string memory bridgeThash = \\\"verifyBridgeReq(bytes,bytes)\\\";\\n\\n    bytes memory encodedTransferToRelayer = abi.encodeWithSignature(tranaferThash, owner(), msg.sender, gasCostInFeeAsset, feeToken);\\n    bytes memory encodedBridgeDataValidationReq = abi.encodeWithSignature(bridgeThash, abi.encode(walletExec), _sig);\\n\\n    _verifyFeeAssetBalance(feeToken, gasCostInFeeAsset);\\n    _call(payable(address(this)), 0, encodedTransferToRelayer);\\n    _revokeAllowance(walletExec.allowanceOp);\\n\\n    if (walletExec.bridgeOps.length > 0) _call(payable(bridgeVerifier), 0, encodedBridgeDataValidationReq);\\n  }\\n\\n  function transferFrom(address from, address to, uint160 amount, address token) external onlyWalletSigners {\\n    _transfer(from, to, amount, token);\\n  }\\n\\n  function _transfer(address from, address to, uint160 amount, address token) private {\\n    PackedAllowance storage allowed = allowance[from][token][msg.sender];\\n\\n    if (block.timestamp > allowed.expiration) revert SignatureExpired(\\\"transfer allowance has expired\\\");\\n\\n    uint256 maxAmount = allowed.amount;\\n    if (maxAmount != type(uint160).max) {\\n      if (amount > maxAmount) revert InsufficentAllowance(\\\"failed to transfer, insufficient allowance\\\");\\n      else {\\n        unchecked {\\n          allowed.amount = uint160(maxAmount) - amount;\\n        }\\n      }\\n    }\\n    ERC20(token).safeTransferFrom(from, to, amount);\\n  }\\n\\n  function approve(address token, address spender, uint160 amount, uint48 expiration) external onlyWalletSigners {\\n    PackedAllowance storage allowed = allowance[msg.sender][token][spender];\\n    allowed.updateAmountAndExpiration(amount, expiration);\\n    emit Approval(msg.sender, token, spender, amount, expiration);\\n  }\\n\\n  function _revokeAllowance(AllowanceOp memory allowanceOp) private {\\n    AllowanceOpDetails[] memory details;\\n    for (uint8 i = 0; i < details.length; i++) {\\n      allowance[owner()][details[i].token][allowanceOp.spender].amount = 0;\\n      allowance[owner()][details[i].token][allowanceOp.spender].expiration = 0;\\n    }\\n  }\\n\\n  function _permitWalletForOwner(AllowanceOp memory allowanceOp) private {\\n    unchecked {\\n      address _spender = allowanceOp.spender;\\n      uint256 length = allowanceOp.details.length;\\n\\n      for (uint256 i = 0; i < length; ++i) {\\n        if (allowanceOp.spender != address(0)) {\\n          uint48 _nonce = allowanceOp.details[i].nonce;\\n          address token = allowanceOp.details[i].token;\\n          uint160 amount = allowanceOp.details[i].amount;\\n          uint48 expiration = allowanceOp.details[i].expiration;\\n          PackedAllowance storage allowed = allowance[owner()][token][_spender];\\n\\n          _verifyAllowanceNonce(_nonce, allowed.nonce);\\n          _verifySignatureDeadline(allowanceOp.sigDeadline);\\n\\n          allowed.updateAll(amount, expiration, _nonce);\\n          emit Permit(owner(), token, _spender, amount, expiration, _nonce);\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf43c11648d466a7ab4c65dab8f1273782f35eff3f3276ba5b3e3b81090405dcd\",\"license\":\"Unlicense\"},\"contracts/ECDSAWalletFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport {ECDSAWalletState} from \\\"./ECDSAWalletState.sol\\\";\\nimport {ECDSAWallet} from \\\"./ECDSAWallet.sol\\\";\\nimport {SmartWalletFactory} from \\\"./SmartWalletFactory.sol\\\";\\nimport {IWallet} from \\\"./interfaces/IWallet.sol\\\";\\n\\ncontract ECDSAWalletFactory {\\n  SmartWalletFactory public factory;\\n  ECDSAWallet public wallet;\\n\\n  constructor(SmartWalletFactory _factory) {\\n    wallet = new ECDSAWallet();\\n    wallet.__ECDSAWallet_init(address(0));\\n\\n    factory = _factory;\\n  }\\n\\n  function createWallet(address _owner) external payable returns (IWallet) {\\n    return factory.createWallet{value: msg.value}(address(wallet), abi.encodeWithSelector(ECDSAWalletState.__ECDSAWallet_init.selector, _owner));\\n  }\\n\\n  function walletAddress(address _owner, uint256 _nonce) public view returns (address) {\\n    return factory.walletAddress(address(wallet), abi.encodeWithSelector(ECDSAWalletState.__ECDSAWallet_init.selector, _owner), _nonce);\\n  }\\n}\\n\",\"keccak256\":\"0x96cc10db029762d051ebc3a32b260fd148f3c0d0eb964fbd6ae256bb63d5b9c6\",\"license\":\"Unlicense\"},\"contracts/ECDSAWalletState.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"./SmartWallet.sol\\\";\\nimport \\\"./SmartWalletFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\n// ECDSA ERC1967 implementation contract for the Base samrt wallet Spec. this contract\\n// handles the EIP712 Data signtures and verification. aswell as adding extra custom Permit2\\n// funtionality to enable direct tranerring of assets from owners EOA to their smart wallet\\n// in one signature. This is idea for swap transactions. This impl also requires user pys\\n//rhe reylayer back the gas cost for exec execution. this functionality is implemented\\n// in the optional _walletExecCallback() func, users gas pay relayer back in Native and\\n// ERC20 assets\\nabstract contract ECDSAWalletState is SmartWallet {\\n  SmartWalletFactory factory;\\n\\n  bytes32 public constant ECDSA_WALLET_STORAGE_POSITION = keccak256(\\\"wallet.ecdsa.v1\\\");\\n  bytes32 public constant HASHED_NAME = keccak256(bytes(\\\"ECDSAWallet\\\"));\\n  bytes32 public constant HASHED_VERSION = keccak256(bytes(\\\"0.0.1\\\"));\\n  bytes32 public constant TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  function __ECDSAWallet_init(address _owner) public initializer {\\n    __SmartWallet_init_unchained();\\n    __ECDSAWallet_init_unchained(_owner);\\n    factory = SmartWalletFactory(msg.sender);\\n  }\\n\\n  function __ECDSAWallet_init_unchained(address _owner) internal onlyInitializing {\\n    state().owner = _owner;\\n  }\\n\\n  // erc1967 proxy require state vars be initialised with storage pointer\\n  // creating normal state vars cant be read by individual proxy instances\\n  function state() internal pure returns (WalletState storage s) {\\n    bytes32 position = ECDSA_WALLET_STORAGE_POSITION;\\n    assembly {\\n      s.slot := position\\n    }\\n  }\\n\\n  function domainSeperator(uint256 _chainID) public view returns (bytes32) {\\n    return keccak256(abi.encode(TYPE_HASH, HASHED_NAME, HASHED_VERSION, _chainID, address(this)));\\n  }\\n\\n  // implemenation of base SW  spec\\n  function owner() public view virtual override returns (address) {\\n    return state().owner;\\n  }\\n\\n  function nonce() public view virtual override returns (uint256) {\\n    return state().nonce;\\n  }\\n\\n  function _incrementNonce() internal override {\\n    state().nonce++;\\n  }\\n\\n  mapping(uint256 => ECDSAExecValidationDetails) public validationResultsMap;\\n  mapping(address => mapping(address => mapping(address => PackedAllowance))) public allowance;\\n\\n  modifier onlyWalletSigners() {\\n    require(msg.sender == address(this) || msg.sender == owner(), \\\"Only wallet signers allowed\\\");\\n    _;\\n  }\\n  struct WalletState {\\n    address owner;\\n    uint96 nonce;\\n  }\\n}\\n\",\"keccak256\":\"0xaf3f9488e05d0b45153fad4ebb0bdcceeaf487abb830aa9bbb6094571f3ede8a\",\"license\":\"Unlicense\"},\"contracts/ECDSAWalletView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport {IWallet} from \\\"./interfaces/IWallet.sol\\\";\\nimport {IERC1271} from \\\"./interfaces/IERC1271.sol\\\";\\nimport {SmartWalletHasher} from \\\"./libraries/HasherLib.sol\\\";\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport \\\"./ECDSAWalletState.sol\\\";\\n\\nabstract contract ECDSAWalletView is ECDSAWalletState {\\n  error SignatureExpired(string message);\\n  error InsufficentFeeAsset(string message);\\n  error InvalidWalletOpNonce(string message);\\n  error InvalidAllowanceOpNonce(string message);\\n  error InsufficentAllowance(string message);\\n\\n  error InvalidBridgeOppNonce(string message);\\n  error InvalidSigChain(string message);\\n  error InvalidSignature(string message);\\n  error InvalidSigner(string message);\\n\\n  address public constant bridgeVerifier = 0x11632F9766Ee9d9317F95562a6bD529652ead78f;\\n\\n  function _verifyECDSAExecRequest(bytes memory signature, bytes32 hash, address claimedSigner) public view {\\n    if (claimedSigner.code.length > 0) {\\n      bytes4 magicValue = IERC1271(claimedSigner).isValidSignature(hash, signature);\\n      _verifySigner(magicValue);\\n    }\\n    if (claimedSigner.code.length == 0) {\\n      address signer;\\n      if (signature.length == 65) signer = extractEthClassicSig(signature, hash);\\n      else if (signature.length == 64) signer = extractEthCompactSig(signature, hash);\\n      else revert InvalidSigner(\\\"Signature length is Invalid\\\");\\n\\n      _verifySigner(signer);\\n    }\\n  }\\n\\n  function _verifySigChain(uint256 _decodedSigChainID, ECDSAExec memory _walletExec) internal pure {\\n    if (_decodedSigChainID != _walletExec.sigChainID) revert InvalidSigChain(\\\"sig chain does not equal provided value\\\");\\n  }\\n\\n  function _verifyNonce(uint256 _nonceToCheck) internal view {\\n    if (_nonceToCheck != nonce()) revert InvalidWalletOpNonce(\\\"invalid nonce provided\\\");\\n  }\\n\\n  function _verifyAllowanceNonce(uint256 _nonceToCheck, uint256 _allowanceNonceFromMap) internal pure {\\n    if (_nonceToCheck != _allowanceNonceFromMap) revert InvalidWalletOpNonce(\\\"invalid nonce provided\\\");\\n  }\\n\\n  function _verifySignatureDeadline(uint256 _deadlineToCheck) internal view {\\n    if (block.timestamp >= _deadlineToCheck) revert SignatureExpired(\\\"permit signature has expired\\\");\\n  }\\n\\n  function _verifyFeeAssetBalance(address _feeAsset, uint256 gasCostInFeeAsset) internal view {\\n    if (ERC20(_feeAsset).balanceOf(owner()) < gasCostInFeeAsset) revert InsufficentFeeAsset(\\\"Inusefficent balance of fee asset\\\");\\n  }\\n\\n  function _verifySigner(address _claimedSigner) internal view {\\n    if (_claimedSigner == address(0)) revert InvalidSignature(\\\"Invalid Signature\\\");\\n    if (_claimedSigner != state().owner) revert InvalidSigner(\\\"Signer is not Smart Wallet Owner\\\");\\n  }\\n\\n  function _verifySigner(bytes4 _claimedSigner) internal pure {\\n    if (_claimedSigner != IERC1271.isValidSignature.selector) revert InvalidSigner(\\\"Invalid Contract Signer\\\");\\n  }\\n\\n  function extractEthClassicSig(bytes memory signature, bytes32 hash) internal pure returns (address) {\\n    if (signature.length != 65) revert InvalidSignature(\\\"Classic sig len should be 65\\\");\\n    (bytes32 r, bytes32 s) = abi.decode(signature, (bytes32, bytes32));\\n    uint8 v = uint8(signature[64]);\\n    address signer = ecrecover(hash, v, r, s);\\n    return signer;\\n  }\\n\\n  function extractEthCompactSig(bytes memory signature, bytes32 hash) internal pure returns (address) {\\n    if (signature.length != 64) revert InvalidSignature(\\\"Compact sig len should be 64\\\");\\n    (bytes32 r, bytes32 vs) = abi.decode(signature, (bytes32, bytes32));\\n    bytes32 s = vs & SmartWalletHasher.UPPER_BIT_MASK;\\n    uint8 v = uint8(uint256(vs >> 255)) + 27;\\n    address signer = ecrecover(hash, v, r, s);\\n    return signer;\\n  }\\n}\\n\",\"keccak256\":\"0x3cc1bf7e43b1e1d55d2c978499f299b8f0b47297b087e768af64d1b463b68879\",\"license\":\"Unlicense\"},\"contracts/SmartWallet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./interfaces/IWallet.sol\\\";\\nimport \\\"./libraries/FeeHelperLib.sol\\\";\\n\\n// this contract is the base implementation of the Smart wallet as serves as\\n// a template that can be built upon in inheriting implementation contracts that can\\n// add therir own custom functionalities\\nabstract contract SmartWallet is UUPSUpgradeable, IWallet {\\n  receive() external payable {\\n    emit LogReceivedEther(msg.sender, msg.value);\\n  }\\n\\n  function __SmartWallet_init() public initializer {\\n    __SmartWallet_init_unchained();\\n  }\\n\\n  function __SmartWallet_init_unchained() internal onlyInitializing {\\n    if (address(this).balance > 0) {\\n      emit LogReceivedEther(msg.sender, address(this).balance);\\n    }\\n  }\\n\\n  // virtual functions that are rquired to be implemented\\n  function _walletExecCallback(uint256 execGasUse, ECDSAExec memory walletExec, bytes memory _sig) internal virtual;\\n\\n  function _verify(ECDSAExec memory _walletExec, bytes memory _signature) internal virtual;\\n\\n  function _incrementNonce() internal virtual;\\n\\n  function nonce() public view virtual returns (uint256);\\n\\n  function owner() public view virtual returns (address);\\n\\n  function exec(ECDSAExec memory _walletExec, bytes memory _signature) external {\\n    uint256 gasStart = gasleft();\\n    _verify(_walletExec, _signature);\\n    _incrementNonce();\\n\\n    uint256 _chainID = _walletExec.chainID;\\n    uint256 _bridgeChainID = _walletExec.bridgeChainID;\\n\\n    UserOp[] memory ops = _walletExec.userOps;\\n    if (block.chainid == _bridgeChainID && _chainID != _bridgeChainID) ops = _walletExec.bridgeOps;\\n\\n    for (uint32 i = 0; i < ops.length; i++) {\\n      require(address(this).balance >= _walletExec.userOps[i].amount, \\\"SmartWallet: insufficient base asset balance\\\");\\n      _call(payable(ops[i].to), ops[i].amount, ops[i].data);\\n    }\\n\\n    _walletExecCallback(gasStart, _walletExec, _signature);\\n  }\\n\\n  // if user wants to execute themselves we dont need sig or verify\\n  function execFomEoa(UserOp[] calldata userOps) external {\\n    for (uint32 i = 0; i < userOps.length; i++) {\\n      require(address(this).balance >= userOps[i].amount, \\\"SmartWallet: insufficient base asset balance\\\");\\n      _call(payable(userOps[i].to), userOps[i].amount, userOps[i].data);\\n    }\\n  }\\n\\n  function _call(address payable _contract, uint256 _value, bytes memory _data) internal {\\n    (bool ok, bytes memory resp) = _contract.call{value: _value}(_data);\\n\\n    emit LogCall(_contract, _value, _data);\\n    if (!ok) {\\n      assembly {\\n        revert(add(resp, 32), mload(resp))\\n      }\\n    }\\n  }\\n\\n  function _authorizeUpgrade(address) internal view override {\\n    require(msg.sender == address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xc4a3a6c341d663d74ab620182ec7ba5dd61edc46c341cdc284d276810acf6f59\",\"license\":\"Unlicense\"},\"contracts/SmartWalletFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport {IWalletFactory} from \\\"./interfaces/IWalletFactory.sol\\\";\\nimport {IWallet} from \\\"./interfaces/IWallet.sol\\\";\\n\\ncontract SmartWalletFactory is IWalletFactory {\\n  address public WETH9;\\n  address public PANCAKE_V2_FACTORY;\\n  address public PANCAKE_V3_FACTORY;\\n\\n  error UnSupportedFeeAsset(string message);\\n  error SmartWalletCreationError(string message);\\n\\n  mapping(address => bool) public supportedFeeAssets;\\n  mapping(bytes32 => uint256) public nonces;\\n\\n  event WalletCreated(address indexed _wallet, bytes32 indexed _callID);\\n\\n  constructor(address _pancakeV2Factory, address _pancakeV3Factory, address _weth9, address[] memory _initialFeeAssets) {\\n    WETH9 = _weth9;\\n    PANCAKE_V2_FACTORY = _pancakeV2Factory;\\n    PANCAKE_V3_FACTORY = _pancakeV3Factory;\\n\\n    for (uint8 i = 0; i < _initialFeeAssets.length; i++) {\\n      supportedFeeAssets[_initialFeeAssets[i]] = true;\\n    }\\n  }\\n\\n  function createWallet(address _impl, bytes memory _call) external payable returns (IWallet) {\\n    bytes32 callID = keccak256(_call);\\n    // salt is derived from call hash and nonce, this is to allow the same user to\\n    // create and control multiple SmartWallets with the same private key\\n    ERC1967Proxy wallet_ = new ERC1967Proxy{salt: keccak256(abi.encode(callID, nonces[callID]++))}(address(_impl), _call);\\n\\n    emit WalletCreated(address(wallet_), callID);\\n    IWallet wallet = IWallet(payable(wallet_));\\n\\n    (bool ok, ) = address(wallet).call{value: msg.value}(\\\"\\\");\\n    if (!ok) revert SmartWalletCreationError(\\\"SmartWallet: Failed to creation Fee\\\");\\n    return wallet;\\n  }\\n\\n  function walletAddress(address _impl, bytes memory _call, uint256 _nonce) public view returns (address) {\\n    bytes32 callID = keccak256(_call);\\n    return\\n      address(\\n        uint160(\\n          uint(\\n            keccak256(\\n              abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                keccak256(abi.encode(callID, _nonce)),\\n                keccak256(abi.encodePacked(type(ERC1967Proxy).creationCode, abi.encode(_impl, _call)))\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function queryFeeAsset(address _feeAsset) public view returns (bool) {\\n    if (!supportedFeeAssets[_feeAsset]) revert UnSupportedFeeAsset(\\\"unsuppurted Fee Asset\\\");\\n    return supportedFeeAssets[_feeAsset];\\n  }\\n\\n  function addSupportedFeeAsset(address _asset, bool _isSuppoeted) external {\\n    supportedFeeAssets[_asset] = _isSuppoeted;\\n  }\\n}\\n\",\"keccak256\":\"0x67e8e7d31d0fa1b66072e269f13dea099bf8dd0bb36b75e6f316e083bd43b3b8\",\"license\":\"Unlicense\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC1271 {\\n     function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xd69a8f922f3e4c0dc1285a9c20bc0a12a4a4164644f3549956facd985a9dc2aa\",\"license\":\"MIT\"},\"contracts/interfaces/IWallet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\ninterface IWallet {\\n  event LogReceivedEther(address indexed _from, uint256 _amount);\\n\\n  event LogCall(address indexed _contract, uint256 _value, bytes _data);\\n\\n  event Approval(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration);\\n\\n  event Permit(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration, uint48 nonce);\\n\\n  event WalletOpRecoveryResult(address indexed signer, bytes32 dataHash, bytes signature, address wallet, uint256 nonce);\\n\\n  struct ECDSAExec {\\n    AllowanceOp allowanceOp;\\n    UserOp[] userOps;\\n    UserOp[] bridgeOps;\\n    address wallet;\\n    uint256 nonce;\\n    uint256 chainID;\\n    uint256 bridgeChainID;\\n    uint256 sigChainID;\\n  }\\n\\n  struct UserOp {\\n    address to;\\n    uint256 amount;\\n    uint256 chainId;\\n    bytes data;\\n  }\\n\\n  struct AllowanceOpDetails {\\n    address token;\\n    uint160 amount;\\n    uint48 expiration;\\n    uint48 nonce;\\n  }\\n\\n  struct AllowanceOp {\\n    AllowanceOpDetails[] details;\\n    address spender;\\n    uint256 sigDeadline;\\n  }\\n\\n  struct PackedAllowance {\\n    uint160 amount;\\n    uint48 expiration;\\n    uint48 nonce;\\n  }\\n\\n  struct ECDSAExecValidationDetails {\\n    address signer;\\n    bytes32 dataHash;\\n    bytes signature;\\n    address wallet;\\n    uint256 nonce;\\n  }\\n\\n  receive() external payable;\\n\\n  function nonce() external view returns (uint256);\\n\\n  function owner() external view returns (address);\\n\\n  function exec(ECDSAExec memory _walletExec, bytes memory _signature) external;\\n\\n  function execFomEoa(UserOp[] calldata userOps) external;\\n\\n  function allowance(address user, address token, address spender) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n  function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n  function transferFrom(address from, address to, uint160 amount, address token) external;\\n}\\n\",\"keccak256\":\"0x5f1da757ffd369c9fd60d25766a0d90bc8b6348e9fb9c51305ae24052597221b\",\"license\":\"Unlicense\"},\"contracts/interfaces/IWalletFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IWallet.sol\\\";\\n\\ninterface IWalletFactory {\\n     function createWallet(address _impl, bytes memory _call) external payable returns (IWallet);\\n\\n     function walletAddress(address _impl, bytes memory _call, uint256 _nonce) external view returns (address);\\n}\\n\",\"keccak256\":\"0x85ffd17dc6ebb63271d34c2f231dbaa96ad96bbfa24d33e530b6ea71a177cf03\",\"license\":\"Unlicense\"},\"contracts/interfaces/pancakeswap/IPancakeV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IPancakeV2Factory {\\n     event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n     function feeTo() external view returns (address);\\n\\n     function feeToSetter() external view returns (address);\\n\\n     function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n     function allPairs(uint256) external view returns (address pair);\\n\\n     function allPairsLength() external view returns (uint256);\\n\\n     function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n     function setFeeTo(address) external;\\n\\n     function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x2462837235cebfaba014af73b33a7757e8bdb1c9abfca4ce2b493647f3241f1e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/pancakeswap/IPancakeV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IPancakeV2Pair {\\n     function token0() external view returns (address);\\n\\n     function token1() external view returns (address);\\n\\n     function price0CumulativeLast() external view returns (uint256);\\n\\n     function price1CumulativeLast() external view returns (uint256);\\n\\n     function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n}\\n\",\"keccak256\":\"0xcc9017ce838f7b56390930e15b6e4700c98cdc49c104c9abeb2512c410df5d1d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/pancakeswap/IPancakeV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IPancakeV3Factory {\\n     function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\\n}\\n\",\"keccak256\":\"0xcd42b2fe87f82c8db6b648a3ebc61b00e6f692287c1c5525878055c98d0fb654\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/pancakeswap/IPancakeV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IPancakeV3Pool {\\n     function slot0()\\n          external\\n          view\\n          returns (\\n               uint160 sqrtPriceX96,\\n               int24 tick,\\n               uint16 observationIndex,\\n               uint16 observationCardinality,\\n               uint16 observationCardinalityNext,\\n               uint32 feeProtocol,\\n               bool unlocked\\n          );\\n}\\n\\ninterface IPancakeV3Factory {\\n     function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\\n}\\n\",\"keccak256\":\"0x909207533873e525801e6af8b73bf9340b4e3ccbc430f410b63e80b8944cc15c\",\"license\":\"GPL-3.0\"},\"contracts/libraries/AllowanceHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IWallet} from \\\"../interfaces/IWallet.sol\\\";\\n\\nlibrary Allowance {\\n     // note if the expiration passed is 0, then it the approval set to the block.timestamp\\n     uint256 private constant BLOCK_TIMESTAMP_EXPIRATION = 0;\\n\\n     /// @notice Sets the allowed amount, expiry, and nonce of the spender's permissions on owner's token.\\n     /// @dev Nonce is incremented.\\n     /// @dev If the inputted expiration is 0, the stored expiration is set to block.timestamp\\n     function updateAll(\\n          IWallet.PackedAllowance storage allowed,\\n          uint160 amount,\\n          uint48 expiration,\\n          uint48 nonce\\n     ) internal {\\n          uint48 storedNonce;\\n          unchecked {\\n               storedNonce = nonce + 1;\\n          }\\n\\n          uint48 storedExpiration = expiration == BLOCK_TIMESTAMP_EXPIRATION ? uint48(block.timestamp) : expiration;\\n\\n          uint256 word = pack(amount, storedExpiration, storedNonce);\\n          assembly {\\n               sstore(allowed.slot, word)\\n          }\\n     }\\n\\n     /// @notice Sets the allowed amount and expiry of the spender's permissions on owner's token.\\n     /// @dev Nonce does not need to be incremented.\\n     function updateAmountAndExpiration(\\n          IWallet.PackedAllowance storage allowed,\\n          uint160 amount,\\n          uint48 expiration\\n     ) internal {\\n          // If the inputted expiration is 0, the allowance only lasts the duration of the block.\\n          allowed.expiration = expiration == 0 ? uint48(block.timestamp) : expiration;\\n          allowed.amount = amount;\\n     }\\n\\n     /// @notice Computes the packed slot of the amount, expiration, and nonce that make up PackedAllowance\\n     function pack(uint160 amount, uint48 expiration, uint48 nonce) internal pure returns (uint256 word) {\\n          word = (uint256(nonce) << 208) | (uint256(expiration) << 160) | amount;\\n     }\\n}\\n\",\"keccak256\":\"0x244bf3729d5714b98633a66c2cb58167e66a8db349476d5f3e80f6f480ea4d45\",\"license\":\"MIT\"},\"contracts/libraries/FeeHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport {IPancakeV3Pool} from \\\"../interfaces/pancakeswap/IPancakeV3Pool.sol\\\";\\nimport {IPancakeV3Factory} from \\\"../interfaces/pancakeswap/IPancakeV3Factory.sol\\\";\\nimport {IPancakeV2Pair} from \\\"../interfaces/pancakeswap/IPancakeV2Pair.sol\\\";\\nimport {IPancakeV2Factory} from \\\"../interfaces/pancakeswap/IPancakeV2Factory.sol\\\";\\n\\nlibrary PriceHelper {\\n  using UQ112x112 for uint224;\\n\\n  enum TradeRoute {\\n    V2,\\n    V3\\n  }\\n\\n  function quoteGasPriceInFeeAsset(\\n    address WETH,\\n    address quoteAsset,\\n    address v2Factory,\\n    address v3Factory,\\n    uint128 baseAmount\\n  ) internal view returns (uint256 amountOut) {\\n    if (block.chainid == 31337) return baseAmount;\\n    (TradeRoute route, address poolAddress) = getTradeRoute(WETH, quoteAsset, v2Factory, v3Factory);\\n    if (route == TradeRoute.V3) {\\n      return getV3Quote(poolAddress, baseAmount, true);\\n    } else if (route == TradeRoute.V2) {\\n      return getV2quote(poolAddress, false, baseAmount);\\n    }\\n  }\\n\\n  function getTradeRoute(address _token0, address _token1, address _v2Factory, address _v3Factory) internal view returns (TradeRoute, address) {\\n    address v3Pool = IPancakeV3Factory(_v3Factory).getPool(_token0, _token1, 2500);\\n    address v2Pool = IPancakeV2Factory(_v2Factory).getPair(_token0, _token1);\\n\\n    if (v3Pool != address(0)) {\\n      return (TradeRoute.V3, v3Pool);\\n    } else if (v2Pool != address(0)) {\\n      return (TradeRoute.V2, v2Pool);\\n    } else {\\n      revert(\\\"No pair found, Unable to estimate fees for trade\\\");\\n    }\\n  }\\n\\n  function getV2quote(address v2PairAddress, bool denominationTokenIs0, uint256 inputAmount) internal view returns (uint256 outputAmount) {\\n    (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IPancakeV2Pair(v2PairAddress).getReserves();\\n    uint256 priceCumulativeLast = denominationTokenIs0\\n      ? IPancakeV2Pair(v2PairAddress).price1CumulativeLast()\\n      : IPancakeV2Pair(v2PairAddress).price0CumulativeLast();\\n    uint256 timeElapsed = block.timestamp - blockTimestampLast;\\n    priceCumulativeLast +=\\n      timeElapsed *\\n      uint256(UQ112x112.encode(denominationTokenIs0 ? reserve0 : reserve1).uqdiv(denominationTokenIs0 ? reserve1 : reserve0));\\n\\n    uint256 amountInWithFee = inputAmount * 997;\\n    uint256 numerator = denominationTokenIs0 ? reserve1 : reserve0;\\n    uint256 denominator = denominationTokenIs0 ? reserve0 : reserve1;\\n    outputAmount = (amountInWithFee * numerator) / (denominator * 1000) + 1;\\n  }\\n\\n  function getV3Quote(address pancakeV3Pool, uint128 baseAmount, bool inverse) internal view returns (uint256 quoteAmount) {\\n    (uint160 sqrtPriceX96, , , , , , ) = IPancakeV3Pool(pancakeV3Pool).slot0();\\n    if (sqrtPriceX96 <= type(uint128).max) {\\n      uint256 ratioX192 = uint256(sqrtPriceX96) * sqrtPriceX96;\\n      quoteAmount = !inverse ? mulDiv(ratioX192, baseAmount, 1 << 192) : mulDiv(1 << 192, baseAmount, ratioX192);\\n    } else {\\n      uint256 ratioX128 = mulDiv(sqrtPriceX96, sqrtPriceX96, 1 << 64);\\n      quoteAmount = !inverse ? mulDiv(ratioX128, baseAmount, 1 << 128) : mulDiv(1 << 128, baseAmount, ratioX128);\\n    }\\n  }\\n\\n  function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n    unchecked {\\n      uint256 prod0;\\n      uint256 prod1;\\n      assembly {\\n        let mm := mulmod(a, b, not(0))\\n        prod0 := mul(a, b)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n      if (prod1 == 0) {\\n        require(denominator > 0);\\n        assembly {\\n          result := div(prod0, denominator)\\n        }\\n        return result;\\n      }\\n      require(denominator > prod1);\\n      uint256 remainder;\\n      assembly {\\n        remainder := mulmod(a, b, denominator)\\n      }\\n      assembly {\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n      uint256 twos = (0 - denominator) & denominator;\\n      assembly {\\n        denominator := div(denominator, twos)\\n      }\\n      assembly {\\n        prod0 := div(prod0, twos)\\n      }\\n      assembly {\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n      prod0 |= prod1 * twos;\\n      uint256 inv = (3 * denominator) ^ 2;\\n      inv *= 2 - denominator * inv;\\n      inv *= 2 - denominator * inv;\\n      inv *= 2 - denominator * inv;\\n      inv *= 2 - denominator * inv;\\n      inv *= 2 - denominator * inv;\\n      inv *= 2 - denominator * inv;\\n      result = prod0 * inv;\\n      return result;\\n    }\\n  }\\n}\\n\\nlibrary UQ112x112 {\\n  uint224 constant Q112 = 2 ** 112;\\n\\n  function encode(uint112 y) internal pure returns (uint224 z) {\\n    z = uint224(y) * Q112; // never overflows\\n  }\\n\\n  function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n    z = x / uint224(y);\\n  }\\n}\\n\",\"keccak256\":\"0x344300902e884ef34e32e0b1eb4d42f23dced9644111139fa29d505c4d9c24fa\",\"license\":\"GPL-3.0\"},\"contracts/libraries/HasherLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IWallet} from \\\"../interfaces/IWallet.sol\\\";\\n\\n// here we combine the uniswap permitbatch allowance ransfer operation with\\n// another struct op which holds the calldata or batched txs in an array.\\n// the smart wallet uses permit to transfer uses tokens to custody of users wallet. then the\\n// ops proceed to run as being evoked by the relayer (Smart Wallet Factory Deployer) and called\\n//by users sw as msg.sender.\\n\\n// Originlly hashing logoc was hsted in ECDSAWallet but abstracted it to q lin here because the\\n// bridge verifier needs access to the hashes to verify signed data. also having it as a lib allows\\n// more people to access the same hasing utils that an owner uses on their own days\\nlibrary SmartWalletHasher {\\n  error InvalidDomain(string message);\\n\\n  bytes32 public constant UPPER_BIT_MASK = (0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\n  bytes32 public constant USER_OP_TYPE_HASH = keccak256(\\\"UserOp(address to,uint256 amount,uint256 chainId,bytes data)\\\");\\n\\n  bytes32 public constant ALLOWANCE_DETAILS_OP_TYPE_HASH =\\n    keccak256(\\\"AllowanceOpDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\");\\n\\n  bytes32 public constant ALLOWANCE_OP_BATCH_TYPE_HASH =\\n    keccak256(\\n      \\\"AllowanceOp(AllowanceOpDetails[] details,address spender,uint256 sigDeadline)AllowanceOpDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\"\\n    );\\n  bytes32 private constant _TYPEHASH =\\n    keccak256(\\n      \\\"ECDSAExec(AllowanceOp allowanceOp,UserOp[] userOps,UserOp[] bridgeOps,address wallet,uint256 nonce,uint256 chainID,uint256 bridgeChainID,uint256 sigChainID)AllowanceOp(AllowanceOpDetails[] details,address spender,uint256 sigDeadline)AllowanceOpDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)UserOp(address to,uint256 amount,uint256 chainId,bytes data)\\\"\\n    );\\n\\n  function hash(IWallet.ECDSAExec memory _walletExec) internal pure returns (bytes32) {\\n    uint256 _bridgeChainId = _walletExec.bridgeChainID;\\n    uint256 _chainId = _walletExec.chainID;\\n    return\\n      keccak256(\\n        abi.encode(\\n          _TYPEHASH,\\n          hash(_walletExec.allowanceOp),\\n          hash(_walletExec.userOps, _chainId),\\n          hash(_walletExec.bridgeOps, _bridgeChainId),\\n          _walletExec.wallet,\\n          _walletExec.nonce,\\n          _chainId,\\n          _bridgeChainId,\\n          _walletExec.sigChainID\\n        )\\n      );\\n  }\\n\\n  // extra custom functionality for this contract impl\\n  // prettier-ignore\\n  function hash(IWallet.UserOp[] memory _userOps, uint256 _domainChainId) internal pure returns (bytes32) {\\n    bytes32[] memory opHashes = new bytes32[](_userOps.length);\\n\\n    for (uint256 i = 0; i < _userOps.length; i++) {\\n      verifyOperationDomain(_userOps[i].chainId, _domainChainId);\\n\\n      opHashes[i] = keccak256(\\n        abi.encode(\\n            USER_OP_TYPE_HASH, \\n            _userOps[i].to, \\n            _userOps[i].amount, \\n            _userOps[i].chainId, \\n            keccak256(_userOps[i].data)\\n            )\\n      );\\n    }\\n    return keccak256(abi.encodePacked(opHashes));\\n  }\\n\\n  // prettier-ignore\\n  function hash(IWallet.AllowanceOp memory allowanceOps) internal pure returns (bytes32) {\\n    bytes32[] memory allowanceHashes = new bytes32[](allowanceOps.details.length);\\n\\n    for (uint256 i = 0; i < allowanceOps.details.length; ++i) {\\n      allowanceHashes[i] = _hashAllowanceDetails(allowanceOps.details[i]);\\n    }\\n    return\\n      keccak256(\\n        abi.encode(\\n            ALLOWANCE_OP_BATCH_TYPE_HASH, \\n            keccak256(\\n                  abi.encodePacked(allowanceHashes)), \\n                  allowanceOps.spender, \\n                  allowanceOps.sigDeadline\\n            )\\n      );\\n  }\\n\\n  function _hashAllowanceDetails(IWallet.AllowanceOpDetails memory details) private pure returns (bytes32) {\\n    return keccak256(abi.encode(ALLOWANCE_DETAILS_OP_TYPE_HASH, details));\\n  }\\n\\n  function verifyOperationDomain(uint256 _opChainId, uint256 _domainChainId) private pure {\\n    if (_opChainId != _domainChainId) revert InvalidDomain(\\\"ECDSA: UserOps invalid domain\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x38829012670ff1e9a749e3b8bea7c4dee0eec91f6a76df1790d89da7e8a55c61\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6ab948013c2c7ca6351e593600425b0ec6df9035320280c678e735bce16e996b\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60803461014957601f61464738819003918201601f19168301926000926001600160401b03928386118387101761013557816020928492604098895283398101031261013157516001600160a01b03808216929183900361012d5784516141a38082019082821085831117610119579082916104a48339039085f0801561010f57169060018060a01b03199180836001541617600155803b1561010b57908480926024885180958193636fc0109960e11b83528160048401525af18015610101576100da575b505082541617905551610355908161014f8239f35b81949294116100ed5784529138806100c5565b634e487b7160e01b82526041600452602482fd5b86513d87823e3d90fd5b8480fd5b85513d86823e3d90fd5b634e487b7160e01b87526041600452602487fd5b8380fd5b8280fd5b634e487b7160e01b85526041600452602485fd5b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081631238ac7c1461019957508063521eb27314610172578063b054a9e8146100765763c45a01551461004e57600080fd5b346100725781600319360112610072576001600160a01b0360209254169051908152f35b5080fd5b509060209182600319360112610072579061010a91610093610257565b91846001600160a01b039384835416856001541686865193636fc0109960e11b86860152166024840152602483526100ca83610272565b85518098819482937feebc8e19000000000000000000000000000000000000000000000000000000008452600484015288602484015260448301906102df565b039134905af1938415610166578194610127575b50505191168152f35b909193508481813d831161015f575b61014081836102bd565b81010312610072575190828216820361015c575091388061011e565b80fd5b503d610136565b509051903d90823e3d90fd5b50346100725781600319360112610072576020906001600160a01b03600154169051908152f35b905034610253578160031936011261025357610231916101b7610257565b936001600160a01b039485938483541685600154166020988994636fc0109960e11b86860152166024840152602483526101f083610272565b85518098819482937fd1e64ad700000000000000000000000000000000000000000000000000000000845260048401526060602484015260648301906102df565b602435604483015203915afa9384156101665781946101275750505191168152f35b8280fd5b600435906001600160a01b038216820361026d57565b600080fd5b6060810190811067ffffffffffffffff82111761028e57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761028e57604052565b919082519283825260005b84811061030b575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016102ea56fea26469706673582212206b3118d8911c9425eb566f2e99d8dd5641a4786760ef20e41284f053887fc53e64736f6c6343000811003360a08060405234610031573060805261416c9081610037823960805181818161046c015281816108fb0152610a790152f35b600080fdfe60806040526004361015610023575b361561001957600080fd5b610021612023565b005b60003560e01c806309b46861146101b3578063252f5a17146101aa57806334fe6a65146101a15780633659cfe61461019857806336c785161461018f57806338ef7a1f146101865780634967c38d1461017d5780634f1ef2861461017457806352d1902d1461016b57806364d4c8191461016257806365fb372c1461015957806387517c45146101505780638901e25b146101475780638da5cb5b1461013e578063927da105146101355780639fa5ea7e1461012c578063affed0e014610123578063df8021321461011a578063e290f6e1146101115763f0702e8e0361000e5761010c611550565b61000e565b5061010c61145b565b5061010c6111a8565b5061010c611179565b5061010c611076565b5061010c610fd5565b5061010c610fa0565b5061010c610eb9565b5061010c610d54565b5061010c610c30565b5061010c610b38565b5061010c610a5d565b5061010c6108b5565b5061010c61088b565b5061010c610840565b5061010c6105f3565b5061010c610442565b5061010c610408565b5061010c610390565b5061010c610367565b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176101ef57604052565b6101f76101bc565b604052565b6080810190811067ffffffffffffffff8211176101ef57604052565b67ffffffffffffffff81116101ef57604052565b6040810190811067ffffffffffffffff8211176101ef57604052565b6020810190811067ffffffffffffffff8211176101ef57604052565b60c0810190811067ffffffffffffffff8211176101ef57604052565b90601f8019910116810190811067ffffffffffffffff8211176101ef57604052565b60405190610100820182811067ffffffffffffffff8211176101ef57604052565b6040519060a0820182811067ffffffffffffffff8211176101ef57604052565b60209067ffffffffffffffff8111610301575b601f01601f19160190565b6103096101bc565b6102f6565b7f302e302e31000000000000000000000000000000000000000000000000000000602060405161033d8161022c565b6005815201527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc19916381188590565b503461038b57600036600319011261038b57602061038361030e565b604051908152f35b600080fd5b503461038b57602036600319011261038b576020610383600435611b39565b7f454344534157616c6c657400000000000000000000000000000000000000000060206040516103de8161022c565b600b815201527fa493ff226186ed9712809d71f428d7f274876a4f2b9236f1762ec84b059ae32b90565b503461038b57600036600319011261038b5760206103836103af565b6001600160a01b0381160361038b57565b359061044082610424565b565b503461038b57602036600319011261038b5760043561046081610424565b6001600160a01b0390817f0000000000000000000000000000000000000000000000000000000000000000169161049983301415611580565b6104c87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9382855416146115f1565b30330361038b57604051906104dc82610248565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561051657505061002191506116ef565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816105c3575b506105b05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608490fd5b0390fd5b610021936105be911461167e565b61179c565b6105e591925060203d81116105ec575b6105dd8183610280565b810190611662565b903861053c565b503d6105d3565b503461038b57608036600319011261038b5760043561061181610424565b6024359061061e82610424565b6044359161062b83610424565b6064359161063883610424565b30331480156107c5575b61064b90611989565b6106883361067085610670856001600160a01b03166000526067602052604060002090565b906001600160a01b0316600052602052604060002090565b80549065ffffffffffff8260a01c164211610780576001600160a01b03809216908282036106c0575b5050806100219516931661406d565b90958683821611600014610753576040517fe3082aa500000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f6661696c656420746f207472616e736665722c20696e73756666696369656e7460448201527f20616c6c6f77616e6365000000000000000000000000000000000000000000006064820152608490fd5b61077a839283836100219a03166001600160a01b03166001600160a01b0319825416179055565b956106b1565b604051622bd21560e71b815260206004820152601e60248201527f7472616e7366657220616c6c6f77616e636520686173206578706972656400006044820152606490fd5b5061064b6001600160a01b03600080516020614117833981519152541633149050610642565b9291926107f7826102e3565b916108056040519384610280565b82948184528183011161038b578281602093846000960137010152565b9080601f8301121561038b5781602061083d933591016107eb565b90565b503461038b57606036600319011261038b5760043567ffffffffffffffff811161038b57610875610021913690600401610822565b6044359061088282610424565b60243590611bd6565b503461038b57600036600319011261038b5760206040516000805160206141178339815191528152f35b50604036600319011261038b576004356108ce81610424565b60243567ffffffffffffffff811161038b576108ee903690600401610822565b906001600160a01b0391827f0000000000000000000000000000000000000000000000000000000000000000169261092884301415611580565b6109577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9482865416146115f1565b30330361038b577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561099457505061002191506116ef565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610a3d575b50610a2a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608490fd5b61002193610a38911461167e565b61186e565b610a5691925060203d81116105ec576105dd8183610280565b90386109ba565b503461038b57600036600319011261038b576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ace576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b0390f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b503461038b57600036600319011261038b5760206040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152f35b90600182811c92168015610ba4575b6020831014610b8e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610b83565b60005b838110610bc15750506000910152565b8181015183820152602001610bb1565b90602091610bea81518092818552858086019101610bae565b601f01601f1916010190565b91608093610c2591979695976001600160a01b038094168552602085015260a0604085015260a0840190610bd1565b951660608201520152565b503461038b5760208060031936011261038b57600090600435825260668152604082206001600160a01b03815416906001908181015493600282016040519387825492610c7c84610b74565b80885293838116908115610d085750600114610ccd575b508787610aca8888610ca7828f0383610280565b6004610cbd60038301546001600160a01b031690565b9101549160405195869586610bf6565b9080949950528783205b828410610cf557505050820190940193610ca782610aca3880610c93565b80548685018a0152928801928101610cd7565b60ff19168887015250505050151560051b8301019450610ca782610aca3880610c93565b6064359065ffffffffffff8216820361038b57565b359065ffffffffffff8216820361038b57565b503461038b57608036600319011261038b57600435610d7281610424565b602435610d7e81610424565b604435610d8a81610424565b610d92610d2c565b903033148015610e93575b610da690611989565b336000526067602052610e4881610dd885610670886040600020906001600160a01b0316600052602052604060002090565b610e2d65ffffffffffff808716968715600014610e8c575042165b82547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b65ffffffffffff60a01b16178255565b906001600160a01b03166001600160a01b0319825416179055565b604051926001600160a01b03928380931685526020850152169216907fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b60403392a4005b9050610df3565b50610da66001600160a01b03600080516020614117833981519152541633149050610d9d565b503461038b57600080600319360112610f9d578054610eef60ff8260081c161580928193610f8f575b8115610f6f575b506119d4565b80610f02600160ff196000541617600055565b610f56575b610f0f612051565b610f165780f35b610f2661ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a180f35b610f6a61010061ff00196000541617600055565b610f07565b303b15915081610f81575b5038610ee9565b6001915060ff161438610f7a565b600160ff8216109150610ee2565b80fd5b503461038b57600036600319011261038b5760206001600160a01b036000805160206141178339815191525416604051908152f35b503461038b57606036600319011261038b57600435610ff381610424565b61104260243561100281610424565b6106706044359161101283610424565b6001600160a01b0380951660005260676020526040600020906001600160a01b0316600052602052604060002090565b54604080519282166001600160a01b0316835265ffffffffffff60a083901c16602084015260d09190911c90820152606090f35b503461038b5760208060031936011261038b576004359067ffffffffffffffff80831161038b573660238401121561038b57826004013581811161038b576024840193602436918360051b01011161038b5760005b63ffffffff81169082821015610021576110f447866110eb85878b6132d9565b01351115612105565b6110ff8284886132d9565b3561110981610424565b6111228661111885878b6132d9565b01359385896132d9565b606081013590601e198136030182121561038b57019081359186831161038b57870193823603851361038b576001600160a01b036111686111749661116f9536916107eb565b92166133cb565b612098565b6110cb565b503461038b57600036600319011261038b5760206000805160206141178339815191525460a01c604051908152f35b503461038b57602036600319011261038b576004356111c681610424565b611208600054916111ec60ff8460081c161580948195610f8f578115610f6f57506119d4565b826111ff600160ff196000541617600055565b61124d57611a45565b61120e57005b61121e61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61126161010061ff00196000541617600055565b611a45565b60209067ffffffffffffffff8111611280575b60051b0190565b6112886101bc565b611279565b91606092838184031261038b5760408051916112a8836101d3565b8294813567ffffffffffffffff811161038b57820181601f8201121561038b578035906112d482611266565b916112e186519384610280565b808352602093848085019260071b8401019281841161038b578501915b8383106113275750505050848495969798505261131c818301610435565b908501520135910152565b60808383031261038b57856080918d8a5190611342826101fc565b863561134d81610424565b82528387013561135c81610424565b8483015261136b8c8801610d41565b8c83015261137a818801610d41565b908201528152019201916112fe565b9080601f8301121561038b5781356113a081611266565b926040916113b083519586610280565b808552602093848087019260051b8401019381851161038b57858401925b8584106113df575050505050505090565b67ffffffffffffffff843581811161038b57860191608080601f19858803011261038b5784519061140f826101fc565b8a85013561141c81610424565b8252858501358b830152606090818601358784015285013593841161038b5761144c878c80979681970101610822565b908201528152019301926113ce565b503461038b5760031960403682011261038b5760049081359067ffffffffffffffff9081831161038b5761010090833603011261038b5761149a6102a2565b918084013582811161038b576114b59085369184010161128d565b8352602481013582811161038b576114d290853691840101611389565b602084015260448101359082821161038b576114f560e492863691840101611389565b604085015261150660648201610435565b60608501526084810135608085015260a481013560a085015260c481013560c0850152013560e083015260243590811161038b576100219261154a91369101610822565b90612176565b503461038b57600036600319011261038b5760206040517311632f9766ee9d9317f95562a6bd529652ead78f8152f35b1561158757565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b156115f857565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b9081602091031261038b575190565b506040513d6000823e3d90fd5b1561168557565b608460405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b803b15611732576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b906117a6826116ef565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590611866575b6117e8575050565b61186391600080604051936117fc856101d3565b602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208601527f206661696c6564000000000000000000000000000000000000000000000000006040860152602081519101845af461185d6118c1565b916118f1565b50565b5060006117e0565b90611878826116ef565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051158015906118b9576117e8575050565b5060016117e0565b3d156118ec573d906118d2826102e3565b916118e06040519384610280565b82523d6000602084013e565b606090565b919290156119525750815115611905575090565b3b1561190e5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156119655750805190602001fd5b6105ac9060405191829162461bcd60e51b8352602060048401526024830190610bd1565b1561199057565b606460405162461bcd60e51b815260206004820152601b60248201527f4f6e6c792077616c6c6574207369676e65727320616c6c6f77656400000000006044820152fd5b156119db57565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b611a6460ff60005460081c16611a5a81611ac8565b47611a9a57611ac8565b6001600160a01b0319906001600160a01b0360008051602061411783398151915291168282541617905533906065541617606555565b476040519081527f3317af6e3247959c45cb6051f9153437a9072683e21eda1f9b52c5bcec0e89c260203392a25b15611acf57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b611b416103af565b90611b4a61030e565b906040519160208301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85526040840152606083015260808201523060a082015260a08152611b9981610264565b51902090565b9081602091031261038b57516001600160e01b03198116810361038b5790565b60409061083d939281528160208201520190610bd1565b9091803b611c60575b3b15611be9575050565b805160418103611c06575061044091611c0191611e43565b611ce6565b604003611c1a5761044091611c0191611f63565b604051630e753c0b60e01b815260206004820152601b60248201527f5369676e6174757265206c656e67746820697320496e76616c696400000000006044820152606490fd5b611ca6604051630b135d3f60e11b815260208180611c82878960048401611bbf565b03816001600160a01b0387165afa908115611cd9575b600091611cab575b50611d9a565b611bdf565b611ccc915060203d8111611cd2575b611cc48183610280565b810190611b9f565b38611ca0565b503d611cba565b611ce1611671565b611c98565b6001600160a01b03809116908115611d5557600080516020614117833981519152541603611d1057565b6064604051630e753c0b60e01b815260206004820152602060248201527f5369676e6572206973206e6f7420536d6172742057616c6c6574204f776e65726044820152fd5b606460405163151a7bff60e11b815260206004820152601160248201527f496e76616c6964205369676e61747572650000000000000000000000000000006044820152fd5b6001600160e01b0319630b135d3f60e11b911603611db457565b6064604051630e753c0b60e01b815260206004820152601760248201527f496e76616c696420436f6e7472616374205369676e65720000000000000000006044820152fd5b919082604091031261038b576020825192015190565b50634e487b7160e01b600052603260045260246000fd5b606090805160401015611e37570190565b611e3f611e0f565b0190565b906041825103611eed5781600091611ecb611e78611ea4611e9e611e706020809951880101898801611df9565b939096611e26565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b93604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa15611ee0575b60005190565b611ee8611671565b611eda565b606460405163151a7bff60e11b815260206004820152601c60248201527f436c617373696320736967206c656e2073686f756c64206265203635000000006044820152fd5b50634e487b7160e01b600052601160045260246000fd5b60ff601b9116019060ff8211611f5b57565b610440611f32565b906040825103611fde577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600091611ecb611fa8856020808098518301019101611df9565b9290611fb68460ff1c611f49565b6040519586951692859094939260ff6060936080840197845216602083015260408201520152565b606460405163151a7bff60e11b815260206004820152601c60248201527f436f6d7061637420736967206c656e2073686f756c64206265203634000000006044820152fd5b6040513481527f3317af6e3247959c45cb6051f9153437a9072683e21eda1f9b52c5bcec0e89c260203392a2565b61206260ff60005460081c16611ac8565b4761206957565b476040519081527f3317af6e3247959c45cb6051f9153437a9072683e21eda1f9b52c5bcec0e89c260203392a2565b60019063ffffffff8091169081146120ae570190565b611e3f611f32565b604090805160011015611e37570190565b6080906060518110156120db5760051b0190565b611288611e0f565b60209181518110156120f8575b60051b010190565b612100611e0f565b6120f0565b1561210c57565b608460405162461bcd60e51b815260206004820152602c60248201527f536d61727457616c6c65743a20696e73756666696369656e742062617365206160448201527f737365742062616c616e636500000000000000000000000000000000000000006064820152fd5b90915a61218384846124ac565b61218b61300e565b60a083015160c084015192602095868601928351958046149182612257575b505061224b575b60005b855163ffffffff82169081101561223a579061116f87612235936121e8478d6121de848c516120e3565b5101511115612105565b606061222c8d6122228461221c612210612202838a6120e3565b51516001600160a01b031690565b6001600160a01b031690565b966120e3565b510151928c6120e3565b510151916133cb565b6121b4565b505093509450509161044092612968565b604086015194506121b1565b1415905038806121aa565b919060408382031261038b5782519260208101519067ffffffffffffffff821161038b570181601f8201121561038b57805161229d816102e3565b926122ab6040519485610280565b8184526020828401011161038b5761083d9160208085019101610bae565b90601f81116122d757505050565b600091825260208220906020601f850160051c83019410612313575b601f0160051c01915b82811061230857505050565b8181556001016122fc565b90925082906122f3565b815181546001600160a01b0319166001600160a01b039190911617815590602090818101519160019283850155600284019060408301519384519167ffffffffffffffff831161246d575b61237c836123768654610b74565b866122c9565b80601f84116001146123f757509180809260809695946004986000946123ec575b50501b916000199060031b1c19161790555b6123e56123c660608301516001600160a01b031690565b60038601906001600160a01b03166001600160a01b0319825416179055565b0151910155565b01519250388061239d565b91939495601f19841661240f87600052602060002090565b936000905b828210612456575050916004979593918560809896941061243d575b505050811b0190556123af565b015160001960f88460031b161c19169055388080612430565b808886978294978701518155019601940190612414565b6124756101bc565b612368565b906124a16060936001600160a01b0392979695978452608060208501526080840190610bd1565b951660408201520152565b61261a917ffcd9cc555d2f82c5f75a967488b70edab6da722c5eb2587b5fb65a8dc4f21f4b916124e56020835184010160208401612262565b949061254c836125396124f784611b39565b61250083613c48565b90604291604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b9261254760808301516130f3565b613063565b612577600080516020614117833981519152968261257189546001600160a01b031690565b91611bd6565b6125818351612e45565b612607606087549401966125f861259f89516001600160a01b031690565b6125f38760a01c6125dd6125b16102c3565b6001600160a01b039a8b168152938860208601528b604086015260608501906001600160a01b03169052565b8060808401526000526066602052604060002090565b61231d565b5496516001600160a01b031690565b60405194859488169760a01c928561247a565b0390a2565b5190811515820361038b57565b9081602091031261038b5761083d9061261f565b906188b8918201809211611f5b57565b9060018201809211611f5b57565b91908201809211611f5b57565b91908203918211611f5b57565b90600582029180830460051490151715611f5b57565b90633b9aca0091828102928184041490151715611f5b57565b906103e591828102928184041490151715611f5b57565b906103e891828102928184041490151715611f5b57565b81810292918115918404141715611f5b57565b9081602091031261038b575161083d81610424565b6040519061270a826101d3565b602d82527f743136302c6164647265737329000000000000000000000000000000000000006040837f7472616e7366657246726f6d28616464726573732c616464726573732c75696e60208201520152565b604051906127698261022c565b601c82527f7665726966794272696467655265712862797465732c627974657329000000006020830152565b90606081019180516060835280518094526080808401946020809301916000905b8282106127de5750505050808201516001600160a01b03169083015260409081015191015290565b909192968482826128266001948c516060906001600160a01b0380825116845260208201511660208401528165ffffffffffff91826040820151166040860152015116910152565b019801939201906127b6565b90815180825260208092019182818360051b85019501936000915b84831061285d5750505050505090565b90919293949584806128a683856001950387528a516001600160a01b03815116825283810151848301526040808201519083015260608091015191608080928201520190610bd1565b980193019301919493929061284d565b60208152815160e061290a6128d961010093846020870152610120860190612795565b6128f5602087015191601f199283888303016040890152612832565b90604087015190868303016060870152612832565b60608501516001600160a01b0316608085015293608081015160a085015260a081015160c085015260c081015182850152015191015290565b909161295a61083d93604084526040840190610bd1565b916020818403910152610bd1565b91906129786122028251516120b6565b9161298e6122106065546001600160a01b031690565b9260409381612a10612a0b612a066129ff89519a7f3315389a000000000000000000000000000000000000000000000000000000008c5260209b8c81806129e88a600483019190916001600160a01b036020820193169052565b03818b5afa8015612d0b575b612cde575b50612640565b5a9061266b565b612678565b61268e565b918651927f4aa4a4fc0000000000000000000000000000000000000000000000000000000084528884600481855afa938415612cd1575b600094612cad575b5090600491898951927f396abe0600000000000000000000000000000000000000000000000000000000845281848681845afa938415612ca0575b600094612c81575b508a51948580927fbcd292c70000000000000000000000000000000000000000000000000000000082525afa928315612c74575b600093612c33575b506fffffffffffffffffffffffffffffffff1692612aeb9461349e565b6001600160a01b0316612afc6126fd565b92612b0561275c565b9660008051602061411783398151915254612b26906001600160a01b031690565b94875190828151910120612b41906001600160e01b03191690565b90612b4b90610218565b8751828101919091526001600160a01b03958616602482015233604482015283861660648201529484166084808701919091528552601f1991612b8f60a487610280565b87519081612b9f898583016128b6565b038481018352612baf9083610280565b885199838151910120612bc9906001600160e01b03191690565b99612bd390610218565b8851998a938401526024830191612be992612943565b039081018752612bf99087610280565b6001600160a01b0316612c0b916131c0565b612c159030613309565b8051612c2090612d18565b015151612c2a5750565b6104409061337b565b6fffffffffffffffffffffffffffffffff919350612c66908b3d8d11612c6d575b612c5e8183610280565b8101906126e8565b9290612ace565b503d612c54565b612c7c611671565b612ac6565b612c99919450823d8411612c6d57612c5e8183610280565b9238612a92565b612ca8611671565b612a8a565b600492919450612cc9908a3d8c11612c6d57612c5e8183610280565b939091612a4f565b612cd9611671565b612a47565b612cfd908d803d10612d04575b612cf58183610280565b81019061262c565b50386129f9565b503d612ceb565b612d13611671565b6129f4565b9060005b60605160ff821690811015612e3f5790612e1f612df785612d9b612de9600196612d9b612202612de3612d76600080516020614117833981519152612dd6612dc66020612db2612d8f612d7686546001600160a01b031690565b6001600160a01b03166000526067602052604060002090565b612d9b6122028c6120c7565b6001600160a01b0316600052602052604060002090565b9b019a612d9b8c516001600160a01b031690565b6001600160a01b03198154169055565b546001600160a01b031690565b926120c7565b91516001600160a01b031690565b7fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff8154169055565b60ff809116908114612e32575b01612d1c565b612e3a611f32565b612e2c565b50509050565b602080820191612e5c83516001600160a01b031690565b8151519360005b858110612e7257505050505050565b612e8661221083516001600160a01b031690565b612e93575b600101612e63565b80845190612ea0916120e3565b516060015165ffffffffffff1681855190612eba916120e3565b51516001600160a01b0316908683875190612ed4916120e3565b5101516001600160a01b03166040908185895190612ef1916120e3565b51015165ffffffffffff169260008051602061411783398151915289828685878d8b8754612f25906001600160a01b031690565b612f42906001600160a01b03166000526067602052604060002090565b90612f5f91906001600160a01b0316600052602052604060002090565b90612f7c91906001600160a01b0316600052602052604060002090565b9465ffffffffffff808754612f919060d01c90565b1690861690612f9f9161316c565b0151612faa90613173565b612fb393613433565b5492516001600160a01b03928316815265ffffffffffff948516602082015293166040840152868116938116929116907fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec90606090a4612e8b565b60008051602061411783398151915280546001600160a01b036001600160a01b031960018360a01c6bffffffffffffffffffffffff8114613056575b0160a01b169116179055565b61305e611f32565b61304a565b9060e001510361306f57565b60846040517f78b9146600000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f73696720636861696e20646f6573206e6f7420657175616c2070726f7669646560448201527f642076616c7565000000000000000000000000000000000000000000000000006064820152fd5b6000805160206141178339815191525460a01c0361310d57565b6040517f73fe9fad00000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f696e76616c6964206e6f6e63652070726f7669646564000000000000000000006044820152606490fd5b0361310d57565b42101561317c57565b6064604051622bd21560e71b815260206004820152601c60248201527f7065726d6974207369676e6174757265206861732065787069726564000000006044820152fd5b60206001600160a01b0391602483600080516020614117833981519152541660405194859384927f70a082310000000000000000000000000000000000000000000000000000000084526004840152165afa9081156132cc575b6000916132ae575b501061322a57565b60846040517fc2ce16ea00000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f496e75736566666963656e742062616c616e6365206f6620666565206173736560448201527f74000000000000000000000000000000000000000000000000000000000000006064820152fd5b6132c6915060203d81116105ec576105dd8183610280565b38613222565b6132d4611671565b61321a565b91908110156132fc575b60051b81013590607e198136030182121561038b570190565b613304611e0f565b6132e3565b6001600160a01b031660008083516020850182855af1907f202ca0633e9bf52b1d9ffc5784badd7db89fdd8a05bea524c99853429017f7ae61336861334c6118c1565b9460405191829160008352604060208401526040830190610bd1565b0390a2156133735750565b602081519101fd5b80516000807311632f9766ee9d9317f95562a6bd529652ead78f926020850182855af1907f202ca0633e9bf52b1d9ffc5784badd7db89fdd8a05bea524c99853429017f7ae61336861334c6118c1565b6001600160a01b0390929192167f202ca0633e9bf52b1d9ffc5784badd7db89fdd8a05bea524c99853429017f7ae60008084516020860187865af19261340f6118c1565b946133686040519283928352604060208401526040830190610bd1565b1561038b57565b929091600165ffffffffffff60a01b6001600160a01b037fffffffffffff00000000000000000000000000000000000000000000000000009365ffffffffffff908181161560001461349657504216955b169460a01b16920160d01b1617179055565b905095613484565b919493929094600095600093617a6946146136ed57906134bf93929161370a565b919060028110156136d957600181036134df57505061083d929350613960565b919091156134ec57505050565b61083d939450906001600160a01b0361362a93921690604051927f0902f1ac000000000000000000000000000000000000000000000000000000008452606084600481865afa80156136cc575b829383958492613682575b50916136249493916004602061361d95604051928380927f5909c0d50000000000000000000000000000000000000000000000000000000082525afa938415613675575b9361362f575b50613618916136116135b763ffffffff6fffffffffffffffffffffffffffffffff94164261266b565b9461360b6135c48b613bb3565b966136056135e46dffffffffffffffffffffffffffff809c16809a613c0e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b906126d5565b9061265e565b50166126a7565b6126d5565b92166126be565b9061393b565b612650565b6fffffffffffffffffffffffffffffffff919350916136116135b763ffffffff6136696136189660203d81116105ec576105dd8183610280565b9694505050509161358e565b61367d611671565b613588565b6004965061362495506020949250906136b561361d949260603d81116136c5575b6136ad8183610280565b8101906138f7565b9098509096509294509092613544565b503d6136a3565b6136d4611671565b613539565b602482634e487b7160e01b81526021600452fd5b50505050506fffffffffffffffffffffffffffffffff9192501690565b6040517f1698ee820000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152831660248201526109c4604482015294936020939092918487806064810103816001600160a01b038098165afa9687156138be575b600097613895575b506040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201529216602483015283908290818581604481015b0392165afa928315613888575b600093613869575b5050838116156137ee57505060019190565b9092508216156137fe5760009190565b60405162461bcd60e51b815260206004820152603060248201527f4e6f207061697220666f756e642c20556e61626c6520746f20657374696d617460448201527f65206665657320666f72207472616465000000000000000000000000000000006064820152608490fd5b613880929350803d10612c6d57612c5e8183610280565b9038806137dc565b613890611671565b6137d4565b6137c793919750916138b48693843d8611612c6d57612c5e8183610280565b979193509161377d565b6138c6611671565b613775565b51906dffffffffffffffffffffffffffff8216820361038b57565b519063ffffffff8216820361038b57565b9081606091031261038b5761390b816138cb565b9161083d604061391d602085016138cb565b93016138e6565b50634e487b7160e01b600052601260045260246000fd5b8115613945570490565b61394d613924565b0490565b519061ffff8216820361038b57565b6040517f3850c7bd00000000000000000000000000000000000000000000000000000000815260e0816004816001600160a01b038096165afa908115613a7a575b6000916139ec575b5016906fffffffffffffffffffffffffffffffff8083116139d8576139d18361083d946126d5565b9116613b6d565b6139e58361083d94613a87565b9116613ad1565b60e0813d8211613a72575b81613a0460e09383610280565b81010312613a6e57805191613a1883610424565b60208201518060020b03610f9d575060c081613a396040613a679401613951565b50613a4660608201613951565b50613a5360808201613951565b50613a6060a082016138e6565b500161261f565b50386139a9565b5080fd5b3d91506139f7565b613a82611671565b6139a1565b6000198282099082810292838084109303928084039314613ac85768010000000000000000918383111561038b570990828211900360c01b910360401c1790565b50505060401c90565b9070010000000000000000000000000000000090600019838309928060801b92838086109503948086039514613b5e57908291613b0f86841161342c565b0981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050915061394d82151561342c565b90780100000000000000000000000000000000000000000000000090600019838309928060c01b92838086109503948086039514613b5e57908291613b0f86841161342c565b7bffffffffffffffffffffffffffff00000000000000000000000000006dffffffffffffffffffffffffffff82169160701b16908082046e0100000000000000000000000000001490151715613c065790565b61083d611f32565b907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff809116918215613c3b57160490565b613c43613924565b160490565b9060c08201519060a083015190835193613c63855151613e13565b9260005b86518051821015613c9e5790613c89613c8382613c99946120e3565b51613f8f565b613c9382886120e3565b52613e45565b613c67565b5050929093613e07611b9993966040519384613cbe602082018093613e55565b0394613cd2601f1996878101835282610280565b51902090613d536040613cef60208401516001600160a01b031690565b92015191613d476040519384926020840196876001600160a01b0360609295949360808301967fe06ddd2657f493bbdb0819686ad5459ec926ea69f0752f8e57e3a53158905fce845260208401521660408201520152565b03868101835282610280565b51902095613d65866020830151613e82565b92613d74816040840151613e82565b96613d8960608401516001600160a01b031690565b9260e0608082015191015193604051998a97602089019c8d94919361010096936001600160a01b03929a99989561012088019b7f0672cd1f61dd2d22d5167ca5de2a5be445722cd9f25fe976650ca4a856417101895260208901526040880152606087015216608085015260a084015260c083015260e08201520152565b03908101835282610280565b90613e1d82611266565b613e2a6040519182610280565b8281528092613e3b601f1991611266565b0190602036910137565b60019060001981146120ae570190565b805160208092019160005b828110613e6e575050505090565b835185529381019392810192600101613e60565b919091613e8f8151613e13565b9060005b8151811015613f7557613f70906040613eb98782613eb185886120e3565b510151614008565b613ec661220283866120e3565b90613f636020613f5581613eda878a6120e3565b5101519380613ee9888b6120e3565b5101516060613ef8898c6120e3565b510151848151910120915195869485019788909493926080926001600160a01b0360a08401977f81c795a7225e70197af9bd380e6f873a1b0e517940669963a9675b6f437436e08552166020840152604083015260608201520152565b03601f198101835282610280565b519020613c9382866120e3565b613e93565b5050909150604051611b9981613f55602082018095613e55565b604051613ffb60208201927f1abfd930c022142841a784ac6f15bfb82392b3b97047cb73f2b3e8a6a2419f5f845260408301906060906001600160a01b0380825116845260208201511660208401528165ffffffffffff91826040820151166040860152015116910152565b60a08152611b9981610264565b0361400f57565b60646040517ffb5c375500000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45434453413a20557365724f707320696e76616c696420646f6d61696e0000006044820152fd5b9160008093602095606494604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b03809216600487015216602485015260448401525af13d15601f3d11600160005114161716156140d257565b606460405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfe3c344650e40c6608a176dc19a4b7c111d92b7e4d03081787ac55837ca120d11ba26469706673582212208374de67fd14a51784a1c3fe764c011cc7b9f062cdfa974ad290e69de756713364736f6c63430008110033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600091823560e01c9081631238ac7c1461019957508063521eb27314610172578063b054a9e8146100765763c45a01551461004e57600080fd5b346100725781600319360112610072576001600160a01b0360209254169051908152f35b5080fd5b509060209182600319360112610072579061010a91610093610257565b91846001600160a01b039384835416856001541686865193636fc0109960e11b86860152166024840152602483526100ca83610272565b85518098819482937feebc8e19000000000000000000000000000000000000000000000000000000008452600484015288602484015260448301906102df565b039134905af1938415610166578194610127575b50505191168152f35b909193508481813d831161015f575b61014081836102bd565b81010312610072575190828216820361015c575091388061011e565b80fd5b503d610136565b509051903d90823e3d90fd5b50346100725781600319360112610072576020906001600160a01b03600154169051908152f35b905034610253578160031936011261025357610231916101b7610257565b936001600160a01b039485938483541685600154166020988994636fc0109960e11b86860152166024840152602483526101f083610272565b85518098819482937fd1e64ad700000000000000000000000000000000000000000000000000000000845260048401526060602484015260648301906102df565b602435604483015203915afa9384156101665781946101275750505191168152f35b8280fd5b600435906001600160a01b038216820361026d57565b600080fd5b6060810190811067ffffffffffffffff82111761028e57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761028e57604052565b919082519283825260005b84811061030b575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016102ea56fea26469706673582212206b3118d8911c9425eb566f2e99d8dd5641a4786760ef20e41284f053887fc53e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5704,
        "contract": "contracts/ECDSAWalletFactory.sol:ECDSAWalletFactory",
        "label": "factory",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(SmartWalletFactory)6897"
      },
      {
        "astId": 5707,
        "contract": "contracts/ECDSAWalletFactory.sol:ECDSAWalletFactory",
        "label": "wallet",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ECDSAWallet)5691"
      }
    ],
    "types": {
      "t_contract(ECDSAWallet)5691": {
        "encoding": "inplace",
        "label": "contract ECDSAWallet",
        "numberOfBytes": "20"
      },
      "t_contract(SmartWalletFactory)6897": {
        "encoding": "inplace",
        "label": "contract SmartWalletFactory",
        "numberOfBytes": "20"
      }
    }
  }
}